{"version":3,"sources":["pages/Landing.js","components/Nav.js","solution-code/challenges.js","solution-code/challenges_d_f.js","solution-code/challenges_g_j.js","solution-code/challenges_k_n.js","solution-code/challenges_o_r.js","solution-code/challenges_s.js","solution-code/challenges_t_z.js","components/Solution.js","pages/Solutions.js","App.js","index.js"],"names":["Landing","className","style","backgroundColor","fontSize","to","type","href","target","rel","Nav","id","challenges","candies","name","instructions","codeOutput","code","n","m","Math","floor","arguments","descriptions","text","absvaluesumminimization","a","smallestSum","Infinity","smallestSubtract","i","length","thisSum","j","abs","adanumber","line","stripped","split","filter","char","join","isNaN","hashSplit","base","str","parseInt","checkChar","Number","addBinary","b","BigInt","toString","addborder","picture","forEach","string","index","frame","unshift","push","additionWithoutCarrying","param1","param2","max","String","num1","reverse","num2","sum","addend1","addend2","adjacentElementsProduct","inputArray","product","thisFactor","allLongestStrings","longestLength","map","element","almostIncreasingSequence","sequence","removed","alphabeticShift","inputString","newString","charCodeAt","fromCharCode","alphabetSubsequence","s","lastCode","alphanumericLess","s1","s2","splitTokens","str_split","currentNumber","s1_split","s2_split","MAX_SAFE_INTEGER","alternatingSums","sums","firstVal","number","console","log","appleBoxes","k","yellow","red","areEquallyStrong","yourLeft","yourRight","friendsLeft","friendsRight","areIsomorphic","array1","array2","every","array","areSimilar","firstElement","secondElement","isEqual","areSimilar2","arrayCheck","arr1","arr2","arithmeticExpression","c","arrayChange","totalCount","currentVal","concatenateArrays","concat","arrayConversion","output","add","thisArray","arrayMaximalAdjacentDifference","largestDifference","thisDifference","arrayPacking","binaryJoin","thisBinary","total","arrayPairSum","nums","sort","arrayPreviousLess","items","item","thisElement","arrayReplace","elemToReplace","substitutionElem","avoidObstacles","maxAmount","isValid","some","beautifulText","l","r","offset","currentIndex","bishopAndPawn","bishop","pawn","currentSquare","currentLetter","bishopDiagonal","bishop1","bishop2","moveBishops","bishopInput","letter","boxBlur","image","thisRow","i_prime","j_prime","boxesPacking","width","height","boxes","box","dimensions","buildPalindrome","st","checkPalindrome","checkString","firstHalf","substring","secondHalf","pop","shift","palindrome","startOffset","endOffset","calPoints","ops","record","op","reduce","canConstruct","ransomNote","magazine","magazineMap","noteArray","thisLetter","candles","candlesNumber","makeNew","currentCandles","currentLeftovers","totalBurned","canWinNim","characterParity","symbol","checkPerfectNumber","num","factors","ceil","chessBishopDream","boardSize","initPosition","initDirection","count","directions","positions","movePosition","position","chessBoardCellColor","cell1","cell2","chessKnight","cell","col","row","totalSpaces","chessTriangle","christmasTree","levelNum","levelHeight","tree","maxLength","crownTop","crownBase","thisLevel","defaultTopSize","defaultTopLength","thisLine","thisSize","thisLength","baseWidth","baseLength","baseLevel","cipher26","message","runningSum","decodedMessage","currentCode","decodedCode","circleOfNumbers","firstNumber","climbStairs","nextNum","combs","comb1","comb2","comb1Copy","comb2Copy","leftSplit","rightSplit","valid","min","comfortableNumbers","aMin","current","aMax","bMin","bMax","commonCharacterCount","numMatching","charMap1","charMap2","constructRectangle","area","factorSets","constructSquare","countDigits","digits","replace","RegExp","charMap","largestUsed","largest","Array","fill","sqrt","contoursShifting","matrix","shiftElements","elements","counterClockwise","rowWidth","colHeight","elementsToShift","slice","removedElement","sectionSize","section1","section2","reorderedSections","start_i","start_j","i_offset","j_offset","shiftedElements","correctNonogram","size","nonogramField","rules","groupCount","countSumOfTwoRepresentations2","createAnagram","t","sMap","tMap","charsToAdd","charsToRemove","character","crossingSum","arrayIndex","crosswordFormation","words","workingCrossword","first","second","third","fourth","check","firstWord","secondWord","thirdWord","fourthWord","firstWord_1","firstWord_2","secondWord_1","secondWord_2","thirdWord_1","fourthWord_1","thirdWord_2","fourthWord_2","charAt","curiousClock","someTime","leavingTime","monthMinutes","convertToMins","timeString","timeUnits","flat","someTimeMins","minutesInput","minutesLeft","mins","hours","years","numLeapDays","monthSum","monthIndex","months","day","convertToString","cyclicString","lengths","subString","repeatedString","includes","challenges_d_f","dayOfWeek","birthdayDate","findDays","date","currentDate","dayToFind","nextDate","totalYears","nextDateArray","decipher","cipher","result","deleteDigit","numberString","maxNumber","thisNumber","depositProfit","deposit","rate","threshold","detectCapitalUse","word","toUpperCase","toLowerCase","differentRightmostBit","bit","differentSquares","uniqueSquares","thisSquare","row_prime","col_prime","square","differentSymbolsNaive","uniqueChars","digitDegree","iterations","digitArray","digitDifferenceSort","differenceMap","smallest","lastDigit","difference","differenceArray","digitsProduct","currentProduct","distributeCandies","candyType","Set","drawRectangle","canvas","rectangle","electionsWinners","votes","votesToWin","numberOfCandidates","numMax","candidate","equalPairOfBits","m_bits","value","evenDigitsOnly","extractEachKth","splice","extractMatrixColumn","column","extraNumber","eyeRhyme","pairOfLines","inputSplit","formatted","match","exec","fileNaming","names","uniqueNames","thisName","findEmailDomain","address","domain","findLUSlength","findMaxConsecutiveOnes","findTheDifference","firstDigit","firstReverseTry","arr","challenges_g_j","gravitation","rows","motionless","spaces","foundStones","growingPlant","upSpeed","downSpeed","desiredHeight","days","currentHeight","hammingWeight","prev","higherVersion","ver1","ver2","ver1split","ver2split","holiday","x","weekDay","month","yearNumber","isLeap","dayOfFirst","inputDate","findCurrentDay","indexOf","find","thisMonth","dateOfHoliday","houseNumbersSum","findIndex","houseOfCats","legs","legsLeft","possiblePeople","htmlEndTagByStartTag","startTag","tag","substr","increaseNumberRoundness","zeroEnd","insertionSortList","head","currentElement","integerToStringOfFixedWidth","intersection","nums1","nums2","findIntersections","shorterArray","largerArray","intersections","isBeautifulString","charKey","isCaseInsensitivePalindrome","lowerString","isDigit","isInfiniteProcess","isInformationConsistent","evidences","foundGuilty","foundInnocent","isIPv4Address","octets","octet","isLucky","nString","sum1","sum2","isMAC48Address","groups","isOneBitCharacter","bits","thisGroup","lastGroup","isPalindrome","isPerfectSquare","side","isPower","isPowerOfFour","isPowerOfThree","isSentenceCorrect","sentence","test","isSmooth","isSubsequence","pattern","isSubstitutionCipher","string1","string2","isSumOfConsecutive2","totalWays","isToeplitzMatrix","lastRowElements","isUnstablePair","filename1","filename2","isValidParentheses","stack","challenges_k_n","killKthBit","knapsackLight","value1","weight1","value2","weight2","maxW","largestNumber","lateRide","longestCommonPrefix","strs","prefix","maxPrefix","currentPrefix","leastFactorial","multiplier","lengthOfLastWord","lineEncoding","substrings","lastChar","chars","group","lineUp","commands","correct","incorrect","longestDigitsPrefix","longestWord","currentWord","magicalWell","majorityElement","numsMap","Object","keys","makeArrayConsecutive2","statues","sorted","statue","missing","contains","matrixElementsSum","haunted","thisRoomIsHanted","matrixReshape","mat","formatOutput","numbers","outputString","arrayMaxConsecutiveSum","maxSum","thisTotal","maximumSum","q","qMap","range","maxqVal","qMapArray","arrayToSum","thisIndex","nextLargestVal","maxMultiple","divisor","bound","messageFromBinaryCode","letters","codes","thisCode","metroCard","lastNumberOfDays","minesweeper","minimalNumberOfCoins","coins","price","costLeft","coin","mirrorBits","binary","missedClasses","year","daysOfTheWeek","holidays","thisDate","mostFrequentDigitSum","sequenceNumbers","currentSequenceNumber","mostFrequent","newNumeralSystem","pairs","largeCode","newYearCelebrations","takeOffTime","minutes","celebrations","takeOffMinutes","minuteIncrements","noIfsNoButs","nthNumber","numberOfClans","divisors","factorCombos","factorString","factor","trim","numbersGrouping","groupMap","groupNumber","numJewelsInStones","jewels","stones","jewelsMap","jewel","stone","challenges_o_r","pagesNumberingWithInk","numberOfDigits","digitsLeft","currentPage","pairOfShoes","shoes","uniqueVals","shoeSides","shoe","palindromeRearranging","oddsLeft","pascalsTriangle","numRows","pascalsTriangle2","rowIndex","phoneCall","min1","min2_10","min11","centsLeft","totalMinutes","pivotIndex","plusOne","from","polygonPerimeter","perimeter","squareIndex","properNounCorrection","noun","rangeBitCount","reachNextLevel","experience","reward","rectangleRotation","xSide_unis","ySide_units","reflectString","regularMonths","currMonth","currentDay","currentMonth","currentYear","daysPassed","removeArrayPart","removeDuplicates","replaceAllDigitsRegExp","input","replaceAll","replaceMiddle","reverseInParentheses","stringArray","resultArray","tempArray","reverseArrayString","lastIndexOf","reverseOnDiagonals","reverseString","left","right","reverseVowels","vowels","stringVowels","romanToInt","thousands","hundreds","tens","ones","startingIndex","rotateString","goal","rounders","numRounds","powerOfTen","round","rowsRearranging","runnersMeetings","startPosition","speed","findIntersection","speed1","speed2","start1","start2","xVal","yVal","values","challenges_s","searchInsert","seatsInTheater","nCols","nRows","secondRightmostZeroBit","selfDividingNumbers","isSelfDividing","shapeArea","shuffledArray","shuffled","sumIndex","shuffledSum","singleNumber","numMap","sortByHeight","sortByLength","lengthMap","spiralNumbers","squareDigitsSequence","a0","found","thisDigit","starRotation","center","totalRotations","rotateElements","squareElements","arrayToRotate","lastElement","currentSquareWidth","rotatedSquare","stolenLunch","note","stringsConstruction","currentString","stringsCrossover","stringsRearrangement","allPermutations","permutations","permutation","inputArr","currentArray","nextElement","createPermutations","differences","strStr","haystack","needle","sudoku","grid","existingNums","sumUpNumbers","stringToTrim","parsedNumbers","accumulator","swapAdjacentBits","thisBit","isArray","digit","pair","thisPair","currentTotal","currentDigit","swapAdjacentWords","swapDiagonals","switchLights","challenges_t_z","isTandemRepeat","sub","tennisSet","score1","score2","threeSplit","combinations","firstPiece","secondPiece","timedReading","textStripped","twoSum","twoSum2","missingAddend","uniqueDigitProducts","products","uniqueMorseRepresentations","transformations","transformation","getMorseCodeIndex","validTime","time","variableName","videoPart","part","partSeconds","totalSeconds","commonFactor","factors1","factors2","findCommonFactors","findFactors","volleyballPositions","formation","shiftOnce","currentPositions","positionMap","last","weakNumbers","weaknessMap","weakness","maxWeakness","whoseTurn","p","whiteConfigurations","black1Codes","knight","white1Codes","willYou","young","beautiful","loved","wordPattern","wordMap","allChallenges","Solution","props","refs","useRef","solutionOutput","useEffect","field","innerHTML","challengeName","description","for","inputtype","ref","el","onClick","args","thisRef","getAttribute","stringInput","convertToNumberArray","convertToStringArray","arrayString","arrayStringElement","convertToArrayOfNumberArrays","convertToArrayOfArrays","convertToArrayOfBooleanArrays","convertToBoolean","error","Error","NaN","Solutions","useState","setChallengeName","challengeDropdown","onChange","e","selected","App","exact","path","component","ReactDOM","render","StrictMode","basename","process","document","getElementById"],"mappings":"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GAClB,GACyB,MAAzBppB,EAAEopB,EAAgB,GAClB,GACyB,MAAzBppB,EAAEopB,EAAgB,GAClB,GACA,GACuB,MAArBppB,EAAEopB,KACRjhB,EAA+B,MAAzBnI,EAAEopB,EAAgB,IAAuC,MAAzBppB,EAAEopB,EAAgB,IAAuC,MAAzBppB,EAAEopB,EAAgB,GACpF,GACyB,MAAzBppB,EAAEopB,EAAgB,IAAuC,MAAzBppB,EAAEopB,EAAgB,GAClD,GACyB,MAAzBppB,EAAEopB,EAAgB,GAClB,GACA,IAGRrmB,EAAO5E,KAAKgK,GAGG,KAARA,EACHihB,EAAgB,EACR,KAARjhB,GAAsB,KAARA,EACdihB,EAAgB,EACR,KAARjhB,GAAsB,KAARA,GAAsB,KAARA,GAAsB,KAARA,EAC1CihB,EAAgB,EAChBA,EAGR,SAASD,EAAKC,GAEV,IAAIjhB,EAAM,GAwBV,MAvBwB,MAArBnI,EAAEopB,GACDjhB,EAA+B,MAAzBnI,EAAEopB,EAAgB,GACpB,EACyB,MAAzBppB,EAAEopB,EAAgB,GAClB,EACyB,MAAzBppB,EAAEopB,EAAgB,GAClB,EACyB,MAAzBppB,EAAEopB,EAAgB,GAClB,EACA,EACuB,MAArBppB,EAAEopB,KACRjhB,EAA+B,MAAzBnI,EAAEopB,EAAgB,GACpB,EACyB,MAAzBppB,EAAEopB,EAAgB,GAClB,EACyB,MAAzBppB,EAAEopB,EAAgB,GAClB,EACA,GAGRrmB,EAAO5E,KAAKgK,GAGG,IAARA,EACHihB,EAAgB,EACR,IAARjhB,GAAqB,IAARA,EACbihB,EAAgB,EACR,IAARjhB,GAAqB,IAARA,GAAqB,IAARA,GAAqB,IAARA,EACvCihB,EAAgB,EAChBA,IAGZvtB,UAAW,CACPC,aAAc,CACV,CACIC,KAAM,yDACNlB,KAAM,aAKtBwuB,aAAc,CACVhuB,KAAK,eACLC,aAAa,0SAKbC,WAAW,gKAKXC,KAAM,SAAsBwE,EAAGspB,GAC3B,UAAItpB,EAAIA,GAAGkS,SAASoX,IAASA,EAAKhtB,QAAU0D,EAAE1D,SAGlDT,UAAW,CACPC,aAAc,CACV,C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","file":"static/js/main.e0f6a928.chunk.js","sourcesContent":["import { Link } from 'react-router-dom';\n\nconst Landing = () => {\n    return (\n        <>\n            <div className=\"mb-5 text-center\">\n                <div className=\"py-5 mb-5\" style={{backgroundColor:\"rgba(23,162,184,0.2)\"}}>\n                    <h1 className=\"display-5\">CodeSignal Solutions</h1>\n                    <h2 className=\"display-5 text-muted\">Michael Hanson</h2>\n                </div>\n                <div className=\"col-lg-6 mx-auto\">\n                    <p className=\"lead mb-4\" style={{fontSize:\"1.4rem\"}}>Browse my JavaScript solutions to coding challenges.</p>\n                    <div className=\"justify-content-center\">\n                        \n                        <Link to={\"/solutions/codesignal-projects-react-showcase\"}>\n                            <button type=\"button\" className=\"btn btn-info btn-lg px-4 mx-auto my-2 d-block\">View Solutions</button>\n                        </Link>\n                        \n                    \n                        {/*\n                        <Link to={\"solutions\"}>\n                            <button type=\"button\" className=\"btn btn-info btn-lg px-4 mx-auto my-2 d-block\">View Solutions</button>\n                        </Link>\n                        */}\n                    \n                        <a href=\"https://github.com/mhans003/codesignal-projects-react-showcase\" target=\"_blank\" rel=\"noopener noreferrer\">\n                            <button type=\"button\" className=\"btn btn-secondary px-4 mx-auto my-2 d-block\">Project Repo <i className=\"fab fa-github\"></i></button>\n                        </a>\n                        <a href=\"https://github.com/mhans003/algorithm-solutions-cs\" target=\"_blank\" rel=\"noopener noreferrer\">\n                            <button type=\"button\" className=\"btn btn-secondary px-4 mx-auto my-2 d-block\">Solutions Repo <i className=\"fab fa-github\"></i></button>\n                        </a>\n                        <a href=\"https://mhans003.github.io/portfolio/portfolio.html\" target=\"_blank\" rel=\"noopener noreferrer\">\n                            <button type=\"button\" className=\"btn btn-secondary px-4 mx-auto my-2 d-block\">Michael's Portfolio <i className=\"fas fa-briefcase\"></i></button>\n                        </a>\n                    </div>\n                </div>\n            </div>\n        </>\n    );\n};\n\nexport default Landing;","//import { Link } from 'react-router-dom';\n//import Landing from '../pages/Landing';\n\nconst Nav = () => {\n    return (\n        <nav className=\"navbar navbar-expand-sm navbar-dark bg-info py-4\">\n            <a className=\"navbar-brand ml-3\" href=\"/codesignal-projects-react-showcase\">CodeSignal Solutions</a>\n            {/*<a className=\"navbar-brand ml-3\" href=\"/\">CodeSignal Solutions</a>*/}\n            <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n                <span className=\"navbar-toggler-icon\"></span>\n            </button>\n            <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n                <ul className=\"navbar-nav ml-auto\">\n                    <li className=\"nav-item\">\n                        <a className=\"nav-link text-light\" href=\"https://mhans003.github.io/portfolio/portfolio.html\" target=\"_blank\" rel=\"noopener noreferrer\">Michael Hanson</a>\n                    </li>\n                    <li className=\"nav-item\">\n                        <a className=\"nav-link text-light\" href=\"/codesignal-projects-react-showcase\">Home</a>\n                        {/*<a className=\"nav-link text-light\" href=\"/\">Home</a>*/}\n                    </li>\n                </ul>\n            </div>\n        </nav>\n    );\n};\n\nexport default Nav;","//Include global BigInt (as comment) in order to prevent no-undef in this environment.\n/* global BigInt */\n\nconst challenges = {\n    candies: {\n        name: \"candies\",\n        instructions: `n children have got m pieces of candy. They want to eat as much candy as they can, but each child must eat exactly the same amount of candy as any other child. Determine how many pieces of candy will be eaten by all the children together. Individual pieces of candy cannot be split.`,\n        codeOutput: \n        `function candies(n, m) { \n            return Math.floor(m / n) * n; \n        }`,\n        code: function candies(n, m) {\n            return Math.floor(m / n) * n;\n        },\n        arguments: {\n            descriptions: [\n                {\n                    text: \"Number of Children (Whole Number)\",\n                    type: \"Number\"\n                },\n                {\n                    text: \"Number of Pieces of Candy (Whole Number)\",\n                    type: \"Number\"\n                }\n            ]\n        }\n    },\n    absvaluesumminimization: {\n        name: \"absoluteValuesSumMinimization\",\n        instructions: `Given a sorted array of integers a, your task is to determine which element of a is closest to all other values of a. In other words, find the element x in a, which minimizes the following sum:\n\n        abs(a[0] - x) + abs(a[1] - x) + ... + abs(a[a.length - 1] - x)\n        (where abs denotes the absolute value)\n        \n        If there are several possible answers, output the smallest one.`,\n        codeOutput: \n        `function absoluteValuesSumMinimization(a) {\n            //Keep track of the smallest sum and smallest subtracting element\n            let smallestSum = Infinity;\n            let smallestSubtract = Infinity;\n            \n            //Loop through all elements to use as subtractors.\n            for(let i = 0; i < a.length; i++) {\n                let thisSum = 0;\n                //For each subtractor, repeat the summing algorithm for each difference.\n                for(let j = 0; j < a.length; j++) {\n                    thisSum += Math.abs(a[j] - a[i]);\n                }\n                //If this produced the smallest sum, save this as the current smallest 'subtractor'\n                if(thisSum < smallestSum) {\n                    smallestSum = thisSum;\n                    smallestSubtract = i;\n                }\n                \n            }\n            //Return the element at the index that represents the best 'subtractor' \n            return a[smallestSubtract];\n        }`,\n        code: function absoluteValuesSumMinimization(a) {\n            //Keep track of the smallest sum and smallest subtracting element\n            let smallestSum = Infinity;\n            let smallestSubtract = Infinity;\n            \n            //Loop through all elements to use as subtractors.\n            for(let i = 0; i < a.length; i++) {\n                let thisSum = 0;\n                //For each subtractor, repeat the summing algorithm for each difference.\n                for(let j = 0; j < a.length; j++) {\n                    thisSum += Math.abs(a[j] - a[i]);\n                }\n                //If this produced the smallest sum, save this as the current smallest 'subtractor'\n                if(thisSum < smallestSum) {\n                    smallestSum = thisSum;\n                    smallestSubtract = i;\n                }\n                \n            }\n            //Return the element at the index that represents the best 'subtractor' \n            return a[smallestSubtract];\n        },\n        arguments: {\n            descriptions: [\n                {\n                    text: \"Sorted Array of Integers (In the form 1,2,3,...(No Square Brackets [])\",\n                    type: \"NumberArray\"\n                }\n            ]\n        }\n    },\n    adanumber: {\n        name: \"adaNumber\",\n        instructions: `Consider two following representations of a non-negative integer:\n\n        A simple decimal integer, constructed of a non-empty sequence of digits from 0 to 9;\n        An integer with at least one digit in a base from 2 to 16 (inclusive), enclosed between # characters, and preceded by the base, which can only be a number between 2 and 16 in the first representation. For digits from 10 to 15 characters a, b, ..., f and A, B, ..., F are used.\n        Additionally, both representations may contain underscore (_) characters; they are used only as separators for improving legibility of numbers and can be ignored while processing a number.\n        \n        Your task is to determine whether the given string is a valid integer representation.\n        \n        Note: this is how integer numbers are represented in the programming language Ada.`,\n        codeOutput: \n        `function adaNumber(line) {\n            //Helper function to see if chars in number part of string are valid in this base.\n            const checkChar = (base, str) => {\n                for(let i = 0; i < str.length; i++) {\n                    //If this particular char returns NaN, we know this whole string isn't valid in this base.\n                    if(isNaN(parseInt(str[i], base))) {\n                        return false;\n                    } \n                }\n                //Make sure the string doesn't have a length of 0 (this triggers a 'false positive' true)\n                return str.length === 0 ? false : true;\n            };\n            \n            //If this number is simply a valid integer with underscores, return true.\n            let stripped = line.split(\"\").filter(char => char !== \"_\").join(\"\");\n            if(!isNaN(stripped) && stripped.length > 0) return true;\n            \n            //Otherwise, split this into an array, which should have 3 elements: a valid base, a valid number, and an empty third element.\n            let hashSplit = stripped.split(\"#\");\n            \n            //Return true if all 3 conditions are correct, including this array only having 3 elements.\n            return hashSplit.length === 3 && \n                   hashSplit[0] > 1 && hashSplit[0] < 17 &&\n                   checkChar(Number(hashSplit[0]), hashSplit[1]) &&\n                   hashSplit[2].length === 0;\n        }`,\n        code: function adaNumber(line) {\n            //Helper function to see if chars in number part of string are valid in this base.\n            const checkChar = (base, str) => {\n                for(let i = 0; i < str.length; i++) {\n                    //If this particular char returns NaN, we know this whole string isn't valid in this base.\n                    if(isNaN(parseInt(str[i], base))) {\n                        return false;\n                    } \n                }\n                //Make sure the string doesn't have a length of 0 (this triggers a 'false positive' true)\n                return str.length === 0 ? false : true;\n            };\n            \n            //If this number is simply a valid integer with underscores, return true.\n            let stripped = line.split(\"\").filter(char => char !== \"_\").join(\"\");\n            if(!isNaN(stripped) && stripped.length > 0) return true;\n            \n            //Otherwise, split this into an array, which should have 3 elements: a valid base, a valid number, and an empty third element.\n            let hashSplit = stripped.split(\"#\");\n            \n            //Return true if all 3 conditions are correct, including this array only having 3 elements.\n            return hashSplit.length === 3 && \n                   hashSplit[0] > 1 && hashSplit[0] < 17 &&\n                   checkChar(Number(hashSplit[0]), hashSplit[1]) &&\n                   hashSplit[2].length === 0;\n        },\n        arguments: {\n            descriptions: [\n                {\n                    text: \"Integer Number (Programming Language Ada)\",\n                    type: \"String\"\n                }\n            ]\n        }\n    },\n    addBinary: {\n        name: 'addBinary',\n        instructions: `Given two binary strings a and b, return their sum as a binary string.`,\n        codeOutput: \n        `var addBinary = function(a, b) {\n            //Use BigInt to prevent overflow.\n            let sum = BigInt(\"0b\" + a) + BigInt(\"0b\" + b);\n            //Convert back to binary.\n            return sum.toString(2);\n        };`,\n        code: function addBinary(a, b) {\n            //Use BigInt to prevent overflow.\n            let sum = BigInt(`0b${a}`) + BigInt(`0b${b}`);\n            //Convert back to binary.\n            return sum.toString(2);\n        },\n        arguments: {\n            descriptions: [\n                {\n                    text: \"Binary String (Example: 1010)\",\n                    type: \"String\"\n                },\n                {\n                    text: \"Binary String (Example: 1011)\",\n                    type: \"String\"\n                }\n            ]\n        }\n    },\n    addborder: {\n        name: 'addBorder',\n        instructions: `Given a rectangular matrix of characters, add a border of asterisks(*) to it.`,\n        codeOutput: \n        `function addBorder(picture) {\n            picture.forEach((string, index) => {\n                picture[index] = \"*\" + string + \"*\";\n            });\n            let frame = \"\";\n            for(let i = 0; i < picture[0].length; i++) {\n                frame += \"*\";\n            }\n            picture.unshift(frame);\n            picture.push(frame);\n            \n            return picture;\n        }`,\n        code: function addBorder(picture) {\n            picture.forEach((string, index) => {\n                picture[index] = \"*\" + string + \"*\";\n            });\n            let frame = \"\";\n            for(let i = 0; i < picture[0].length; i++) {\n                frame += \"*\";\n            }\n            picture.unshift(frame);\n            picture.push(frame);\n            \n            return picture;\n        },\n        arguments: {\n            descriptions: [\n                {\n                    text: \"Array of Equal-Length Strings (No Brackets []; Quotes Not Needed)\",\n                    type: \"StringArray\"\n                }\n            ]\n        }\n    },\n    additionWithoutCarrying: {\n        name: 'additionWithoutCarrying',\n        instructions: `A little boy is studying arithmetic. He has just learned how to add two integers, written one below another, column by column. But he always forgets about the important part - carrying.\n\n        Given two integers, your task is to find the result which the little boy will get.`,\n        codeOutput: \n        `function additionWithoutCarrying(param1, param2) {\n            //Find longest string for the loop.\n            let length = Math.max(String(param1).length, String(param2).length);\n            //Make an array of each number.\n            let num1 = String(param1).split(\"\").reverse();\n            let num2 = String(param2).split(\"\").reverse();\n            //Keep track of sum as an array of digits.\n            let sum = [];\n            //Until the end of the longest number, add the digits, but ignore the \"carried\" tens place.\n            for(let i = 0; i < length; i++) {\n                let addend1 = num1[i] ? Number(num1[i]) : 0;\n                let addend2 = num2[i] ? Number(num2[i]) : 0;\n                sum.unshift((addend1 + addend2) % 10);\n            }\n            //Put the array back together and return as a number.\n            return Number(sum.join(\"\"));\n        }`,\n        code: function additionWithoutCarrying(param1, param2) {\n            //Find longest string for the loop.\n            let length = Math.max(String(param1).length, String(param2).length);\n            //Make an array of each number.\n            let num1 = String(param1).split(\"\").reverse();\n            let num2 = String(param2).split(\"\").reverse();\n            //Keep track of sum as an array of digits.\n            let sum = [];\n            //Until the end of the longest number, add the digits, but ignore the \"carried\" tens place.\n            for(let i = 0; i < length; i++) {\n                let addend1 = num1[i] ? Number(num1[i]) : 0;\n                let addend2 = num2[i] ? Number(num2[i]) : 0;\n                sum.unshift((addend1 + addend2) % 10);\n            }\n            //Put the array back together and return as a number.\n            return Number(sum.join(\"\"));\n        },\n        arguments: {\n            descriptions: [\n                {\n                    text: \"Enter an Integer\",\n                    type: \"Number\"\n                },\n                {\n                    text: \"Enter a Second Integer\",\n                    type: \"Number\"\n                }\n            ]\n        }\n    },\n    adjacentElementsProduct: {\n        name: 'adjacentElementsProduct',\n        instructions: `Given an array of integers, find the pair of adjacent elements that has the largest product and return that product.`,\n        codeOutput: \n        `function adjacentElementsProduct(inputArray) {\n            let product; \n            for(let thisFactor = 0; thisFactor < inputArray.length - 1; thisFactor++) {\n                if(!product || inputArray[thisFactor] * inputArray[thisFactor + 1] > product) {\n                    product = inputArray[thisFactor] * inputArray[thisFactor + 1]; \n                }\n            }\n            return product; \n        }`,\n        code: function adjacentElementsProduct(inputArray) {\n            let product; \n            for(let thisFactor = 0; thisFactor < inputArray.length - 1; thisFactor++) {\n                if(!product || inputArray[thisFactor] * inputArray[thisFactor + 1] > product) {\n                    product = inputArray[thisFactor] * inputArray[thisFactor + 1]; \n                }\n            }\n            return product; \n        },\n        arguments: {\n            descriptions: [\n                {\n                    text: \"Array of Integers (No Brackets [])\",\n                    type: \"NumberArray\"\n                }\n            ]\n        }\n    },\n    allLongestStrings: {\n        name: 'allLongestStrings',\n        instructions: `Given an array of strings, return another array containing all of its longest strings.`,\n        codeOutput: \n        `function allLongestStrings(inputArray) {\n            const longestLength = Math.max(...inputArray.map(element => element.length));\n            return inputArray.filter(element => element.length === longestLength);\n        }`,\n        code: function allLongestStrings(inputArray) {\n            const longestLength = Math.max(...inputArray.map(element => element.length));\n            return inputArray.filter(element => element.length === longestLength);\n        },\n        arguments: {\n            descriptions: [\n                {\n                    text: \"Array of Strings (Quotes and Spaces Not Needed)\",\n                    type: \"StringArray\"\n                }\n            ]\n        }\n    },\n    almostIncreasingSequence: {\n        name: 'almostIncreasingSequence',\n        instructions: `Given a sequence of integers as an array, determine whether it is possible to obtain a strictly increasing sequence by removing no more than one element from the array.\n\n        Note: sequence a0, a1, ..., an is considered to be a strictly increasing if a0 < a1 < ... < an. Sequence containing only one element is also considered to be strictly increasing.`,\n        codeOutput: \n        `function almostIncreasingSequence(sequence) {\n            let removed = 0; \n              for(let i = 1; i < sequence.length; i++) {\n                  if(sequence[i] <= sequence[i - 1]) {\n                      removed++; \n                      if(removed > 1) {\n                          return false; \n                      }\n                      if(sequence[i] <= sequence[i - 2] && sequence[i + 1] <= sequence[i - 1]) {\n                          return false; \n                      }\n                  }\n              }\n            return true; \n        }`,\n        code: function almostIncreasingSequence(sequence) {\n            let removed = 0; \n              for(let i = 1; i < sequence.length; i++) {\n                  if(sequence[i] <= sequence[i - 1]) {\n                      removed++; \n                      if(removed > 1) {\n                          return false; \n                      }\n                      if(sequence[i] <= sequence[i - 2] && sequence[i + 1] <= sequence[i - 1]) {\n                          return false; \n                      }\n                  }\n              }\n            return true; \n        },\n        arguments: {\n            descriptions: [\n                {\n                    text: \"\",\n                    type: \"NumberArray\"\n                }\n            ]\n        }\n    },\n    alphabeticShift: {\n        name: 'alphabeticShift',\n        instructions: `Given a string, your task is to replace each of its characters by the next one in the English alphabet; i.e. replace a with b, replace b with c, etc (z would be replaced by a).`,\n        codeOutput: \n        `function alphabeticShift(inputString) {\n            let newString = \"\";\n            //For each character, add one to the char code.\n            for(let i = 0; i < inputString.length; i++) {\n                if(inputString.charCodeAt(i) === 122) {\n                    //Use 'a' if we are already at 'z'\n                    newString += 'a';\n                } else {\n                    //Otherwise, add one to the char code.\n                    newString += String.fromCharCode((inputString.charCodeAt(i) + 1));\n                }\n            }\n            return newString;\n        }`,\n        code: function alphabeticShift(inputString) {\n            let newString = \"\";\n            //For each character, add one to the char code.\n            for(let i = 0; i < inputString.length; i++) {\n                if(inputString.charCodeAt(i) === 122) {\n                    //Use 'a' if we are already at 'z'\n                    newString += 'a';\n                } else {\n                    //Otherwise, add one to the char code.\n                    newString += String.fromCharCode((inputString.charCodeAt(i) + 1));\n                }\n            }\n            return newString;\n        },\n        arguments: {\n            descriptions: [\n                {\n                    text: \"String of Lowercase Letters\",\n                    type: \"String\"\n                }\n            ]\n        }\n    },\n    alphabetSubsequence: {\n        name: 'alphabetSubsequence',\n        instructions: `Check whether the given string is a subsequence of the plaintext alphabet.`,\n        codeOutput: \n        `function alphabetSubsequence(s) {\n            //Keep track of the current code.\n            let lastCode = s.charCodeAt(0);\n            //Loop through every other character, and make sure it is 'next' in the sequence.\n            for(let i = 1; i < s.length; i++) {\n                //If this character has a code that is the same or less than the previous character, return false.\n                if(s.charCodeAt(i) <= lastCode) return false;\n                lastCode = s.charCodeAt(i);\n            }\n            return true;\n        }`,\n        code: function alphabetSubsequence(s) {\n            //Keep track of the current code.\n            let lastCode = s.charCodeAt(0);\n            //Loop through every other character, and make sure it is 'next' in the sequence.\n            for(let i = 1; i < s.length; i++) {\n                //If this character has a code that is the same or less than the previous character, return false.\n                if(s.charCodeAt(i) <= lastCode) return false;\n                lastCode = s.charCodeAt(i);\n            }\n            return true;\n        },\n        arguments: {\n            descriptions: [\n                {\n                    text: \"String of Alphabetic Characters (All Lowercase or All Uppercase)\",\n                    type: \"String\"\n                }\n            ]\n        }\n    },\n    alphanumericLess: {\n        name: 'alphanumericLess',\n        instructions: `An alphanumeric ordering of strings is defined as follows: each string is considered as a sequence of tokens, where each token is a letter or a number (as opposed to an isolated digit, as is the case in lexicographic ordering). For example, the tokens of the string \"ab01c004\" are [a, b, 01, c, 004]. In order to compare two strings, we'll first break them down into tokens and then compare the corresponding pairs of tokens with each other (i.e. compare the first token of the first string with the first token of the second string, etc).\n\n        Here is how tokens are compared:\n        \n        If a letter is compared with another letter, the usual alphabetical order applies.\n        A number is always considered less than a letter.\n        When two numbers are compared, their values are compared. Leading zeros, if any, are ignored.\n        If at some point one string has no more tokens left while the other one still does, the one with fewer tokens is considered smaller.\n        \n        If the two strings s1 and s2 appear to be equal, consider the smallest index i such that tokens(s1)[i] and tokens(s2)[i] (where tokens(s)[i] is the ith token of string s) differ only by the number of leading zeros. If no such i exists, the strings are indeed equal. Otherwise, the string whose ith token has more leading zeros is considered smaller.\n        \n        Here are some examples of comparing strings using alphanumeric ordering.\n        \n        \"a\" < \"a1\" < \"ab\"\n        \"ab42\" < \"ab000144\" < \"ab00144\" < \"ab144\" < \"ab000144x\"\n        \"x11y012\" < \"x011y13\"\n        Your task is to return true if s1 is strictly less than s2, and false otherwise.`,\n        codeOutput: \n        `function alphanumericLess(s1, s2) {\n            //Helper function to split strings into tokens.\n            const splitTokens = str => {\n                let str_split = [];\n                let currentNumber = '';\n                \n                for(let i = 0; i < str.length; i++) {\n                    if(isNaN(str[i])) {\n                        //If there is a currentNumber to be pushed, make sure to do that now.\n                        if(currentNumber.length > 0) {\n                            str_split.push(currentNumber);\n                            currentNumber = '';\n                        }\n                        str_split.push(str[i]);\n                    } else {\n                        currentNumber += str[i];\n                    }\n                }\n                if(currentNumber.length > 0) str_split.push(currentNumber);\n                \n                return str_split;\n            };\n            \n            let s1_split = splitTokens(s1);\n            let s2_split = splitTokens(s2);\n        \n            for(let i = 0; i < Math.max(s1_split.length, s2_split.length); i++) {\n                //If both tokens are not numbers\n                if(isNaN(s1_split[i]) && isNaN(s2_split[i])) {\n                    if(s1_split[i] < s2_split[i]) {\n                        return true;\n                    } else if(s1_split[i] > s2_split[i]) {\n                        return false;\n                    }\n                //If s1 has a number and s2 has a non-number\n                } else if(!isNaN(s1_split[i]) && isNaN(s2_split[i])) {\n                    return true;\n                //If both are numbers\n                } else if(!isNaN(s1_split[i]) && !isNaN(s2_split[i])) {\n                    //If these numbers are too large, use bigint.\n                    let num1 = s1_split[i] > Number.MAX_SAFE_INTEGER ?\n                    BigInt(s1_split[i]) : Number(s1_split[i]);\n                    let num2 = s2_split[i] > Number.MAX_SAFE_INTEGER ?\n                    BigInt(s2_split[i]) : Number(s2_split[i]);\n                    \n                    if(num1 < num2 &&\n                    !(i === s2_split.length - 1 && s1_split.length > s2_split.length)) { \n                        return true;\n                    }\n                    //See if both these numbers have the same numeric value BUT s1 has more leading zeros.\n                    if(num1 === num2 && s1_split[i].length > s2_split[i].length) return true;\n                }\n                \n                if(s1_split[i] === s2_split[i] && !s1_split[i + 1] && s2_split[i + 1]) return true;\n            }\n            \n            //If values are equal or s1 is greater than s2, return false;\n            return false;\n        }`,\n        code: function alphanumericLess(s1, s2) {\n            //Helper function to split strings into tokens.\n            const splitTokens = str => {\n                let str_split = [];\n                let currentNumber = '';\n                \n                for(let i = 0; i < str.length; i++) {\n                    if(isNaN(str[i])) {\n                        //If there is a currentNumber to be pushed, make sure to do that now.\n                        if(currentNumber.length > 0) {\n                            str_split.push(currentNumber);\n                            currentNumber = '';\n                        }\n                        str_split.push(str[i]);\n                    } else {\n                        currentNumber += str[i];\n                    }\n                }\n                if(currentNumber.length > 0) str_split.push(currentNumber);\n                \n                return str_split;\n            };\n            \n            let s1_split = splitTokens(s1);\n            let s2_split = splitTokens(s2);\n        \n            for(let i = 0; i < Math.max(s1_split.length, s2_split.length); i++) {\n                //If both tokens are not numbers\n                if(isNaN(s1_split[i]) && isNaN(s2_split[i])) {\n                    if(s1_split[i] < s2_split[i]) {\n                        return true;\n                    } else if(s1_split[i] > s2_split[i]) {\n                        return false;\n                    }\n                //If s1 has a number and s2 has a non-number\n                } else if(!isNaN(s1_split[i]) && isNaN(s2_split[i])) {\n                    return true;\n                //If both are numbers\n                } else if(!isNaN(s1_split[i]) && !isNaN(s2_split[i])) {\n                    //If these numbers are too large, use bigint.\n                    let num1 = s1_split[i] > Number.MAX_SAFE_INTEGER ?\n                    BigInt(s1_split[i]) : Number(s1_split[i]);\n                    let num2 = s2_split[i] > Number.MAX_SAFE_INTEGER ?\n                    BigInt(s2_split[i]) : Number(s2_split[i]);\n                    \n                    if(num1 < num2 &&\n                    !(i === s2_split.length - 1 && s1_split.length > s2_split.length)) { \n                        return true;\n                    }\n                    //See if both these numbers have the same numeric value BUT s1 has more leading zeros.\n                    if(num1 === num2 && s1_split[i].length > s2_split[i].length) return true;\n                }\n                \n                if(s1_split[i] === s2_split[i] && !s1_split[i + 1] && s2_split[i + 1]) return true;\n            }\n            \n            //If values are equal or s1 is greater than s2, return false;\n            return false;\n        },\n        arguments: {\n            descriptions: [\n                {\n                    text: \"String of Letters and Digits\",\n                    type: \"String\"\n                },\n                {\n                    text: \"Another String of Letters and Digits\",\n                    type: \"String\"\n                }\n            ]\n        }\n    },\n    alternatingSums: {\n        name: 'alternatingSums',\n        instructions: `Several people are standing in a row and need to be divided into two teams. The first person goes into team 1, the second goes into team 2, the third goes into team 1 again, the fourth into team 2, and so on.\n        You are given an array of positive integers - the weights of the people. Return an array of two integers, where the first element is the total weight of team 1, and the second element is the total weight of team 2 after the division is complete.`,\n        codeOutput: \n        `function alternatingSums(a) {\n            const sums = [0,0];\n            const firstVal = a.map((number, index) => {\n                index % 2 === 1 ? sums[1] += number : sums[0] += number;\n            });\n            return sums;\n        }`,\n        code: function alternatingSums(a) {\n            const sums = [0,0];\n            const firstVal = a.map((number, index) => {\n                return index % 2 === 1 ? sums[1] += number : sums[0] += number;\n            });\n            console.log(firstVal);\n            return sums;\n        },\n        arguments: {\n            descriptions: [\n                {\n                    text: \"Array of Integers (No Brackets [])\",\n                    type: \"NumberArray\"\n                }\n            ]\n        }\n    },\n    appleBoxes: {\n        name: 'appleBoxes',\n        instructions: `You have k apple boxes full of apples. Each square box of size m contains m × m apples. You just noticed two interesting properties about the boxes:\n\n        The smallest box is size 1, the next one is size 2,..., all the way up to size k.\n        Boxes that have an odd size contain only yellow apples. Boxes that have an even size contain only red apples.\n        Your task is to calculate the difference between the number of red apples and the number of yellow apples.`,\n        codeOutput: \n        `function appleBoxes(k) {\n            //We know the first yellow box will have 1 apple.\n            let yellow = 1;\n            let red = 0;\n            //For each box starting with the second, add the total to the correct box.\n            for(let i = 2; i <= k; i++) {\n                if(i % 2 === 0) {\n                    red += (i * i);\n                } else {\n                    yellow += (i * i);\n                }\n            }\n            //Return the difference.\n            return red - yellow;\n        }`,\n        code: function appleBoxes(k) {\n            //We know the first yellow box will have 1 apple.\n            let yellow = 1;\n            let red = 0;\n            //For each box starting with the second, add the total to the correct box.\n            for(let i = 2; i <= k; i++) {\n                if(i % 2 === 0) {\n                    red += (i * i);\n                } else {\n                    yellow += (i * i);\n                }\n            }\n            //Return the difference.\n            return red - yellow;\n        },\n        arguments: {\n            descriptions: [\n                {\n                    text: \"Positive Integer\",\n                    type: \"Number\"\n                }\n            ]\n        }\n    },\n    areEquallyStrong: {\n        name: 'areEquallyStrong',\n        instructions: `Call two arms equally strong if the heaviest weights they each are able to lift are equal.\n\n        Call two people equally strong if their strongest arms are equally strong (the strongest arm can be both the right and the left), and so are their weakest arms.\n        \n        Given your and your friend's arms' lifting capabilities find out if you two are equally strong.`,\n        codeOutput: \n        `function areEquallyStrong(yourLeft, yourRight, friendsLeft, friendsRight) {\n            return yourLeft + yourRight === friendsLeft + friendsRight &&\n            (yourLeft === friendsLeft || yourRight === friendsRight || yourLeft === friendsRight || yourRight === friendsLeft);\n        }`,\n        code: function areEquallyStrong(yourLeft, yourRight, friendsLeft, friendsRight) {\n            return yourLeft + yourRight === friendsLeft + friendsRight &&\n            (yourLeft === friendsLeft || yourRight === friendsRight || yourLeft === friendsRight || yourRight === friendsLeft);\n        },\n        arguments: {\n            descriptions: [\n                {\n                    text: \"Non-Negative Number (Left Arm)\",\n                    type: \"Number\"\n                },\n                {\n                    text: \"Non-Negative Number (Right Arm)\",\n                    type: \"Number\"\n                },\n                {\n                    text: \"Non-Negative Number (Friend's Left Arm)\",\n                    type: \"Number\"\n                },\n                {\n                    text: \"Non-Negative Number (Friend's Right Arm)\",\n                    type: \"Number\"\n                }\n            ]\n        }\n    },\n    areIsomorphic: {\n        name: 'areIsomorphic',\n        instructions: `Two two-dimensional arrays are isomorphic if they have the same number of rows and each pair of respective rows contains the same number of elements.\n\n        Given two two-dimensional arrays, check if they are isomorphic.`,\n        codeOutput: \n        `function areIsomorphic(array1, array2) {\n            //First, check that the number of rows are the same, then iterate over each array in the first and match the length to the corresponding length of the one in array2 (using every method)\n            return array1.length === array2.length && array1.every((array, index) => array.length === array2[index].length);\n        }`,\n        code: function areIsomorphic(array1, array2) {\n            //First, check that the number of rows are the same, then iterate over each array in the first and match the length to the corresponding length of the one in array2 (using every method)\n            return array1.length === array2.length && array1.every((array, index) => array.length === array2[index].length);\n        },\n        arguments: {\n            descriptions: [\n                {\n                    text: \"Two-Dimensional Array (Without Outer Brackets []; In Form Of [1],[1,2]...)\",\n                    type: \"StringArray\"\n                },\n                {\n                    text: \"Two-Dimensional Array (Without Outer Brackets []; In Form Of [1],[1,2]...)\",\n                    type: \"StringArray\"\n                }\n            ]\n        }\n    },\n    areSimilar: {\n        name: 'areSimilar',\n        instructions: `Two arrays are called similar if one can be obtained from another by swapping at most one pair of elements in one of the arrays.\n\n        Given two arrays a and b, check whether they are similar.`,\n        codeOutput: \n        `function areSimilar(a, b) {\n            //Placeholder elements for swapping if needed\n            let firstElement = null;\n            let secondElement = null;\n            \n            //Identify first two unlike elements(will be swapped)\n            a.forEach((element, index) => {\n                if(element !== b[index]) {\n                    firstElement === null ? firstElement = index : secondElement === null ? secondElement = index : null;\n                }\n            });\n            \n            //If there are two unlike elements, swap them.\n            if(firstElement !== null && secondElement !== null) {\n                [a[firstElement], a[secondElement]] = [a[secondElement], a[firstElement]];\n            }\n            \n            //Assume the arrays are equal.\n            let isEqual = true;\n            \n            //See if any elements are not the same.\n            a.forEach((element, index) => {\n                if(element !== b[index]) {\n                    isEqual = false;\n                }\n            });\n            \n            //Return true or false depending on if arrays are the same now.\n            if(isEqual) return true;\n            \n            return false;\n        }`,\n        code: function areSimilar(a, b) {\n            //Placeholder elements for swapping if needed\n            let firstElement = null;\n            let secondElement = null;\n            \n            //Identify first two unlike elements(will be swapped)\n            a.forEach((element, index) => {\n                if(element !== b[index]) {\n                    //Refactor the following line in order to prevent error in this environment.\n                    //firstElement === null ? firstElement = index : secondElement === null ? secondElement = index : null;\n                    if(firstElement === null) {\n                        firstElement = index;\n                    } else if(secondElement === null) {\n                        secondElement = index;\n                    } \n                }\n            });\n            \n            //If there are two unlike elements, swap them.\n            if(firstElement !== null && secondElement !== null) {\n                [a[firstElement], a[secondElement]] = [a[secondElement], a[firstElement]];\n            }\n            \n            //Assume the arrays are equal.\n            let isEqual = true;\n            \n            //See if any elements are not the same.\n            a.forEach((element, index) => {\n                if(element !== b[index]) {\n                    isEqual = false;\n                }\n            });\n            \n            //Return true or false depending on if arrays are the same now.\n            if(isEqual) return true;\n            \n            return false;\n        },\n        arguments: {\n            descriptions: [\n                {\n                    text: \"Array of Integers (No Brackets [])\",\n                    type: \"NumberArray\"\n                },\n                {\n                    text: \"Array of Integers (Same Length As First)\",\n                    type: \"NumberArray\"\n                }\n            ]\n        }\n    },\n    areSimilar2: {\n        name: 'areSimilar2',\n        instructions: `Two arrays are called similar if one can be obtained from another by swapping at most one pair of elements in one of the arrays.\n\n        Given two arrays a and b, check whether they are similar.`,\n        codeOutput: \n        `function areSimilar2(a, b) {\n            //Helper function to see if arrays are equal.\n            const arrayCheck = (arr1, arr2) => {\n                for(let i = 0; i < arr1.length; i++) {\n                    if(arr1[i] !== arr2[i]) return false;\n                }\n                return true;\n            };\n            \n            //Go through each element in array a, and compare to the current element of array b.\n            for(let i = 0; i < a.length; i++) {\n                //Once we find an unequal value, traverse through both arrays after this point simultaneously to find a spot where the values are equal and in opposite positions, then swap.\n                if(a[i] !== b[i]) {\n                    for(let j = i + 1; j < b.length; j++) {\n                        if(a[i] === b[j] && b[i] === a[j]) {\n                            [b[i], b[j]] = [b[j], b[i]];\n                            //Run an array check now to ensure only one swap is done.\n                            return arrayCheck(a, b);\n                        }\n                    }\n                }\n            }\n            \n            return arrayCheck(a, b);\n        }`,\n        code: function areSimilar2(a, b) {\n            //Helper function to see if arrays are equal.\n            const arrayCheck = (arr1, arr2) => {\n                for(let i = 0; i < arr1.length; i++) {\n                    if(arr1[i] !== arr2[i]) return false;\n                }\n                return true;\n            };\n            \n            //Go through each element in array a, and compare to the current element of array b.\n            for(let i = 0; i < a.length; i++) {\n                //Once we find an unequal value, traverse through both arrays after this point simultaneously to find a spot where the values are equal and in opposite positions, then swap.\n                if(a[i] !== b[i]) {\n                    for(let j = i + 1; j < b.length; j++) {\n                        if(a[i] === b[j] && b[i] === a[j]) {\n                            [b[i], b[j]] = [b[j], b[i]];\n                            //Run an array check now to ensure only one swap is done.\n                            return arrayCheck(a, b);\n                        }\n                    }\n                }\n            }\n            \n            return arrayCheck(a, b);\n        },\n        arguments: {\n            descriptions: [\n                {\n                    text: \"Array of Integers (No Brackets [])\",\n                    type: \"NumberArray\"\n                },\n                {\n                    text: \"Array of Integers (Same Length As First)\",\n                    type: \"NumberArray\"\n                }\n            ]\n        }\n    },\n    arithmeticExpression: {\n        name: 'arithmeticExpression',\n        instructions: `Consider an arithmetic expression of the form a#b=c. Check whether it is possible to replace # with one of the four signs: +, -, * or / to obtain a correct expression.`,\n        codeOutput: \n        `function arithmeticExpression(a, b, c) {\n            return a + b === c ? \n            true : \n            a - b === c ? \n            true : \n            a * b === c ? \n            true : \n            a / b === c ? \n            true : \n            false;\n        }`,\n        code: function arithmeticExpression(a, b, c) {\n            return a + b === c ? \n            true : \n            a - b === c ? \n            true : \n            a * b === c ? \n            true : \n            a / b === c ? \n            true : \n            false;\n        },\n        arguments: {\n            descriptions: [\n                {\n                    text: \"Number to Represent 'a'\",\n                    type: \"Number\"\n                },\n                {\n                    text: \"Number to Represent 'b'\",\n                    type: \"Number\"\n                },\n                {\n                    text: \"Number to Represent 'c'\",\n                    type: \"Number\"\n                }\n            ]\n        }\n    },\n    arrayChange: {\n        name: 'arrayChange',\n        instructions: `You are given an array of integers. On each move you are allowed to increase exactly one of its element by one. Find the minimal number of moves required to obtain a strictly increasing sequence from the input.`,\n        codeOutput: \n        `function arrayChange(inputArray) {\n            let totalCount = 0;\n            //Start with the beginning of the array.\n            let currentVal = inputArray[0];\n            \n            for(let i = 1; i < inputArray.length; i++) {\n                //Go through each element, compare to last element, and increment if needed (include in the total count)\n                while(inputArray[i] <= currentVal) {\n                    inputArray[i] = inputArray[i] + 1;\n                    totalCount++;\n                }\n                \n                //Store this new element as the one to compare to next.\n                currentVal = inputArray[i];\n            }\n            \n            //Return total number of increments.\n            return totalCount;\n        }`,\n        code: function arrayChange(inputArray) {\n            let totalCount = 0;\n            //Start with the beginning of the array.\n            let currentVal = inputArray[0];\n            \n            for(let i = 1; i < inputArray.length; i++) {\n                //Go through each element, compare to last element, and increment if needed (include in the total count)\n                while(inputArray[i] <= currentVal) {\n                    inputArray[i] = inputArray[i] + 1;\n                    totalCount++;\n                }\n                \n                //Store this new element as the one to compare to next.\n                currentVal = inputArray[i];\n            }\n            \n            //Return total number of increments.\n            return totalCount;\n        },\n        arguments: {\n            descriptions: [\n                {\n                    text: \"Array of Integers (Without Brackets [])\",\n                    type: \"NumberArray\"\n                }\n            ]\n        }\n    },\n    concatenateArrays: {\n        name: 'concatenateArrays',\n        instructions: `Given two arrays of integers a and b, obtain the array formed by the elements of a followed by the elements of b.`,\n        codeOutput: \n        `function concatenateArrays(a, b) {\n            return a.concat(...b);\n        }`,\n        code: function concatenateArrays(a, b) {\n            return a.concat(...b);\n        },\n        arguments: {\n            descriptions: [\n                {\n                    text: \"Array of Integers (Without Brackets [])\",\n                    type: \"NumberArray\"\n                },\n                {\n                    text: \"Array of Integers (Without Brackets [])\",\n                    type: \"NumberArray\"\n                }\n            ]\n        }\n    },\n    arrayConversion: {\n        name: 'arrayConversion',\n        instructions: `Given an array of 2k integers (for some integer k), perform the following operations until the array contains only one element:\n\n        On the 1st, 3rd, 5th, etc. iterations (1-based) replace each pair of consecutive elements with their sum;\n        On the 2nd, 4th, 6th, etc. iterations replace each pair of consecutive elements with their product.\n        After the algorithm has finished, there will be a single element left in the array. Return that element.`,\n        codeOutput: \n        `function arrayConversion(inputArray) {\n            //Keep track of the 'current' ouput array, which starts as the input.\n            let output = inputArray;\n            //Keep track of whether values are being added nor not.\n            let add = true;\n            while(output.length > 1) {\n                //Build a new array.\n                let thisArray = [];\n                //For each element, decide whether to add or multiply the next two values.\n                for(let i = 0; i < output.length; i += 2) {\n                    if(add) {\n                        thisArray.push(output[i] + output[i + 1]);\n                    } else {\n                        thisArray.push(output[i] * output[i + 1]);\n                    }\n                }\n                //Toggle add/multiply and reset array.\n                add = !add;\n                output = thisArray;\n            }\n            //Return the first/only array value.\n            return output[0];\n        }`,\n        code: function arrayConversion(inputArray) {\n            //Keep track of the 'current' ouput array, which starts as the input.\n            let output = inputArray;\n            //Keep track of whether values are being added nor not.\n            let add = true;\n            while(output.length > 1) {\n                //Build a new array.\n                let thisArray = [];\n                //For each element, decide whether to add or multiply the next two values.\n                for(let i = 0; i < output.length; i += 2) {\n                    if(add) {\n                        thisArray.push(output[i] + output[i + 1]);\n                    } else {\n                        thisArray.push(output[i] * output[i + 1]);\n                    }\n                }\n                //Toggle add/multiply and reset array.\n                add = !add;\n                output = thisArray;\n            }\n            //Return the first/only array value.\n            return output[0];\n        },\n        arguments: {\n            descriptions: [\n                {\n                    text: \"Array of Integers With 2^n Number of Elements (No Brackets [])\",\n                    type: \"NumberArray\"\n                }\n            ]\n        }\n    },\n    arrayMaximalAdjacentDifference: {\n        name: 'arrayMaximalAdjacentDifference',\n        instructions: `Given an array of integers, find the maximal absolute difference between any two of its adjacent elements.`,\n        codeOutput: \n        `function arrayMaximalAdjacentDifference(inputArray) {\n            let largestDifference = 0;\n            \n            //For every element, get the absolute value of the difference between it and its adjacent element.\n            for(let i = 0; i < inputArray.length - 1; i++) {\n                let thisDifference = Math.abs(inputArray[i + 1] - inputArray[i]);\n                if(thisDifference > largestDifference) largestDifference = thisDifference;\n            }\n            \n            //Return the largest difference.\n            return largestDifference;\n        }`,\n        code: function arrayMaximalAdjacentDifference(inputArray) {\n            let largestDifference = 0;\n            \n            //For every element, get the absolute value of the difference between it and its adjacent element.\n            for(let i = 0; i < inputArray.length - 1; i++) {\n                let thisDifference = Math.abs(inputArray[i + 1] - inputArray[i]);\n                if(thisDifference > largestDifference) largestDifference = thisDifference;\n            }\n            \n            //Return the largest difference.\n            return largestDifference;\n        },\n        arguments: {\n            descriptions: [\n                {\n                    text: \"Array of Integers (No Brackets [])\",\n                    type: \"NumberArray\"\n                }\n            ]\n        }\n    },\n    arrayPacking: {\n        name: 'arrayPacking',\n        instructions: `You are given an array of up to four non-negative integers, each less than 256.\n\n        Your task is to pack these integers into one number M in the following way:\n        \n        The first element of the array occupies the first 8 bits of M;\n        The second element occupies next 8 bits, and so on.\n        Return the obtained integer M.\n        \n        Note: the phrase \"first bits of M\" refers to the least significant bits of M - the right-most bits of an integer. For further clarification see the following example.`,\n        codeOutput: \n        `function arrayPacking(a) {\n            //Create binary representation of this number as an array, reverse the order, and join together.\n            let binary = a.map(number => {\n                let thisBinary = number.toString(2);\n                while(thisBinary.length < 8) {\n                    thisBinary = \"0\" + thisBinary;\n                }\n                return thisBinary;\n            });\n            let binaryJoin = binary.reverse().join(\"\");\n            //Sum up the total by going through each character (from the right), and adding the correct power of 2 to the total.\n            let total = 0;\n            for(let i = 0; i < binaryJoin.length; i++) {\n                if (binaryJoin[binaryJoin.length - 1 - i] === \"1\") total += (2 ** i);\n            }\n            return total;\n        }`,\n        code: function arrayPacking(a) {\n            //Create binary representation of this number as an array, reverse the order, and join together.\n            let binary = a.map(number => {\n                let thisBinary = number.toString(2);\n                while(thisBinary.length < 8) {\n                    thisBinary = \"0\" + thisBinary;\n                }\n                return thisBinary;\n            });\n            let binaryJoin = binary.reverse().join(\"\");\n            //Sum up the total by going through each character (from the right), and adding the correct power of 2 to the total.\n            let total = 0;\n            for(let i = 0; i < binaryJoin.length; i++) {\n                if (binaryJoin[binaryJoin.length - 1 - i] === \"1\") total += (2 ** i);\n            }\n            return total;\n        },\n        arguments: {\n            descriptions: [\n                {\n                    text: \"Array (4 Elements Max) of Non-Negative Integers (< 256)\",\n                    type: \"NumberArray\"\n                }\n            ]\n        }\n    },\n    arrayPairSum: {\n        name: `arrayPairSum`,\n        instructions: `Given an integer array nums of 2n integers, group these integers into n pairs (a1, b1), (a2, b2), ..., (an, bn) such that the sum of min(ai, bi) for all i is maximized. Return the maximized sum.`,\n        codeOutput: \n        `var arrayPairSum = function(nums) {\n            //Sort the numbers from least to greatest\n            nums.sort((a, b) => a - b);\n            \n            //Store the sum.\n            let sum = 0;\n            \n            //Since these numbers are grouped by being sorted, add every other number.\n            for(let i = 0; i < nums.length; i += 2) {\n                sum += nums[i];\n            }\n            \n            return sum;\n        };`,\n        code: function arrayPairSum(nums) {\n            //Sort the numbers from least to greatest\n            nums.sort((a, b) => a - b);\n            \n            //Store the sum.\n            let sum = 0;\n            \n            //Since these numbers are grouped by being sorted, add every other number.\n            for(let i = 0; i < nums.length; i += 2) {\n                sum += nums[i];\n            }\n            \n            return sum;\n        },\n        arguments: {\n            descriptions: [\n                {\n                    text: \"Array of Integers with Even Length (e.g 5,3,9,1,0,2)\",\n                    type: \"NumberArray\"\n                }\n            ]\n        }\n    },\n    arrayPreviousLess: {\n        name: 'arrayPreviousLess',\n        instructions: `Given array of integers, for each position i, search among the previous positions for the last (from the left) position that contains a smaller value. Store this value at position i in the answer. If no such value can be found, store -1 instead.`,\n        codeOutput: \n        `function arrayPreviousLess(items) {\n            let output = items.map((item, index) => {\n                //Traverse backwards in items from this position until we find (or not find) a value less than the current element.\n                let thisElement = -1;\n                //If we find one, replace -1 with that value.\n                for(let i = index - 1; i >= 0; i--) {\n                    if(items[i] < item) {\n                        thisElement = items[i];\n                        break;\n                    }\n                }\n                return thisElement;\n            }); \n            return output;\n        }`,\n        code: function arrayPreviousLess(items) {\n            let output = items.map((item, index) => {\n                //Traverse backwards in items from this position until we find (or not find) a value less than the current element.\n                let thisElement = -1;\n                //If we find one, replace -1 with that value.\n                for(let i = index - 1; i >= 0; i--) {\n                    if(items[i] < item) {\n                        thisElement = items[i];\n                        break;\n                    }\n                }\n                return thisElement;\n            }); \n            return output;\n        },\n        arguments: {\n            descriptions: [\n                {\n                    text: \"Array of Integers (No Brackets [])\",\n                    type: \"NumberArray\"\n                }\n            ]\n        }\n    },\n    arrayReplace: {\n        name: 'arrayReplace',\n        instructions: `Given an array of integers, replace all the occurrences of elemToReplace with substitutionElem.`,\n        codeOutput: \n        `function arrayReplace(inputArray, elemToReplace, substitutionElem) {\n            //Loop through every element. Using map, return the new element if the element matches the one to be replaced. Otherwise, return the same.\n            let output = inputArray.map(element => {\n                if(element === elemToReplace) {\n                    return substitutionElem;\n                } else {\n                    return element;\n                }\n            });\n            return output; \n        }`,\n        code: function arrayReplace(inputArray, elemToReplace, substitutionElem) {\n            //Loop through every element. Using map, return the new element if the element matches the one to be replaced. Otherwise, return the same.\n            let output = inputArray.map(element => {\n                if(element === elemToReplace) {\n                    return substitutionElem;\n                } else {\n                    return element;\n                }\n            });\n            return output; \n        },\n        arguments: {\n            descriptions: [\n                {\n                    text: \"Array of Integers (No Brackets [])\",\n                    type: \"NumberArray\"\n                },\n                {\n                    text: \"Number to Replace\",\n                    type: \"Number\"\n                },\n                {\n                    text: \"Number to Replace With\",\n                    type: \"Number\"\n                }\n            ]\n        }\n    },\n    avoidObstacles: {\n        name: 'avoidObstacles',\n        instructions: `You are given an array of integers representing coordinates of obstacles situated on a straight line.\n\n        Assume that you are jumping from the point with coordinate 0 to the right. You are allowed only to make jumps of the same length represented by some integer.\n        \n        Find the minimal length of the jump enough to avoid all the obstacles.`,\n        codeOutput: \n        `function avoidObstacles(inputArray) {\n            let maxAmount = Math.max(...inputArray);\n            for(let i = 2; i < inputArray.length + i - 1; i++) {\n                \n                let isValid = true;\n                \n                for(let j = 0; j < maxAmount + i; j += i) {\n                    if(inputArray.some(element => element === j)) {\n                        isValid = false;\n                    }\n                }\n                \n                if(isValid) return i;\n            }\n            \n            return null;\n        }`,\n        code: function avoidObstacles(inputArray) {\n            let maxAmount = Math.max(...inputArray);\n            for(let i = 2; i < inputArray.length + i - 1; i++) {\n                \n                let isValid = true;\n                \n                for(let j = 0; j < maxAmount + i; j += i) {\n                    if(inputArray.some(element => element === j)) {\n                        isValid = false;\n                    }\n                }\n                \n                if(isValid) return i;\n            }\n            \n            return null;\n        },\n        arguments: {\n            descriptions: [\n                {\n                    text: \"Array of Integers (No Brackets [])\",\n                    type: \"NumberArray\"\n                }\n            ]\n        }\n    },\n    beautifulText: {\n        name: 'beautifulText',\n        instructions: `Consider a string containing only letters and whitespaces. It is allowed to replace some (possibly, none) whitespaces with newline symbols to obtain a multiline text. Call a multiline text beautiful if and only if each of its lines (i.e. substrings delimited by a newline character) contains an equal number of characters (only letters and whitespaces should be taken into account when counting the total while newline characters shouldn't). Call the length of the line the text width.\n\n        Given a string and some integers l and r (l ≤ r), check if it's possible to obtain a beautiful text from the string with a text width that's within the range [l, r].`,\n        codeOutput: \n        `function beautifulText(inputString, l, r) {\n            //Loop through all ranges within l -> r.\n            for(let i = l; i <= r; i++) {\n                //See if all of these indexes within this range of characters has a space at the end\n                //Keep track of the offset(number of times to skip over spaces) and the current index, based on the current length.\n                let offset = 0;\n                let currentIndex = i;\n                //Check if all indexes within this size range are spaces.\n                while(inputString[currentIndex + offset] === \" \") {\n                    //Add this iteration to the offset\n                    offset++;\n                    //If we have reached the last possible space, make sure this splits the string into 3 strings of the same length.\n                    if(currentIndex + offset + i >= inputString.length - 1) {\n                        if((inputString.length - offset) / (offset + 1) === i) return true;\n                    }\n                    //Move on to next index within this range.\n                    currentIndex += i;\n                }\n            }\n            \n            return false;\n        }`,\n        code: function beautifulText(inputString, l, r) {\n            //Loop through all ranges within l -> r.\n            for(let i = l; i <= r; i++) {\n                //See if all of these indexes within this range of characters has a space at the end\n                //Keep track of the offset(number of times to skip over spaces) and the current index, based on the current length.\n                let offset = 0;\n                let currentIndex = i;\n                //Check if all indexes within this size range are spaces.\n                while(inputString[currentIndex + offset] === \" \") {\n                    //Add this iteration to the offset\n                    offset++;\n                    //If we have reached the last possible space, make sure this splits the string into 3 strings of the same length.\n                    if(currentIndex + offset + i >= inputString.length - 1) {\n                        if((inputString.length - offset) / (offset + 1) === i) return true;\n                    }\n                    //Move on to next index within this range.\n                    currentIndex += i;\n                }\n            }\n            \n            return false;\n        },\n        arguments: {\n            descriptions: [\n                {\n                    text: \"String of Text (Letters and Whitespace; Quotes Not Needed)\",\n                    type: \"String\"\n                },\n                {\n                    text: \"Positive Integer (Left Range)\",\n                    type: \"Number\"\n                },\n                {\n                    text: \"Positive Integer (Right Range)\",\n                    type: \"Number\"\n                }\n            ]\n        }\n    },\n    bishopAndPawn: {\n        name: 'bishopAndPawn',\n        instructions: `Given the positions of a white bishop and a black pawn on the standard chess board, determine whether the bishop can capture the pawn in one move.\n\n        The bishop has no restrictions in distance for each move, but is limited to diagonal movement. Check out the example below to see how it can move:`,\n        codeOutput: \n        `function bishopAndPawn(bishop, pawn) {\n            let currentSquare = bishop;\n            let currentLetter = currentSquare[0];\n            let currentNumber = Number(currentSquare[1]);\n            \n            //Check up-right\n            while(currentLetter < \"h\" && currentNumber < 8) {\n                currentLetter = String.fromCharCode(currentLetter.charCodeAt(0) + 1);\n                currentNumber++;\n                currentSquare = currentLetter + currentNumber;\n                if(currentSquare === pawn) return true;\n            }\n            \n            currentSquare = bishop;\n            currentLetter = currentSquare[0];\n            currentNumber = Number(currentSquare[1]);\n            \n            //Check down-right\n            while(currentLetter < \"h\" && currentNumber > 1) {\n                currentLetter = String.fromCharCode(currentLetter.charCodeAt(0) + 1);\n                currentNumber--;\n                currentSquare = currentLetter + currentNumber;\n                if(currentSquare === pawn) return true;\n            }\n            \n            currentSquare = bishop;\n            currentLetter = currentSquare[0];\n            currentNumber = Number(currentSquare[1]);\n            \n            //Check down-left\n            while(currentLetter > \"a\" && currentNumber > 1) {\n                currentLetter = String.fromCharCode(currentLetter.charCodeAt(0) - 1);\n                currentNumber--;\n                currentSquare = currentLetter + currentNumber;\n                if(currentSquare === pawn) return true;\n            }\n            \n            currentSquare = bishop;\n            currentLetter = currentSquare[0];\n            currentNumber = Number(currentSquare[1]);\n            \n            //Check up-left\n            while(currentLetter > \"a\" && currentNumber < 8) {\n                currentLetter = String.fromCharCode(currentLetter.charCodeAt(0) - 1);\n                currentNumber++;\n                currentSquare = currentLetter + currentNumber;\n                if(currentSquare === pawn) return true;\n            }\n            \n            return false;\n        }`,\n        code: function bishopAndPawn(bishop, pawn) {\n            let currentSquare = bishop;\n            let currentLetter = currentSquare[0];\n            let currentNumber = Number(currentSquare[1]);\n            \n            //Check up-right\n            while(currentLetter < \"h\" && currentNumber < 8) {\n                currentLetter = String.fromCharCode(currentLetter.charCodeAt(0) + 1);\n                currentNumber++;\n                currentSquare = currentLetter + currentNumber;\n                if(currentSquare === pawn) return true;\n            }\n            \n            currentSquare = bishop;\n            currentLetter = currentSquare[0];\n            currentNumber = Number(currentSquare[1]);\n            \n            //Check down-right\n            while(currentLetter < \"h\" && currentNumber > 1) {\n                currentLetter = String.fromCharCode(currentLetter.charCodeAt(0) + 1);\n                currentNumber--;\n                currentSquare = currentLetter + currentNumber;\n                if(currentSquare === pawn) return true;\n            }\n            \n            currentSquare = bishop;\n            currentLetter = currentSquare[0];\n            currentNumber = Number(currentSquare[1]);\n            \n            //Check down-left\n            while(currentLetter > \"a\" && currentNumber > 1) {\n                currentLetter = String.fromCharCode(currentLetter.charCodeAt(0) - 1);\n                currentNumber--;\n                currentSquare = currentLetter + currentNumber;\n                if(currentSquare === pawn) return true;\n            }\n            \n            currentSquare = bishop;\n            currentLetter = currentSquare[0];\n            currentNumber = Number(currentSquare[1]);\n            \n            //Check up-left\n            while(currentLetter > \"a\" && currentNumber < 8) {\n                currentLetter = String.fromCharCode(currentLetter.charCodeAt(0) - 1);\n                currentNumber++;\n                currentSquare = currentLetter + currentNumber;\n                if(currentSquare === pawn) return true;\n            }\n            \n            return false;\n        },\n        arguments: {\n            descriptions: [\n                {\n                    text: \"Bishop Location (In Form Of [a-h][1-8])\",\n                    type: \"String\"\n                },\n                {\n                    text: \"Pawn Location (In Form Of [a-h][1-8])\",\n                    type: \"String\"\n                }\n            ]\n        }\n    },\n    bishopDiagonal: {\n        name: 'bishopDiagonal',\n        instructions: `In the Land Of Chess, bishops don't really like each other. In fact, when two bishops happen to stand on the same diagonal, they immediately rush towards the opposite ends of that same diagonal.\n\n        Given the initial positions (in chess notation) of two bishops, bishop1 and bishop2, calculate their future positions. Keep in mind that bishops won't move unless they see each other along the same diagonal.`,\n        codeOutput: \n        `function bishopDiagonal(bishop1, bishop2) {\n            //See if bishops lie on different diagonals. If so, return initial values.\n            if(!(Math.abs(bishop1.charCodeAt(0) - bishop2.charCodeAt(0)) === Math.abs(bishop1.charCodeAt(1) - bishop2.charCodeAt(1)))) return [bishop1, bishop2].sort();\n            \n            //Otherwise, find which directions each bishop will travel.\n        \n            //Helper function to move Bishops\n            const moveBishops = (bishopInput, letter, number) => {\n                //Taking the bishop's starting location, continue to move in the correct diagonal direction until it reaches bounds.\n                let bishop = bishopInput;\n                while((bishop[0] > \"a\" && bishop[0]) < \"h\" &&\n                (bishop[1] > 1 && bishop[1] < 8)) {\n                    console.log(\"In a loop\")\n                    //Update letter\n                    bishop = letter === \"add\" ? \n                    String.fromCharCode(bishop.charCodeAt(0) + 1) + bishop[1] :\n                    String.fromCharCode(bishop.charCodeAt(0) - 1) + bishop[1];\n                    \n                    //Update number\n                    bishop = number === \"add\" ? \n                    bishop[0] + String(Number(bishop[1]) + 1) :\n                    bishop[0] + String(Number(bishop[1]) - 1);\n                }\n                //Return the updated position.\n                return bishop;\n            };\n            \n            //Move Bishop 1\n            let currentBishop1 = moveBishops(\n                bishop1, \n                bishop1[0] > bishop2[0] ? \"add\" : \"subtract\",\n                bishop1[1] > bishop2[1] ? \"add\" : \"subtract\"\n            );\n            \n            //Move Bishop 2\n            let currentBishop2 = moveBishops(\n                bishop2, \n                bishop2[0] > bishop1[0] ? \"add\" : \"subtract\",\n                bishop2[1] > bishop1[1] ? \"add\" : \"subtract\"\n            );\n            \n            //Return final resting positions.\n            return [currentBishop1, currentBishop2].sort();\n        }`,\n        code: function bishopDiagonal(bishop1, bishop2) {\n            //See if bishops lie on different diagonals. If so, return initial values.\n            if(!(Math.abs(bishop1.charCodeAt(0) - bishop2.charCodeAt(0)) === Math.abs(bishop1.charCodeAt(1) - bishop2.charCodeAt(1)))) return [bishop1, bishop2].sort();\n            \n            //Otherwise, find which directions each bishop will travel.\n        \n            //Helper function to move Bishops\n            const moveBishops = (bishopInput, letter, number) => {\n                //Taking the bishop's starting location, continue to move in the correct diagonal direction until it reaches bounds.\n                let bishop = bishopInput;\n                while((bishop[0] > \"a\" && bishop[0]) < \"h\" &&\n                (bishop[1] > 1 && bishop[1] < 8)) {\n                    console.log(\"In a loop\")\n                    //Update letter\n                    bishop = letter === \"add\" ? \n                    String.fromCharCode(bishop.charCodeAt(0) + 1) + bishop[1] :\n                    String.fromCharCode(bishop.charCodeAt(0) - 1) + bishop[1];\n                    \n                    //Update number\n                    bishop = number === \"add\" ? \n                    bishop[0] + String(Number(bishop[1]) + 1) :\n                    bishop[0] + String(Number(bishop[1]) - 1);\n                }\n                //Return the updated position.\n                return bishop;\n            };\n            \n            //Move Bishop 1\n            let currentBishop1 = moveBishops(\n                bishop1, \n                bishop1[0] > bishop2[0] ? \"add\" : \"subtract\",\n                bishop1[1] > bishop2[1] ? \"add\" : \"subtract\"\n            );\n            \n            //Move Bishop 2\n            let currentBishop2 = moveBishops(\n                bishop2, \n                bishop2[0] > bishop1[0] ? \"add\" : \"subtract\",\n                bishop2[1] > bishop1[1] ? \"add\" : \"subtract\"\n            );\n            \n            //Return final resting positions.\n            return [currentBishop1, currentBishop2].sort();\n        },\n        arguments: {\n            descriptions: [\n                {\n                    text: \"First Bishop Location (In Form Of [a-h][1-8])\",\n                    type: \"String\"\n                },\n                {\n                    text: \"Second Bishop Location (In Form Of [a-h][1-8])\",\n                    type: \"String\"\n                }\n            ]\n        }\n    },\n    boxBlur: {\n        name: 'boxBlur',\n        instructions: `Last night you partied a little too hard. Now there's a black and white photo of you that's about to go viral! You can't let this ruin your reputation, so you want to apply the box blur algorithm to the photo to hide its content.\n\n        The pixels in the input image are represented as integers. The algorithm distorts the input image in the following way: Every pixel x in the output image has a value equal to the average value of the pixel values from the 3 × 3 square that has its center at x, including x itself. All the pixels on the border of x are then removed.\n        \n        Return the blurred image as an integer, with the fractions rounded down.`,\n        codeOutput: \n        `function boxBlur(image) {\n            //Create output array\n            let output = [];\n            //Loop through all sets of 3 rows\n            for(let i = 0; i <= image.length - 3; i++) {\n                \n                //Create this 'row' of the output array.\n                let thisRow = [];\n                \n                //Loop through all sets of 3 cols\n                for(let j = 0; j <= image[i].length - 3; j++) {\n                    //Create the total of all 9 elements\n                    let total = 0;\n                    //Isolate the elements in this square and add them together  \n                    for(let i_prime = i; i_prime <= i + 2; i_prime++) {\n                        //Count the squares.\n                        for(let j_prime = j; j_prime <= j + 2; j_prime++) {\n                            total += image[i_prime][j_prime];\n                        }\n                    }\n                    //Push this row to the array.\n                    thisRow.push(Math.floor(total / 9));\n                }\n                \n                //Add this completed row to the output square.\n                output.push(thisRow);\n            }\n            //Return the completed output\n            return output;\n        }`,\n        code: function boxBlur(image) {\n            //Create output array\n            let output = [];\n            //Loop through all sets of 3 rows\n            for(let i = 0; i <= image.length - 3; i++) {\n                \n                //Create this 'row' of the output array.\n                let thisRow = [];\n                \n                //Loop through all sets of 3 cols\n                for(let j = 0; j <= image[i].length - 3; j++) {\n                    //Create the total of all 9 elements\n                    let total = 0;\n                    //Isolate the elements in this square and add them together  \n                    for(let i_prime = i; i_prime <= i + 2; i_prime++) {\n                        //Count the squares.\n                        for(let j_prime = j; j_prime <= j + 2; j_prime++) {\n                            total += image[i_prime][j_prime];\n                        }\n                    }\n                    //Push this row to the array.\n                    thisRow.push(Math.floor(total / 9));\n                }\n                \n                //Add this completed row to the output square.\n                output.push(thisRow);\n            }\n            //Return the completed output\n            return output;\n        },\n        arguments: {\n            descriptions: [\n                {\n                    text: \"Array of Integer Arrays (0 - 255) - At Least 3 x 3 (Form of [1,2,3], [1,2,3]... * One Space Between Arrays)\",\n                    type: \"NumberArrayArray\"\n                }\n            ]\n        }\n    },\n    boxesPacking: {\n        name: 'boxesPacking',\n        instructions: `You are given n rectangular boxes, the ith box has the length lengthi, the width widthi and the height heighti. Your task is to check if it is possible to pack all boxes into one so that inside each box there is no more than one another box (which, in turn, can contain at most one another box, and so on). More formally, your task is to check whether there is such sequence of n different numbers pi (1 ≤ pi ≤ n) that for each 1 ≤ i < n the box number pi can be put into the box number pi+1.\n        A box can be put into another box if all sides of the first one are less than the respective ones of the second one. You can rotate each box as you wish, i.e. you can swap its length, width and height if necessary.`,\n        codeOutput: \n        `function boxesPacking(length, width, height) {\n            //Get all boxes with their dimensions.\n            let boxes = [];\n            for(let i = 0; i < arguments[0].length; i++) {\n                //Get all boxes with their dimensions.\n                let box = {\n                    dimensions: [length[i], width[i], height[i]].sort((a, b) => a - b),\n                    sum: length[i] + width[i] + height[i]\n                }\n                boxes.push(box);\n            }\n            \n            //Sort by sums so that the overall box sizes are ordered.\n            boxes.sort((a, b) => (a.sum > b.sum) ? 1 : -1);\n            \n            //Verify that for every box, the box that came before has dimensions that are all smaller.\n            for(let i = 1; i < boxes.length; i++) {\n                //Go through each sorted dimension.\n                for(let j = 0; j < arguments.length; j++) {\n                    //If we find equal or greater values in the previous box's dimensions, return false.\n                    if(!(boxes[i][\"dimensions\"][j] > boxes[i - 1][\"dimensions\"][j])) return false;\n                }\n            }\n            \n            return true;\n        }`,\n        code: function boxesPacking(length, width, height) {\n            //Get all boxes with their dimensions.\n            let boxes = [];\n            for(let i = 0; i < arguments[0].length; i++) {\n                //Get all boxes with their dimensions.\n                let box = {\n                    dimensions: [length[i], width[i], height[i]].sort((a, b) => a - b),\n                    sum: length[i] + width[i] + height[i]\n                }\n                boxes.push(box);\n            }\n            \n            //Sort by sums so that the overall box sizes are ordered.\n            boxes.sort((a, b) => (a.sum > b.sum) ? 1 : -1);\n            \n            //Verify that for every box, the box that came before has dimensions that are all smaller.\n            for(let i = 1; i < boxes.length; i++) {\n                //Go through each sorted dimension.\n                for(let j = 0; j < arguments.length; j++) {\n                    //If we find equal or greater values in the previous box's dimensions, return false.\n                    if(!(boxes[i][\"dimensions\"][j] > boxes[i - 1][\"dimensions\"][j])) return false;\n                }\n            }\n            \n            return true;\n        },\n        arguments: {\n            descriptions: [\n                {\n                    text: \"Length: Array of Positive Integers (No Brackets [])\",\n                    type: \"NumberArray\"\n                },\n                {\n                    text: \"Width: Array of Positive Integers (No Brackets []) - Same Array Length\",\n                    type: \"NumberArray\"\n                },\n                {\n                    text: \"Height: Array of Positive Integers (No Brackets []) - Same Array Length\",\n                    type: \"NumberArray\"\n                }\n            ]\n        }\n    },\n    buildPalindrome: {\n        name: 'buildPalindrome',\n        instructions: `Given a string, find the shortest possible string which can be achieved by adding characters to the end of initial string to make it a palindrome.`,\n        codeOutput: \n        `function buildPalindrome(st) {\n            //Helper function to check palindrome\n            const checkPalindrome = checkString => {\n                //Create an array out of the first and second halves of the string to check, depending on whether it has odd or even number of characters.\n                let firstHalf = checkString.length % 2 === 0 ? \n                                checkString.substring(0, Math.floor(checkString.length / 2)).split(\"\") :\n                                checkString.substring(0, Math.floor(checkString.length / 2) + 1).split(\"\");\n                let secondHalf = checkString.substring(Math.floor(checkString.length / 2)).split(\"\");\n                \n                //See if these two halves are the same. If we encounter different characters, it is not yet a palindrome.\n                while(firstHalf.length && secondHalf.length) {\n                    if(firstHalf.pop() !== secondHalf.shift()) return false;\n                }\n                \n                if(firstHalf.length || firstHalf.length) return false;\n                \n                return true;  \n            };\n            \n            //Keep track of the current word we want to be a palindrome as well as offsets for the beginning and end of the string.\n            \n            let palindrome = st;\n            let startOffset = 0;\n            let endOffset = 0;\n            \n            //Check if this is already a palindrome.\n            //If it is not, start the iterative process of removing the next character (based on start offset) and adding it to its corresponding location at the end of the string(based on the end offset).\n            //At the end of each iteration, update the palindrome word and offsets, and check if it is a palindrome yet.\n            while(!checkPalindrome(palindrome)) {\n                let firstHalf = palindrome.substring(0, palindrome.length - endOffset);\n                let secondHalf = palindrome[palindrome.length - endOffset] ? palindrome.substring(palindrome.length - endOffset) : \"\";\n                \n                let currentCharacter = palindrome[startOffset];\n                \n                palindrome = firstHalf + currentCharacter + secondHalf;\n                startOffset++;\n                endOffset++;\n            }\n            \n            return palindrome;\n        }\n        `,\n        code: function buildPalindrome(st) {\n            //Helper function to check palindrome\n            const checkPalindrome = checkString => {\n                //Create an array out of the first and second halves of the string to check, depending on whether it has odd or even number of characters.\n                let firstHalf = checkString.length % 2 === 0 ? \n                                checkString.substring(0, Math.floor(checkString.length / 2)).split(\"\") :\n                                checkString.substring(0, Math.floor(checkString.length / 2) + 1).split(\"\");\n                let secondHalf = checkString.substring(Math.floor(checkString.length / 2)).split(\"\");\n                \n                //See if these two halves are the same. If we encounter different characters, it is not yet a palindrome.\n                while(firstHalf.length && secondHalf.length) {\n                    if(firstHalf.pop() !== secondHalf.shift()) return false;\n                }\n                \n                if(firstHalf.length || firstHalf.length) return false;\n                \n                return true;  \n            };\n            \n            //Keep track of the current word we want to be a palindrome as well as offsets for the beginning and end of the string.\n            \n            let palindrome = st;\n            let startOffset = 0;\n            let endOffset = 0;\n            \n            //Check if this is already a palindrome.\n            //If it is not, start the iterative process of removing the next character (based on start offset) and adding it to its corresponding location at the end of the string(based on the end offset).\n            //At the end of each iteration, update the palindrome word and offsets, and check if it is a palindrome yet.\n            while(!checkPalindrome(palindrome)) {\n                let firstHalf = palindrome.substring(0, palindrome.length - endOffset);\n                let secondHalf = palindrome[palindrome.length - endOffset] ? palindrome.substring(palindrome.length - endOffset) : \"\";\n                \n                let currentCharacter = palindrome[startOffset];\n                \n                palindrome = firstHalf + currentCharacter + secondHalf;\n                startOffset++;\n                endOffset++;\n            }\n            \n            return palindrome;\n        }\n        ,\n        arguments: {\n            descriptions: [\n                {\n                    text: \"Input String\",\n                    type: \"String\"\n                }\n            ]\n        }\n    },\n    calPoints: {\n        name: `calPoints`,\n        instructions: `You are keeping score for a baseball game with strange rules. The game consists of several rounds, where the scores of past rounds may affect future rounds' scores.\n\n        At the beginning of the game, you start with an empty record. You are given a list of strings ops, where ops[i] is the ith operation you must apply to the record and is one of the following:\n        \n        An integer x - Record a new score of x.\n        \"+\" - Record a new score that is the sum of the previous two scores. It is guaranteed there will always be two previous scores.\n        \"D\" - Record a new score that is double the previous score. It is guaranteed there will always be a previous score.\n        \"C\" - Invalidate the previous score, removing it from the record. It is guaranteed there will always be a previous score.\n        Return the sum of all the scores on the record.`,\n        codeOutput: \n        `var calPoints = function(ops) {\n            let record = [];\n            \n            ops.forEach(op => {\n                if(parseInt(op)) {\n                    //If this is a number, add new score to record in number form.\n                    record.push(parseInt(op));\n                } else if(op === \"C\") {\n                    //If this is a C, clear the previous score.\n                    record.pop();\n                } else if(op === \"D\") {\n                    //If this is a D, double the last score and add it.\n                    record.push(parseInt(record[record.length - 1] * 2));\n                } else if(op === \"+\") {\n                    //If this is a +, combine the last two scores.\n                    record.push(parseInt(record[record.length - 1] + record[record.length - 2]));\n                }\n            });\n            \n            //Add up the records.    \n            return record.reduce((a, b) => a += b, 0);\n        };`,\n        code: function calPoints(ops) {\n            let record = [];\n            \n            ops.forEach(op => {\n                if(parseInt(op)) {\n                    //If this is a number, add new score to record in number form.\n                    record.push(parseInt(op));\n                } else if(op === \"C\") {\n                    //If this is a C, clear the previous score.\n                    record.pop();\n                } else if(op === \"D\") {\n                    //If this is a D, double the last score and add it.\n                    record.push(parseInt(record[record.length - 1] * 2));\n                } else if(op === \"+\") {\n                    //If this is a +, combine the last two scores.\n                    record.push(parseInt(record[record.length - 1] + record[record.length - 2]));\n                }\n            });\n            \n            //Add up the records.    \n            return record.reduce((a, b) => a += b, 0);\n        },\n        arguments: {\n            descriptions: [\n                {\n                    text: \"Array in format according to instructions (e.g. 5,2,C,D,+)\",\n                    type: \"StringArray\"\n                }\n            ]\n        }\n    },\n    canConstruct: {\n        name: `canConstruct`,\n        instructions: `Given two stings ransomNote and magazine, return true if ransomNote can be constructed from magazine and false otherwise.\n\n        Each letter in magazine can only be used once in ransomNote.`,\n        codeOutput: \n        `var canConstruct = function(ransomNote, magazine) {\n            //Create a character map of each character in magazine to pull characters from.\n            let magazineMap = {};\n            //Convert to string, then create character map.\n            magazine.split(\"\").forEach(letter => {\n                if(magazineMap[letter]) {\n                    magazineMap[letter]++;\n                } else {\n                    magazineMap[letter] = 1;\n                }\n            });\n            \n            //Create array to iteratively pull characters from.\n            let noteArray = ransomNote.split(\"\");\n            //Until the end of the array is reached, see if this letter can be pulled from the magazine map.\n            while(noteArray.length) {\n                let thisLetter = noteArray.pop();\n                if(magazineMap[thisLetter]) {\n                    magazineMap[thisLetter]--;\n                } else {\n                    return false;\n                }\n            }\n            \n            //If we have reached the end of the noteArray, we know magazine can be used to create the note.\n            return true;\n        };`,\n        code: function canConstruct(ransomNote, magazine) {\n            //Create a character map of each character in magazine to pull characters from.\n            let magazineMap = {};\n            //Convert to string, then create character map.\n            magazine.split(\"\").forEach(letter => {\n                if(magazineMap[letter]) {\n                    magazineMap[letter]++;\n                } else {\n                    magazineMap[letter] = 1;\n                }\n            });\n            \n            //Create array to iteratively pull characters from.\n            let noteArray = ransomNote.split(\"\");\n            //Until the end of the array is reached, see if this letter can be pulled from the magazine map.\n            while(noteArray.length) {\n                let thisLetter = noteArray.pop();\n                if(magazineMap[thisLetter]) {\n                    magazineMap[thisLetter]--;\n                } else {\n                    return false;\n                }\n            }\n            \n            //If we have reached the end of the noteArray, we know magazine can be used to create the note.\n            return true;\n        },\n        arguments: {\n            descriptions: [\n                {\n                    text: \"String to represent the ransom note.\",\n                    type: \"String\"\n                },\n                {\n                    text: \"String to represent the magazine text.\",\n                    type: \"String\"\n                }\n            ]\n        }\n    },\n    candles: {\n        name: 'candles',\n        instructions: `When a candle finishes burning it leaves a leftover. makeNew leftovers can be combined to make a new candle, which, when burning down, will in turn leave another leftover.\n\n        You have candlesNumber candles in your possession. What's the total number of candles you can burn, assuming that you create new candles as soon as you have enough leftovers?`,\n        codeOutput: \n        `function candles(candlesNumber, makeNew) {\n            //Start with current number of candles.\n            let currentCandles = candlesNumber;\n            let currentLeftovers = 0;\n            let totalBurned = 0;\n            \n            //Loop as long as there are whole candles to burn.\n            while(currentCandles > 0) {\n                //First, burn these candles.\n                totalBurned += currentCandles;\n                \n                //Next, make these current candles into leftovers.\n                currentLeftovers += currentCandles;\n                currentCandles -= currentCandles;\n                \n                //Finally, group the new candles using as many of the leftovers as possible.\n                currentCandles += Math.floor(currentLeftovers / makeNew);\n                currentLeftovers -= currentCandles * makeNew;\n            }\n            \n            return totalBurned;\n        }`,\n        code: function candles(candlesNumber, makeNew) {\n            //Start with current number of candles.\n            let currentCandles = candlesNumber;\n            let currentLeftovers = 0;\n            let totalBurned = 0;\n            \n            //Loop as long as there are whole candles to burn.\n            while(currentCandles > 0) {\n                //First, burn these candles.\n                totalBurned += currentCandles;\n                \n                //Next, make these current candles into leftovers.\n                currentLeftovers += currentCandles;\n                currentCandles -= currentCandles;\n                \n                //Finally, group the new candles using as many of the leftovers as possible.\n                currentCandles += Math.floor(currentLeftovers / makeNew);\n                currentLeftovers -= currentCandles * makeNew;\n            }\n            \n            return totalBurned;\n        },\n        arguments: {\n            descriptions: [\n                {\n                    text: \"Number of Candles (Positive Integer)\",\n                    type: \"Number\"\n                },\n                {\n                    text: \"Number of Leftovers Used For New Candle (Positive Integer)\",\n                    type: \"Number\"\n                }\n            ]\n        }\n    },\n    canWinNim: {\n        name: `canWinNim`,\n        instructions: `You are playing the following Nim Game with your friend:\n\n        Initially, there is a heap of stones on the table.\n        You and your friend will alternate taking turns, and you go first.\n        On each turn, the person whose turn it is will remove 1 to 3 stones from the heap.\n        The one who removes the last stone is the winner.\n        Given n, the number of stones in the heap, return true if you can win the game assuming both you and your friend play optimally, otherwise return false.`,\n        codeOutput: \n        `var canWinNim = function(n) {\n            //Since the loser will have a disadvantage any time the number of stones is a multiple of 4, return false for all those values.\n            if(n % 4 === 0) return false;\n            return true;\n        }`,\n        code: function canWinNim(n) {\n            //Since the loser will have a disadvantage any time the number of stones is a multiple of 4, return false for all those values.\n            if(n % 4 === 0) return false;\n            return true;\n        },\n        arguments: {\n            descriptions: [\n                {\n                    text: \"Integer to Represent Number of Stones\",\n                    type: \"Number\"\n                }\n            ]\n        }\n    },\n    characterParity: {\n        name: 'characterParity',\n        instructions: `Given a character, check if it represents an odd digit, an even digit or not a digit at all.`,\n        codeOutput: \n        `function characterParity(symbol) {\n            return symbol % 2 ? \"odd\" : isNaN(symbol % 2) ? \"not a digit\" : \"even\";\n        }`,\n        code: function characterParity(symbol) {\n            return symbol % 2 ? \"odd\" : isNaN(symbol % 2) ? \"not a digit\" : \"even\";\n        },\n        arguments: {\n            descriptions: [\n                {\n                    text: \"Single Character Symbol (UTF-8)\",\n                    type: \"String\"\n                }\n            ]\n        }\n    },\n    checkPalindrome: {\n        name: 'checkPalindrome',\n        instructions: `Given a string, check if it is a palindrome`,\n        codeOutput: \n        `function checkPalindrome(inputString) {\n            return inputString.split(\"\").reverse().join(\"\") === inputString;\n        }`,\n        code: function checkPalindrome(inputString) {\n            return inputString.split(\"\").reverse().join(\"\") === inputString;\n        },\n        arguments: {\n            descriptions: [\n                {\n                    text: \"String to Check\",\n                    type: \"String\"\n                }\n            ]\n        }\n    },\n    checkPerfectNumber: {\n        name: `checkPerfectNumber`,\n        instructions: `A perfect number is a positive integer that is equal to the sum of its positive divisors, excluding the number itself. A divisor of an integer x is an integer that can divide x evenly.\n\n        Given an integer n, return true if n is a perfect number, otherwise return false.`,\n        codeOutput: \n        `var checkPerfectNumber = function(num) {\n            let factors = [];\n            \n            //Get all factors of the number (except for number itself)\n            let max = num;\n            let i = 1;\n            do {\n                //See if this is a factor.\n                if(num % i === 0) {\n                    //Make sure longer side is first in set.\n                    if(num / i !== num) {\n                        factors.push(num / i);\n                    }\n                    if(i !== num) {\n                        factors.push(i);\n                    }\n                }\n                //Update max and i.\n                max = Math.ceil(num / i);\n                i++;\n            } while(i < max);\n                \n            console.log(factors);\n            \n            //Return true if the factors add to the number.\n            return num === factors.reduce((a, b) => a += b, 0);  \n        };`,\n        code: function checkPerfectNumber(num) {\n            let factors = [];\n            \n            //Get all factors of the number (except for number itself)\n            let max = num;\n            let i = 1;\n            do {\n                //See if this is a factor.\n                if(num % i === 0) {\n                    //Make sure longer side is first in set.\n                    if(num / i !== num) {\n                        factors.push(num / i);\n                    }\n                    if(i !== num) {\n                        factors.push(i);\n                    }\n                }\n                //Update max and i.\n                max = Math.ceil(num / i);\n                i++;\n            } while(i < max);\n                \n            console.log(factors);\n            \n            //Return true if the factors add to the number.\n            return num === factors.reduce((a, b) => a += b, 0);  \n        },\n        arguments: {\n            descriptions: [\n                {\n                    text: \"Whole Number Integer\",\n                    type: \"Number\"\n                }\n            ]\n        }\n    },\n    chessBishopDream: {\n        name: 'chessBishopDream',\n        instructions: `In ChessLand there is a small but proud chess bishop with a recurring dream. In the dream the bishop finds itself on an n × m chessboard with mirrors along each edge, and it is not a bishop but a ray of light. This ray of light moves only along diagonals (the bishop can't imagine any other types of moves even in its dreams), it never stops, and once it reaches an edge or a corner of the chessboard it reflects from it and moves on.\n\n        Given the initial position and the direction of the ray, find its position after k steps where a step means either moving from one cell to the neighboring one or reflecting from a corner of the board.`,\n        codeOutput: \n        `function chessBishopDream(boardSize, initPosition, initDirection, k) {\n            //Keep track of count.\n            let count = 0;\n            //Monitor the current directions and positions.\n            let directions = [...initDirection];\n            let positions = [...initPosition];\n            //Helper function to perform move on either dimension.\n            const movePosition = position => {        \n                //Make sure this dimension can be moved upward/downward.\n                if(directions[position] === 1) {\n                    //Check if moving this upward is within bounds.\n                    if(positions[position] + directions[position] <= boardSize[position] - 1) {\n                        positions[position] += directions[position];\n                    } else {\n                        //Flip the direction of this dimension\n                        directions[position] *= -1;\n                    }\n                } else {\n                    //Check if moving this downward is within bounds.\n                    if(positions[position] + directions[position] >= 0) {\n                        positions[position] += directions[position];\n                    } else {\n                        //Flip the direction of this dimension\n                        directions[position] *= -1;\n                    }    \n                }\n            };\n            \n            //Loop to perform moves.\n            while(count < k) {\n                //Perform move on each dimension.\n                movePosition(0);\n                movePosition(1);\n                //update iteration count.\n                count++;\n                //Once the positions and directions are again the same as how they started:\n                if(positions[0] === initPosition[0] && positions[1] === initPosition[1] &&\n                directions[0] === initDirection[0] && directions[1] === initDirection[1]) {\n                    //In order to prevent too many iterations, once the original positions and directions are arrived at again, only go as many more iterations as needed to reach the desired position.\n                    if(count > 0) k = count + (k % count);\n                }    \n            }\n            \n            //Return final positions.\n            return positions;\n        }`,\n        code: function chessBishopDream(boardSize, initPosition, initDirection, k) {\n            //Keep track of count.\n            let count = 0;\n            //Monitor the current directions and positions.\n            let directions = [...initDirection];\n            let positions = [...initPosition];\n            //Helper function to perform move on either dimension.\n            const movePosition = position => {        \n                //Make sure this dimension can be moved upward/downward.\n                if(directions[position] === 1) {\n                    //Check if moving this upward is within bounds.\n                    if(positions[position] + directions[position] <= boardSize[position] - 1) {\n                        positions[position] += directions[position];\n                    } else {\n                        //Flip the direction of this dimension\n                        directions[position] *= -1;\n                    }\n                } else {\n                    //Check if moving this downward is within bounds.\n                    if(positions[position] + directions[position] >= 0) {\n                        positions[position] += directions[position];\n                    } else {\n                        //Flip the direction of this dimension\n                        directions[position] *= -1;\n                    }    \n                }\n            };\n            \n            //Loop to perform moves.\n            while(count < k) {\n                //Perform move on each dimension.\n                movePosition(0);\n                movePosition(1);\n                //update iteration count.\n                count++;\n                //Once the positions and directions are again the same as how they started:\n                if(positions[0] === initPosition[0] && positions[1] === initPosition[1] &&\n                directions[0] === initDirection[0] && directions[1] === initDirection[1]) {\n                    //In order to prevent too many iterations, once the original positions and directions are arrived at again, only go as many more iterations as needed to reach the desired position.\n                    if(count > 0) k = count + (k % count);\n                }    \n            }\n            \n            //Return final positions.\n            return positions;\n        },\n        arguments: {\n            descriptions: [\n                {\n                    text: \"Board Size (Integer Array; No Brackets [])\",\n                    type: \"NumberArray\"\n                },\n                {\n                    text: \"Initial Position (Integer Array; No Brackets [])\",\n                    type: \"NumberArray\"\n                },\n                {\n                    text: \"Initial Direction (Integer Array of 1 or -1; No Brackets [])\",\n                    type: \"NumberArray\"\n                },\n                {\n                    text: \"Number of Steps\",\n                    type: \"Number\"\n                }\n            ]\n        }\n    },\n    chessBoardCellColor: {\n        name: 'chessBoardCellColor',\n        instructions: `Given two cells on the standard chess board, determine whether they have the same color or not.`,\n        codeOutput: \n        `function chessBoardCellColor(cell1, cell2) {\n            let cell1Color;\n            let cell2Color;\n            if(cell1.charCodeAt(0) % 2 === cell1.charCodeAt(1) % 2) {\n                cell1Color = 'dark';\n            } else {\n                cell1Color = 'light';\n            }\n            if(cell2.charCodeAt(0) % 2 === cell2.charCodeAt(1) % 2) {\n                cell2Color = 'dark';\n            } else {\n                cell2Color = 'light';\n            }\n            return cell1Color === cell2Color;\n        }`,\n        code: function chessBoardCellColor(cell1, cell2) {\n            let cell1Color;\n            let cell2Color;\n            if(cell1.charCodeAt(0) % 2 === cell1.charCodeAt(1) % 2) {\n                cell1Color = 'dark';\n            } else {\n                cell1Color = 'light';\n            }\n            if(cell2.charCodeAt(0) % 2 === cell2.charCodeAt(1) % 2) {\n                cell2Color = 'dark';\n            } else {\n                cell2Color = 'light';\n            }\n            return cell1Color === cell2Color;\n        },\n        arguments: {\n            descriptions: [\n                {\n                    text: \"Chess Board Position (In Form Of [a-h][1-8])\",\n                    type: \"String\"\n                },\n                {\n                    text: \"Chess Board Position (In Form Of [a-h][1-8])\",\n                    type: \"String\"\n                }\n            ]\n        }\n    },\n    chessKnight: {\n        name: 'chessKnight',\n        instructions: `Given a position of a knight on the standard chessboard, find the number of different moves the knight can perform.\n\n        The knight can move to a square that is two squares horizontally and one square vertically, or two squares vertically and one square horizontally away from it. The complete move therefore looks like the letter L. Check out the image below to see all valid moves for a knight piece that is placed on one of the central squares.`,\n        codeOutput: \n        `function chessKnight(cell) {\n            //Create a character code representation of the letter cell.\n            let col = cell.charCodeAt(0);\n            let row = Number(cell[1]);\n            let totalSpaces = 0;\n            \n            if(col + 2 <= 104) {\n                //If we can go 2 spaces to the right, check the one up and one down.\n                if(row + 1 <= 8) totalSpaces++;\n                if(row - 1 >= 1) totalSpaces++;\n            }\n        \n            if(row + 2 <= 8) {\n                //If we can go 2 spaces up, check one left and one right.\n                if(col + 1 <= 104) totalSpaces++;\n                if(col - 1 >= 97) totalSpaces++;\n            }\n            \n            if(col - 2 >= 97) {\n                //If we can go 2 spaces to the left, check the one up and one down.\n                if(row + 1 <= 8) totalSpaces++;\n                if(row - 1 >= 1) totalSpaces++;\n            }\n            \n            if(row - 2 >= 1) {\n                //If we can go 2 spaces down, check one left and one right.\n                if(col + 1 <= 104) totalSpaces++;\n                if(col - 1 >= 97) totalSpaces++;\n            }\n            \n            return totalSpaces;\n        }`,\n        code: function chessKnight(cell) {\n            //Create a character code representation of the letter cell.\n            let col = cell.charCodeAt(0);\n            let row = Number(cell[1]);\n            let totalSpaces = 0;\n            \n            if(col + 2 <= 104) {\n                //If we can go 2 spaces to the right, check the one up and one down.\n                if(row + 1 <= 8) totalSpaces++;\n                if(row - 1 >= 1) totalSpaces++;\n            }\n        \n            if(row + 2 <= 8) {\n                //If we can go 2 spaces up, check one left and one right.\n                if(col + 1 <= 104) totalSpaces++;\n                if(col - 1 >= 97) totalSpaces++;\n            }\n            \n            if(col - 2 >= 97) {\n                //If we can go 2 spaces to the left, check the one up and one down.\n                if(row + 1 <= 8) totalSpaces++;\n                if(row - 1 >= 1) totalSpaces++;\n            }\n            \n            if(row - 2 >= 1) {\n                //If we can go 2 spaces down, check one left and one right.\n                if(col + 1 <= 104) totalSpaces++;\n                if(col - 1 >= 97) totalSpaces++;\n            }\n            \n            return totalSpaces;\n        },\n        arguments: {\n            descriptions: [\n                {\n                    text: \"Chess Board Position (In Form Of [a-h][1-8])\",\n                    type: \"String\"\n                }\n            ]\n        }\n    },\n    chessTriangle: {\n        name: 'chessTriangle',\n        instructions: `Consider a bishop, a knight and a rook on an n × m chessboard. They are said to form a triangle if each piece attacks exactly one other piece and is attacked by exactly one piece. Calculate the number of ways to choose positions of the pieces to form a triangle.\n\n        Note that the bishop attacks pieces sharing the common diagonal with it; the rook attacks in horizontal and vertical directions; and, finally, the knight attacks squares which are two squares horizontally and one square vertically, or two squares vertically and one square horizontally away from its position.`,\n        codeOutput: \n        `function chessTriangle(n, m) {\n            let count = 0;\n            //Loop through every square, where a knight could be.\n            for(let i = 0; i < n; i++) {\n                for(let j = 0; j < m; j++) {\n                    //At each square, find every spot where this knight could attack.\n                    \n                    //Check right side (1/4)\n                    \n                    //Check upper 4x3 rectangle (K is corner)\n                    if(i - 3 >= 0 && j + 2 < m) count++;\n                    //Check upper 3x3 rectangle (K is corner)\n                    if(i - 2 >= 0 && j + 2 < m) count++;\n                    //Check upper 2x3 rectangle (K is corner)\n                    if(i - 1 >= 0 && j + 2 < m) count += 2;\n                    //Check lower 4x3 rectangle (K is corner)\n                    if(i + 3 < n && j + 2 < m) count++;\n                    //Check lower 3x3 rectangle (K is corner)\n                    if(i + 2 < n && j + 2 < m) count++;\n                    //Check lower 2x3 rectangle (K is corner) \n                    if(i + 1 < n && j + 2 < m) count += 2;\n                    //Plus, check if K is middle of 3x3 rectangle\n                    if(i + 1 < n && i - 1 >= 0 && j + 2 < m) count += 2;\n                    //Check if K is lower end of a 4x3 rectangle\n                    if(i - 2 >= 0 && i + 1 < n && j + 2 < m) count++;\n                    //Check if K is higher end of a 4x3 rectangle\n                    if(i - 1 >= 0 && i + 2 < n && j + 2 < m) count++;\n                    //Check upper 2x4 rectangle (K is corner)\n                    if(i - 1 >= 0 && j + 3 < m) count+=2;\n                    //Check lower 2x4 rectangle (K is corner)\n                    if(i + 1 < n && j + 3 < m) count+=2;\n                    \n                    //Check left side (2/4)\n                    \n                    //Check upper 4x3 rectangle (K is corner)\n                    if(i - 3 >= 0 && j - 2 >= 0) count++;\n                    //Check upper 3x3 rectangle (K is corner)\n                    if(i - 2 >= 0 && j - 2 >= 0) count++;\n                    //Check upper 2x3 rectangle (K is corner)\n                    if(i - 1 >= 0 && j - 2 >= 0) count += 2;\n                    //Check lower 4x3 rectangle (K is corner)\n                    if(i + 3 < n && j - 2 >= 0) count++;\n                    //Check lower 3x3 rectangle (K is corner)\n                    if(i + 2 < n && j - 2 >= 0) count++;\n                    //Check lower 2x3 rectangle (K is corner) \n                    if(i + 1 < n && j - 2 >= 0) count += 2;\n                    //Plus, check if K is middle of 3x3 rectangle\n                    if(i + 1 < n && i - 1 >= 0 && j - 2 >= 0) count += 2;\n                    //Check if K is lower end of a 4x3 rectangle\n                    if(i - 2 >= 0 && i + 1 < n && j - 2 >= 0) count++;\n                    //Check if K is higher end of a 4x3 rectangle\n                    if(i - 1 >= 0 && i + 2 < n && j - 2 >= 0) count++;\n                    //Check upper 2x4 rectangle (K is corner)\n                    if(i - 1 >= 0 && j - 3 >= 0) count+=2;\n                    //Check lower 2x4 rectangle (K is corner)\n                    if(i + 1 < n && j - 3 >= 0) count+=2;\n                    \n                    //Check top side (3/4)\n                    \n                    //Check upper 4x3 rectangle (K is corner)\n                    if(j - 3 >= 0 && i - 2 >= 0) count++;\n                    //Check upper 3x3 rectangle (K is corner)\n                    if(j - 2 >= 0 && i - 2 >= 0) count++;\n                    //Check upper 2x3 rectangle (K is corner)\n                    if(j - 1 >= 0 && i - 2 >= 0) count += 2;\n                    //Check lower 4x3 rectangle (K is corner)\n                    if(j + 3 < m && i - 2 >= 0) count++;\n                    //Check lower 3x3 rectangle (K is corner)\n                    if(j + 2 < m && i - 2 >= 0) count++;\n                    //Check lower 2x3 rectangle (K is corner) \n                    if(j + 1 < m && i - 2 >= 0) count += 2;\n                    //Plus, check if K is middle of 3x3 rectangle\n                    if(j + 1 < m && j - 1 >= 0 && i - 2 >= 0) count += 2;\n                    //Check if K is lower end of a 4x3 rectangle\n                    if(j - 2 >= 0 && j + 1 < m && i - 2 >= 0) count++;\n                    //Check if K is higher end of a 4x3 rectangle\n                    if(j - 1 >= 0 && j + 2 < m && i - 2 >= 0) count++;\n                    //Check upper 2x4 rectangle (K is corner)\n                    if(j - 1 >= 0 && i - 3 >= 0) count+=2;\n                    //Check lower 2x4 rectangle (K is corner)\n                    if(j + 1 < m && i - 3 >= 0) count+=2;\n                    \n                    //Check bottom side (4/4)\n                    \n                    //Check upper 4x3 rectangle (K is corner)\n                    if(j - 3 >= 0 && i + 2 < n) count++;\n                    //Check upper 3x3 rectangle (K is corner)\n                    if(j - 2 >= 0 && i + 2 < n) count++;\n                    //Check upper 2x3 rectangle (K is corner)\n                    if(j - 1 >= 0 && i + 2 < n) count += 2;\n                    //Check lower 4x3 rectangle (K is corner)\n                    if(j + 3 < m && i + 2 < n) count++;\n                    //Check lower 3x3 rectangle (K is corner)\n                    if(j + 2 < m && i + 2 < n) count++;\n                    //Check lower 2x3 rectangle (K is corner) \n                    if(j + 1 < m && i + 2 < n) count += 2;\n                    //Plus, check if K is middle of 3x3 rectangle\n                    if(j + 1 < m && j - 1 >= 0 && i + 2 < n) count += 2;\n                    //Check if K is lower end of a 4x3 rectangle\n                    if(j - 2 >= 0 && j + 1 < m && i + 2 < n) count++;\n                    //Check if K is higher end of a 4x3 rectangle\n                    if(j - 1 >= 0 && j + 2 < m && i + 2 < n) count++;\n                    //Check upper 2x4 rectangle (K is corner)\n                    if(j - 1 >= 0 && i + 3 < n) count+=2;\n                    //Check lower 2x4 rectangle (K is corner)\n                    if(j + 1 < m && i + 3 < n) count+=2;\n                }\n            }\n            \n            return count;\n        }`,\n        code: function chessTriangle(n, m) {\n            let count = 0;\n            //Loop through every square, where a knight could be.\n            for(let i = 0; i < n; i++) {\n                for(let j = 0; j < m; j++) {\n                    //At each square, find every spot where this knight could attack.\n                    \n                    //Check right side (1/4)\n                    \n                    //Check upper 4x3 rectangle (K is corner)\n                    if(i - 3 >= 0 && j + 2 < m) count++;\n                    //Check upper 3x3 rectangle (K is corner)\n                    if(i - 2 >= 0 && j + 2 < m) count++;\n                    //Check upper 2x3 rectangle (K is corner)\n                    if(i - 1 >= 0 && j + 2 < m) count += 2;\n                    //Check lower 4x3 rectangle (K is corner)\n                    if(i + 3 < n && j + 2 < m) count++;\n                    //Check lower 3x3 rectangle (K is corner)\n                    if(i + 2 < n && j + 2 < m) count++;\n                    //Check lower 2x3 rectangle (K is corner) \n                    if(i + 1 < n && j + 2 < m) count += 2;\n                    //Plus, check if K is middle of 3x3 rectangle\n                    if(i + 1 < n && i - 1 >= 0 && j + 2 < m) count += 2;\n                    //Check if K is lower end of a 4x3 rectangle\n                    if(i - 2 >= 0 && i + 1 < n && j + 2 < m) count++;\n                    //Check if K is higher end of a 4x3 rectangle\n                    if(i - 1 >= 0 && i + 2 < n && j + 2 < m) count++;\n                    //Check upper 2x4 rectangle (K is corner)\n                    if(i - 1 >= 0 && j + 3 < m) count+=2;\n                    //Check lower 2x4 rectangle (K is corner)\n                    if(i + 1 < n && j + 3 < m) count+=2;\n                    \n                    //Check left side (2/4)\n                    \n                    //Check upper 4x3 rectangle (K is corner)\n                    if(i - 3 >= 0 && j - 2 >= 0) count++;\n                    //Check upper 3x3 rectangle (K is corner)\n                    if(i - 2 >= 0 && j - 2 >= 0) count++;\n                    //Check upper 2x3 rectangle (K is corner)\n                    if(i - 1 >= 0 && j - 2 >= 0) count += 2;\n                    //Check lower 4x3 rectangle (K is corner)\n                    if(i + 3 < n && j - 2 >= 0) count++;\n                    //Check lower 3x3 rectangle (K is corner)\n                    if(i + 2 < n && j - 2 >= 0) count++;\n                    //Check lower 2x3 rectangle (K is corner) \n                    if(i + 1 < n && j - 2 >= 0) count += 2;\n                    //Plus, check if K is middle of 3x3 rectangle\n                    if(i + 1 < n && i - 1 >= 0 && j - 2 >= 0) count += 2;\n                    //Check if K is lower end of a 4x3 rectangle\n                    if(i - 2 >= 0 && i + 1 < n && j - 2 >= 0) count++;\n                    //Check if K is higher end of a 4x3 rectangle\n                    if(i - 1 >= 0 && i + 2 < n && j - 2 >= 0) count++;\n                    //Check upper 2x4 rectangle (K is corner)\n                    if(i - 1 >= 0 && j - 3 >= 0) count+=2;\n                    //Check lower 2x4 rectangle (K is corner)\n                    if(i + 1 < n && j - 3 >= 0) count+=2;\n                    \n                    //Check top side (3/4)\n                    \n                    //Check upper 4x3 rectangle (K is corner)\n                    if(j - 3 >= 0 && i - 2 >= 0) count++;\n                    //Check upper 3x3 rectangle (K is corner)\n                    if(j - 2 >= 0 && i - 2 >= 0) count++;\n                    //Check upper 2x3 rectangle (K is corner)\n                    if(j - 1 >= 0 && i - 2 >= 0) count += 2;\n                    //Check lower 4x3 rectangle (K is corner)\n                    if(j + 3 < m && i - 2 >= 0) count++;\n                    //Check lower 3x3 rectangle (K is corner)\n                    if(j + 2 < m && i - 2 >= 0) count++;\n                    //Check lower 2x3 rectangle (K is corner) \n                    if(j + 1 < m && i - 2 >= 0) count += 2;\n                    //Plus, check if K is middle of 3x3 rectangle\n                    if(j + 1 < m && j - 1 >= 0 && i - 2 >= 0) count += 2;\n                    //Check if K is lower end of a 4x3 rectangle\n                    if(j - 2 >= 0 && j + 1 < m && i - 2 >= 0) count++;\n                    //Check if K is higher end of a 4x3 rectangle\n                    if(j - 1 >= 0 && j + 2 < m && i - 2 >= 0) count++;\n                    //Check upper 2x4 rectangle (K is corner)\n                    if(j - 1 >= 0 && i - 3 >= 0) count+=2;\n                    //Check lower 2x4 rectangle (K is corner)\n                    if(j + 1 < m && i - 3 >= 0) count+=2;\n                    \n                    //Check bottom side (4/4)\n                    \n                    //Check upper 4x3 rectangle (K is corner)\n                    if(j - 3 >= 0 && i + 2 < n) count++;\n                    //Check upper 3x3 rectangle (K is corner)\n                    if(j - 2 >= 0 && i + 2 < n) count++;\n                    //Check upper 2x3 rectangle (K is corner)\n                    if(j - 1 >= 0 && i + 2 < n) count += 2;\n                    //Check lower 4x3 rectangle (K is corner)\n                    if(j + 3 < m && i + 2 < n) count++;\n                    //Check lower 3x3 rectangle (K is corner)\n                    if(j + 2 < m && i + 2 < n) count++;\n                    //Check lower 2x3 rectangle (K is corner) \n                    if(j + 1 < m && i + 2 < n) count += 2;\n                    //Plus, check if K is middle of 3x3 rectangle\n                    if(j + 1 < m && j - 1 >= 0 && i + 2 < n) count += 2;\n                    //Check if K is lower end of a 4x3 rectangle\n                    if(j - 2 >= 0 && j + 1 < m && i + 2 < n) count++;\n                    //Check if K is higher end of a 4x3 rectangle\n                    if(j - 1 >= 0 && j + 2 < m && i + 2 < n) count++;\n                    //Check upper 2x4 rectangle (K is corner)\n                    if(j - 1 >= 0 && i + 3 < n) count+=2;\n                    //Check lower 2x4 rectangle (K is corner)\n                    if(j + 1 < m && i + 3 < n) count+=2;\n                }\n            }\n            \n            return count;\n        },\n        arguments: {\n            descriptions: [\n                {\n                    text: \"Size of Dimension #1 (Positive Integer)\",\n                    type: \"Number\"\n                },\n                {\n                    text: \"Size of Dimension #2 (Positive Integer)\",\n                    type: \"Number\"\n                }\n            ]\n        }\n    },\n    christmasTree: {\n        name: 'christmasTree',\n        instructions: `It's Christmas time! To share his Christmas spirit with all his friends, the young Christmas Elf decided to send each of them a Christmas e-mail with a nice Christmas tree. Unfortunately, Internet traffic is very expensive in the North Pole, so instead of sending an actual image he got creative and drew the tree using nothing but asterisks ('*' symbols). He has given you the specs (see below) and your task is to write a program that will generate trees following the spec and some initial parameters.\n\n        Here is a formal definition of how the tree should be built, but before you read it the Elf HIGHLY recommends first looking at the examples that follow:\n        \n        Each tree has a crown as follows:\n        \n         *\n         *\n        ***\n        Define a line as a horizontal group of asterisks and a level as a collection of levelHeight lines stacked one on top of the other.\n        \n        Below the crown there are levelNum levels.\n        \n        The tree is perfectly symmetrical so all the middle asterisks of the lines lie on the center of the tree.\n        \n        Each line of the same level (excluding the first one) has two more asterisks than the previous one (one added to each end);\n        \n        The number of asterisks in the first line of each level is chosen as follows:\n        \n        the first line of the first level has 5 asterisks;\n        the first line of each consecutive level contains two more asterisks than the first line of the previous level.\n        And finally there is the tree foot which has a height of levelNum and a width of:\n        \n        levelHeight asterisks if levelHeight is odd;\n        levelHeight + 1 asterisks if levelHeight is even.\n        Given levelNum and levelHeight, return the Christmas tree of the young elf.`,\n        codeOutput: \n        `function christmasTree(levelNum, levelHeight) {\n            let tree = [];\n            let maxLength = 5 + (2 * (levelHeight - 1)) + (2 * (levelNum - 1));\n            //Create crown\n            let crownTop = \"\";\n            for(let i = 0; i <= (maxLength - 1) / 2; i++) {\n                crownTop += i === (maxLength - 1) / 2 ? \"*\" : \" \";\n            }\n            tree.push(crownTop);\n            tree.push(crownTop);\n            let crownBase = \"\";\n            for(let i = 0; i <= ((maxLength - 1) / 2) + 1; i++) {\n                crownBase += i < (((maxLength - 1) / 2) + 1) - 2 ? \" \" : \"*\";\n            }   \n            tree.push(crownBase);\n            \n            //Create Main Levels\n            for(let thisLevel = 0; thisLevel < levelNum; thisLevel++) {\n                //Establish the size (number of *) of the first(top) line\n                let defaultTopSize = 5 + (thisLevel * 2);\n                //Establish the length (number of total indexes) of the first(top) line\n                let defaultTopLength = ((maxLength - 1) / 2) + 3 + (thisLevel * 1);\n                \n                //For each level, construct each line\n                for(let thisLine = 0; thisLine < levelHeight; thisLine++) {\n                    //Establish the size(number of *) of the current line\n                    let line = \"\";\n                    let thisSize = defaultTopSize + (2 * thisLine);\n                    let thisLength = defaultTopLength + (1 * thisLine);\n                                \n                    //Fill in this line\n                    for(let i = 0; i < thisLength; i++) {\n                        let thisChar = i < thisLength - thisSize ? \" \" : \"*\";\n                        line += thisChar;\n                    }\n                        \n                    //Push this line into the tree.        \n                    tree.push(line);\n                }\n            }\n            \n            //Construct base\n            let baseWidth = levelHeight % 2 ? levelHeight : levelHeight + 1;\n            let baseLength = maxLength - ((maxLength - baseWidth) / 2);\n            let base = \"\";\n                \n            //Fill in the characters for the base\n            for(let i = 0; i < baseLength; i++) {\n                base += i < baseLength - baseWidth ? \" \" : \"*\";\n            }\n            \n            //Using the line for the base, fill into the tree the correct number of times.\n            for(let baseLevel = 0; baseLevel < levelNum; baseLevel++) {\n                tree.push(base);\n            }\n            \n            return tree;\n        }`,\n        code: function christmasTree(levelNum, levelHeight) {\n            let tree = [];\n            let maxLength = 5 + (2 * (levelHeight - 1)) + (2 * (levelNum - 1));\n            //Create crown\n            let crownTop = \"\";\n            for(let i = 0; i <= (maxLength - 1) / 2; i++) {\n                crownTop += i === (maxLength - 1) / 2 ? \"*\" : \" \";\n            }\n            tree.push(crownTop);\n            tree.push(crownTop);\n            let crownBase = \"\";\n            for(let i = 0; i <= ((maxLength - 1) / 2) + 1; i++) {\n                crownBase += i < (((maxLength - 1) / 2) + 1) - 2 ? \" \" : \"*\";\n            }   \n            tree.push(crownBase);\n            \n            //Create Main Levels\n            for(let thisLevel = 0; thisLevel < levelNum; thisLevel++) {\n                //Establish the size (number of *) of the first(top) line\n                let defaultTopSize = 5 + (thisLevel * 2);\n                //Establish the length (number of total indexes) of the first(top) line\n                let defaultTopLength = ((maxLength - 1) / 2) + 3 + (thisLevel * 1);\n                \n                //For each level, construct each line\n                for(let thisLine = 0; thisLine < levelHeight; thisLine++) {\n                    //Establish the size(number of *) of the current line\n                    let line = \"\";\n                    let thisSize = defaultTopSize + (2 * thisLine);\n                    let thisLength = defaultTopLength + (1 * thisLine);\n                                \n                    //Fill in this line\n                    for(let i = 0; i < thisLength; i++) {\n                        let thisChar = i < thisLength - thisSize ? \" \" : \"*\";\n                        line += thisChar;\n                    }\n                        \n                    //Push this line into the tree.        \n                    tree.push(line);\n                }\n            }\n            \n            //Construct base\n            let baseWidth = levelHeight % 2 ? levelHeight : levelHeight + 1;\n            let baseLength = maxLength - ((maxLength - baseWidth) / 2);\n            let base = \"\";\n                \n            //Fill in the characters for the base\n            for(let i = 0; i < baseLength; i++) {\n                base += i < baseLength - baseWidth ? \" \" : \"*\";\n            }\n            \n            //Using the line for the base, fill into the tree the correct number of times.\n            for(let baseLevel = 0; baseLevel < levelNum; baseLevel++) {\n                tree.push(base);\n            }\n            \n            return tree;\n        },\n        arguments: {\n            descriptions: [\n                {\n                    text: \"Integer to Represent Number of Levels\",\n                    type: \"Number\"\n                },\n                {\n                    text: \"Integer to Represent Height of Levels\",\n                    type: \"Number\"\n                }\n            ]\n        }\n    },\n    cipher26: {\n        name: 'cipher26',\n        instructions: `You've intercepted an encrypted message, and you are really curious about its contents. You were able to find out that the message initially contained only lowercase English letters, and was encrypted with the following cipher:\n\n        Let all letters from 'a' to 'z' correspond to the numbers from 0 to 25, respectively.\n        The number corresponding to the ith letter of the encrypted message is then equal to the sum of numbers corresponding to the first i letters of the initial unencrypted message modulo 26.\n        Now that you know how the message was encrypted, implement the algorithm to decipher it.`,\n        codeOutput: \n        `function cipher26(message) {\n            let runningSum = message.charCodeAt(0) - 97;\n            let decodedMessage = message[0];\n            \n            for(let i = 1; i < message.length; i++) {\n                let currentCode = message.charCodeAt(i) - 97; \n                //Based on the current code, find what value of the decoded code would yield this current code when added to the running total modulo 26.\n                let decodedCode = 0;\n                while((runningSum + decodedCode) % 26 !== currentCode) {\n                    decodedCode++;\n                }\n                //Update Values\n                runningSum += decodedCode;\n                decodedMessage += String.fromCharCode(decodedCode + 97);\n            }\n            \n            return decodedMessage;\n        }\n        `,\n        code: function cipher26(message) {\n            let runningSum = message.charCodeAt(0) - 97;\n            let decodedMessage = message[0];\n            \n            for(let i = 1; i < message.length; i++) {\n                let currentCode = message.charCodeAt(i) - 97; \n                //Based on the current code, find what value of the decoded code would yield this current code when added to the running total modulo 26.\n                let decodedCode = 0;\n                while((runningSum + decodedCode) % 26 !== currentCode) {\n                    decodedCode++;\n                }\n                //Update Values\n                runningSum += decodedCode;\n                decodedMessage += String.fromCharCode(decodedCode + 97);\n            }\n            \n            return decodedMessage;\n        },\n        arguments: {\n            descriptions: [\n                {\n                    text: \"Message to Cipher (Lowercase Word)\",\n                    type: \"String\"\n                }\n            ]\n        }\n    },\n    circleOfNumbers: {\n        name: 'circleOfNumbers',\n        instructions: `Consider integer numbers from 0 to n - 1 written down along the circle in such a way that the distance between any two neighboring numbers is equal (note that 0 and n - 1 are neighboring, too).\n\n        Given n and firstNumber, find the number which is written in the radially opposite position to firstNumber.`,\n        codeOutput: \n        `function circleOfNumbers(n, firstNumber) {\n            return firstNumber < n / 2 ? n / 2 + firstNumber : Math.abs(n / 2 - firstNumber);\n        }`,\n        code: function circleOfNumbers(n, firstNumber) {\n            return firstNumber < n / 2 ? n / 2 + firstNumber : Math.abs(n / 2 - firstNumber);\n        },\n        arguments: {\n            descriptions: [\n                {\n                    text: \"Integer (Represent Number of Numbers)\",\n                    type: \"Number\"\n                },\n                {\n                    text: \"Integer (Represent First Number)\",\n                    type: \"Number\"\n                }\n            ]\n        }\n    },\n    climbStairs: {\n        name: `climbStairs`,\n        instructions: `You are climbing a staircase. It takes n steps to reach the top.\n\n        Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?`,\n        codeOutput: \n        `var climbStairs = function(n) {\n            //Since this pattern essentially can be simplified to the fibonacci sequence, start with 0 and 1. \n            let num1 = 0;\n            let num2 = 1;\n            //Until we reach the destination n, repeatedly add the last two elements.\n            for(let i = 1; i < n; i++) {\n                let nextNum = num1 + num2;\n                num1 = num2;\n                num2 = nextNum;\n            }\n            //Finally, return the last 2 elements. This will be the number of combinations of 1 and 2 steps.\n            return num1 + num2;\n        };`,\n        code: function climbStairs(n) {\n            //Since this pattern essentially can be simplified to the fibonacci sequence, start with 0 and 1. \n            let num1 = 0;\n            let num2 = 1;\n            //Until we reach the destination n, repeatedly add the last two elements.\n            for(let i = 1; i < n; i++) {\n                let nextNum = num1 + num2;\n                num1 = num2;\n                num2 = nextNum;\n            }\n            //Finally, return the last 2 elements. This will be the number of combinations of 1 and 2 steps.\n            return num1 + num2;\n        },\n        arguments: {\n            descriptions: [\n                {\n                    text: \"Number of Stairs\",\n                    type: \"Number\"\n                }\n            ]\n        }\n    },\n    combs: {\n        name: 'combs',\n        instructions: `Miss X has only two combs in her possession, both of which are old and miss a tooth or two. She also has many purses of different length, in which she carries the combs. The only way they fit is horizontally and without overlapping. Given teeth' positions on both combs, find the minimum length of the purse she needs to take them with her.\n\n        It is guaranteed that there is at least one tooth at each end of the comb.\n        It is also guaranteed that the total length of two strings is smaller than 32.\n        Note, that the combs can not be rotated/reversed.`,\n        codeOutput: \n        `function combs(comb1, comb2) {\n            //Keep track of array versions of both combs.\n            let comb1Copy = comb1.split(\"\");\n            let comb2Copy = comb2.split(\"\");\n            //Keep track of the total number of space maintained by both versions of a shift.\n            let leftSplit = 0;\n            let rightSplit = 0;\n            //Keep track of the number of spaces removed.\n            let offset = 0;\n            //Shift comb1 to the left (Add remaining length of comb1 to offset)\n            while(comb1Copy.length && leftSplit === 0) {\n                comb1Copy.shift();\n                offset++;\n                //Check all places to see if this is a valid 'combination'\n                let valid = true;\n                for(let i = 0; i < Math.min(comb1Copy.length, comb2Copy.length); i++) {\n                    if(comb1Copy[i] === \"*\" && comb2Copy[i] === \"*\") {\n                        valid = false;\n                    }\n                }\n                if(valid) leftSplit = Math.max(comb1Copy.length, comb2Copy.length) + offset;\n                \n            }\n            //Reset values to do other split.\n            comb1Copy = comb1.split(\"\");\n            comb2Copy = comb2.split(\"\");\n            offset = 0;\n            //Shift comb2 to the left (Add remaining length of comb1 to offset) and repeat process.\n            while(comb2Copy.length && !rightSplit) {\n                comb2Copy.shift();\n                offset++;\n                //Check all places\n                let valid = true;\n                for(let i = 0; i < Math.min(comb2Copy.length, comb1.length); i++) {\n                    if(comb2Copy[i] === \"*\" && comb1[i] === \"*\") {\n                        valid = false;\n                    }\n                }\n                if(valid) rightSplit = comb1.length + offset;\n            }\n            //Return the version of the shift that takes up the least space.\n            return Math.min(leftSplit, rightSplit);\n        }`,\n        code: function combs(comb1, comb2) {\n            //Keep track of array versions of both combs.\n            let comb1Copy = comb1.split(\"\");\n            let comb2Copy = comb2.split(\"\");\n            //Keep track of the total number of space maintained by both versions of a shift.\n            let leftSplit = 0;\n            let rightSplit = 0;\n            //Keep track of the number of spaces removed.\n            let offset = 0;\n            //Shift comb1 to the left (Add remaining length of comb1 to offset)\n            while(comb1Copy.length && leftSplit === 0) {\n                comb1Copy.shift();\n                offset++;\n                //Check all places to see if this is a valid 'combination'\n                let valid = true;\n                for(let i = 0; i < Math.min(comb1Copy.length, comb2Copy.length); i++) {\n                    if(comb1Copy[i] === \"*\" && comb2Copy[i] === \"*\") {\n                        valid = false;\n                    }\n                }\n                if(valid) leftSplit = Math.max(comb1Copy.length, comb2Copy.length) + offset;\n                \n            }\n            //Reset values to do other split.\n            comb1Copy = comb1.split(\"\");\n            comb2Copy = comb2.split(\"\");\n            offset = 0;\n            //Shift comb2 to the left (Add remaining length of comb1 to offset) and repeat process.\n            while(comb2Copy.length && !rightSplit) {\n                comb2Copy.shift();\n                offset++;\n                //Check all places\n                let valid = true;\n                for(let i = 0; i < Math.min(comb2Copy.length, comb1.length); i++) {\n                    if(comb2Copy[i] === \"*\" && comb1[i] === \"*\") {\n                        valid = false;\n                    }\n                }\n                if(valid) rightSplit = comb1.length + offset;\n            }\n            //Return the version of the shift that takes up the least space.\n            return Math.min(leftSplit, rightSplit);\n        },\n        arguments: {\n            descriptions: [\n                {\n                    text: \"String Representing a Comb (Only * and .)\",\n                    type: \"String\"\n                },\n                {\n                    text: \"String Representing a Comb (Only * and .)\",\n                    type: \"String\"\n                }\n            ]\n        }\n    },\n    comfortableNumbers: {\n        name: 'comfortableNumbers',\n        instructions: `Let's say that number a feels comfortable with number b if a ≠ b and b lies in the segment [a - s(a), a + s(a)], where s(x) is the sum of x's digits.\n\n        How many pairs (a, b) are there, such that a < b, both a and b lie on the segment [l, r], and each number feels comfortable with the other (so a feels comfortable with b and b feels comfortable with a)?`,\n        codeOutput: \n        `function comfortableNumbers(l, r) {\n            //Get starting pairs for a and b.\n            let a = l;\n            let b = a + 1;\n            //Keep track of comfortable pairs.\n            let count = 0;\n            while(a < r && b <= r) {\n                //Get the comfortable range for a.\n                let aMin = a - String(a).split(\"\").reduce((total, current) => {\n                    return total += Number(current);\n                }, 0);\n                let aMax = a + String(a).split(\"\").reduce((total, current) => {\n                    return total += Number(current);\n                }, 0);\n                //Get the comfortable range for b.\n                let bMin = b - String(b).split(\"\").reduce((total, current) => {\n                    return total += Number(current);\n                }, 0);\n                let bMax = b + String(b).split(\"\").reduce((total, current) => {\n                    return total += Number(current);\n                }, 0);\n                //If b is with the comfortable range (and a is comfortable with the b range), add to the count.\n                if(b >= aMin && b <= aMax && a !== b\n                && a >= bMin && a <= bMax && a !== b) count++;\n                //Move onto next pair.\n                if(b < r) {\n                    b++;\n                } else {\n                    a++;\n                    b = a + 1;\n                }\n            }\n            return count;\n        }`,\n        code: function comfortableNumbers(l, r) {\n            //Get starting pairs for a and b.\n            let a = l;\n            let b = a + 1;\n            //Keep track of comfortable pairs.\n            let count = 0;\n            while(a < r && b <= r) {\n                //Get the comfortable range for a.\n                let aMin = a - String(a).split(\"\").reduce((total, current) => {\n                    return total += Number(current);\n                }, 0);\n                let aMax = a + String(a).split(\"\").reduce((total, current) => {\n                    return total += Number(current);\n                }, 0);\n                //Get the comfortable range for b.\n                let bMin = b - String(b).split(\"\").reduce((total, current) => {\n                    return total += Number(current);\n                }, 0);\n                let bMax = b + String(b).split(\"\").reduce((total, current) => {\n                    return total += Number(current);\n                }, 0);\n                //If b is with the comfortable range (and a is comfortable with the b range), add to the count.\n                if(b >= aMin && b <= aMax && a !== b\n                && a >= bMin && a <= bMax && a !== b) count++;\n                //Move onto next pair.\n                if(b < r) {\n                    b++;\n                } else {\n                    a++;\n                    b = a + 1;\n                }\n            }\n            return count;\n        },\n        arguments: {\n            descriptions: [\n                {\n                    text: \"Left Integer\",\n                    type: \"Number\"\n                },\n                {\n                    text: \"Right Integer\",\n                    type: \"Number\"\n                }\n            ]\n        }\n    },\n    commonCharacterCount: {\n        name: 'commonCharacterCount',\n        instructions: `Given two strings, find the number of common characters between them.`,\n        codeOutput: \n        `function commonCharacterCount(s1, s2) {\n            let numMatching = 0;\n            let charMap1 = {};\n            let charMap2 = {};\n            \n            for(let i = 0; i < s1.length; i++) {\n                if(charMap1[s1[i]]) {\n                    charMap1[s1[i]]++;\n                } else {\n                    charMap1[s1[i]] = 1;\n                }\n            } \n            \n            for(let i = 0; i < s2.length; i++) {\n                if(charMap2[s2[i]]) {\n                    charMap2[s2[i]]++;\n                } else {\n                    charMap2[s2[i]] = 1;\n                }\n            } \n            \n            console.log(charMap1);\n            console.log(charMap2);\n            \n            for(let char in charMap1) {\n                while(charMap1[char]) {\n                    if(charMap2[char]) {\n                        charMap2[char]--;\n                        numMatching++;\n                    }\n                    charMap1[char]--;\n                }\n            }\n            \n            return numMatching;\n        }`,\n        code: function commonCharacterCount(s1, s2) {\n            let numMatching = 0;\n            let charMap1 = {};\n            let charMap2 = {};\n            \n            for(let i = 0; i < s1.length; i++) {\n                if(charMap1[s1[i]]) {\n                    charMap1[s1[i]]++;\n                } else {\n                    charMap1[s1[i]] = 1;\n                }\n            } \n            \n            for(let i = 0; i < s2.length; i++) {\n                if(charMap2[s2[i]]) {\n                    charMap2[s2[i]]++;\n                } else {\n                    charMap2[s2[i]] = 1;\n                }\n            } \n            \n            console.log(charMap1);\n            console.log(charMap2);\n            \n            for(let char in charMap1) {\n                while(charMap1[char]) {\n                    if(charMap2[char]) {\n                        charMap2[char]--;\n                        numMatching++;\n                    }\n                    charMap1[char]--;\n                }\n            }\n            \n            return numMatching;\n        },\n        arguments: {\n            descriptions: [\n                {\n                    text: \"First String\",\n                    type: \"String\"\n                },\n                {\n                    text: \"Second String\",\n                    type: \"String\"\n                }\n            ]\n        }\n    },\n    constructRectangle: {\n        name: `constructRectangle`,\n        instructions: `A web developer needs to know how to design a web page's size. So, given a specific rectangular web page’s area, your job by now is to design a rectangular web page, whose length L and width W satisfy the following requirements:\n\n        The area of the rectangular web page you designed must equal to the given target area.\n        The width W should not be larger than the length L, which means L >= W.\n        The difference between length L and width W should be as small as possible.\n        Return an array [L, W] where L and W are the length and width of the web page you designed in sequence.`,\n        codeOutput: \n        `var constructRectangle = function(area) {\n            //Hold all sets of factors for this area.\n            let factorSets = [];\n            \n            //Find all factors\n            //Do-While structure allows for input of 1 to work. \n            let max = area;\n            let i = 1;\n            do {\n                //See if this is a factor.\n                if(area % i === 0) {\n                    //Make sure longer side is first in set.\n                    factorSets.push([area / i, i]);\n                }\n                //Update max and i.\n                max = Math.ceil(area / i);\n                i++;\n            } while(i < max)\n            \n            //Return the last set in the list (this will have the smallest value of l - w)\n            return factorSets.pop();\n        };`,\n        code: function constructRectangle(area) {\n            //Hold all sets of factors for this area.\n            let factorSets = [];\n            \n            //Find all factors\n            //Do-While structure allows for input of 1 to work. \n            let max = area;\n            let i = 1;\n            do {\n                //See if this is a factor.\n                if(area % i === 0) {\n                    //Make sure longer side is first in set.\n                    factorSets.push([area / i, i]);\n                }\n                //Update max and i.\n                max = Math.ceil(area / i);\n                i++;\n            } while(i < max)\n            \n            //Return the last set in the list (this will have the smallest value of l - w)\n            return factorSets.pop();\n        },\n        arguments: {\n            descriptions: [\n                {\n                    text: \"Whole Number Area\",\n                    type: \"Number\"\n                }\n            ]\n        }\n    },\n    constructSquare: {\n        name: 'constructSquare',\n        instructions: `Given a string consisting of lowercase English letters, find the largest square number which can be obtained by reordering the string's characters and replacing them with any digits you need (leading zeros are not allowed) where same characters always map to the same digits and different characters always map to different digits.\n\n        If there is no solution, return -1.`,\n        codeOutput: \n        `function constructSquare(s) {\n            //Helper function to count occurances of each character.\n            let countDigits = str => {\n                let digits = [];\n                //Until we run out of characters\n                while(str.length) {\n                    //Save the first character\n                    let char = str[0];\n                    //Find the total number of times this character occurs, save that number(push) and remove those characters.\n                    digits.push(str.length - (str = str.replace(new RegExp(char, \"g\"), \"\")).length);\n                }\n                return digits.sort((a, b) => b - a).join(\"\");\n            };\n            \n            //Find largest possible square based on rearranging into largest possible number.\n            let charMap = {};\n            let largestUsed = 9;\n            for(let i = 0; i < s.length; i++) {\n                if(!charMap[s[i]]) {\n                    charMap[s[i]] = largestUsed;\n                    largestUsed--;\n                }\n            }\n            let largest = [];\n            for(let i = 0; i < s.length; i++) {\n                largest.push(charMap[s[i]]);\n            }\n            //Get the smallest and largest \"possible\" values to be squared.\n            let min = Number(\"1\" + Array(Math.floor((s.length - 1) / 2)).fill(0).join(\"\"));\n            let max = Math.ceil(Math.sqrt(Number(largest.sort((a,b) => b - a).join(\"\"))));\n            \n            //Get the count for each digit/character initially.\n            let digits = countDigits(s);\n            \n            //Go through each number, starting at the largest possible.\n            for(let i = max; i >= min; i--) {\n                //See if running countDigits on this number provides the same result as the input string.\n                if(countDigits(String(i * i)) === digits) return i * i;\n            }\n            \n            //No result was found that worked.\n            return -1; \n        }`,\n        code: function constructSquare(s) {\n            //Helper function to count occurances of each character.\n            let countDigits = str => {\n                let digits = [];\n                //Until we run out of characters\n                while(str.length) {\n                    //Save the first character\n                    let char = str[0];\n                    //Find the total number of times this character occurs, save that number(push) and remove those characters.\n                    digits.push(str.length - (str = str.replace(new RegExp(char, \"g\"), \"\")).length);\n                }\n                return digits.sort((a, b) => b - a).join(\"\");\n            };\n            \n            //Find largest possible square based on rearranging into largest possible number.\n            let charMap = {};\n            let largestUsed = 9;\n            for(let i = 0; i < s.length; i++) {\n                if(!charMap[s[i]]) {\n                    charMap[s[i]] = largestUsed;\n                    largestUsed--;\n                }\n            }\n            let largest = [];\n            for(let i = 0; i < s.length; i++) {\n                largest.push(charMap[s[i]]);\n            }\n            //Get the smallest and largest \"possible\" values to be squared.\n            let min = Number(\"1\" + Array(Math.floor((s.length - 1) / 2)).fill(0).join(\"\"));\n            let max = Math.ceil(Math.sqrt(Number(largest.sort((a,b) => b - a).join(\"\"))));\n            \n            //Get the count for each digit/character initially.\n            let digits = countDigits(s);\n            \n            //Go through each number, starting at the largest possible.\n            for(let i = max; i >= min; i--) {\n                //See if running countDigits on this number provides the same result as the input string.\n                if(countDigits(String(i * i)) === digits) return i * i;\n            }\n            \n            //No result was found that worked.\n            return -1; \n        },\n        arguments: {\n            descriptions: [\n                {\n                    text: \"Lowercase String\",\n                    type: \"String\"\n                }\n            ]\n        }\n    },\n    contoursShifting: {\n        name: 'contoursShifting',\n        instructions: `Mark got a rectangular array matrix for his birthday, and now he's thinking about all the fun things he can do with it. He likes shifting a lot, so he decides to shift all of its i-contours in a clockwise direction if i is even, and counterclockwise if i is odd.\n\n        Here is how Mark defines i-contours:\n        \n        the 0-contour of a rectangular array as the union of left and right columns as well as top and bottom rows;\n        consider the initial matrix without the 0-contour: its 0-contour is the 1-contour of the initial matrix;\n        define 2-contour, 3-contour, etc. in the same manner by removing 0-contours from the obtained arrays.\n        Implement a function that does exactly what Mark wants to do to his matrix.`,\n        codeOutput: \n        `function contoursShifting(matrix) {\n            //Helper function to shift array elements\n            const shiftElements = (elements, counterClockwise, rowWidth, colHeight) => {\n                //Put these elements into the correct order for rotation, ONLY if the elements are not coming in as one single row or one single column (in which case we use the same elements array values)\n                let elementsToShift = rowWidth > 1 && colHeight > 1 ? [\n                    ...elements.slice(0, rowWidth),\n                    ...elements.slice(rowWidth, elements.length - rowWidth).filter((element, index) => index % 2),\n                    ...elements.slice(rowWidth * -1).reverse(),\n                    ...elements.slice(rowWidth, elements.length - rowWidth).filter((element, index) => !(index % 2)).reverse()\n                ] : elements;\n                        \n                //Shift to the right if clockwise, otherwise to the left.\n                let removedElement = counterClockwise ? elementsToShift.shift() : elementsToShift.pop();\n                if(counterClockwise) {\n                    elementsToShift.push(removedElement);\n                } else {\n                    elementsToShift.unshift(removedElement);\n                }\n                        \n                //If the elements were rearranged, put them back into order in the same format as the input.\n                if(rowWidth > 1 && colHeight > 1) {\n                    //Find the values that will need to be reshuffled\n                    let sectionSize = (elementsToShift.length - (rowWidth * 2)) / 2;\n                    let section1 = elementsToShift.slice(rowWidth, rowWidth + sectionSize);\n                    let section2 = elementsToShift.slice(sectionSize * -1);\n                    //Reorder the scrambled sections.\n                    let reorderedSections = [];\n                    for(let i = 0; i < section1.length; i++) {\n                        reorderedSections.push(section2[section2.length - 1 - i]);\n                        reorderedSections.push(section1[i]);\n                    }\n                    //Return the reordered array.\n                    return [\n                        ...elementsToShift.slice(0, rowWidth),\n                        ...reorderedSections,\n                        ...elementsToShift.slice(rowWidth + sectionSize, (rowWidth + sectionSize) + rowWidth).reverse()\n                    ];\n                } \n                //Otherwise, return original array.\n                return elementsToShift;\n            };\n            \n            //Initial pointers to array indexes and dimension bounds\n            let start_i = 0; \n            let start_j = 0;\n            let height = matrix.length;\n            let width = matrix[0].length;\n            \n            //Loop through every 'rectangle' in order to extract values, pass to be rotated, and then replaced.\n            while(height >= 1 && width >= 1) {\n                //Extract the elements bordering this rectangle.\n                let elements = [];\n                //Loop over every row in the 'rectangle'\n                for(let i_offset = start_i; i_offset - start_i < height; i_offset++) {\n                    //Loop over every col in the 'rectangle'\n                    for(let j_offset = start_j; j_offset - start_j < width; j_offset++) {\n                        //If this is a top or bottom row, extract all elements.\n                        if(i_offset === start_i || \n                        i_offset === start_i + height - 1 ||\n                        j_offset === start_j ||\n                        j_offset === start_j + width - 1) {\n                            elements.push(matrix[i_offset][j_offset]);\n                        }\n                    }\n                }\n                \n                //Pass these elements, along with the direction value (0 or 1) and row width/height, to be shifted.\n                let shiftedElements = shiftElements(elements, start_i % 2, width, height);\n                        \n                //Traverse this rectangle again, replacing the elements.\n                //Loop over every row in the 'rectangle'\n                for(let i_offset = start_i; i_offset - start_i < height; i_offset++) {\n                    //Loop over every col in the 'rectangle'\n                    for(let j_offset = start_j; j_offset - start_j < width; j_offset++) {\n                        //If this is a top or bottom row, extract all elements.\n                        if(i_offset === start_i || \n                        i_offset === start_i + height - 1 ||\n                        j_offset === start_j ||\n                        j_offset === start_j + width - 1) {\n                            matrix[i_offset][j_offset] = shiftedElements.shift();\n                        }\n                    }\n                }\n                \n                //Update values and move on to next rectangle.\n                start_i++;\n                start_j++;\n                height -= 2;\n                width -= 2;\n            }\n            \n            //Return the final shifted matrix.\n            return matrix;\n        }`,\n        code: function contoursShifting(matrix) {\n            //Helper function to shift array elements\n            const shiftElements = (elements, counterClockwise, rowWidth, colHeight) => {\n                //Put these elements into the correct order for rotation, ONLY if the elements are not coming in as one single row or one single column (in which case we use the same elements array values)\n                let elementsToShift = rowWidth > 1 && colHeight > 1 ? [\n                    ...elements.slice(0, rowWidth),\n                    ...elements.slice(rowWidth, elements.length - rowWidth).filter((element, index) => index % 2),\n                    ...elements.slice(rowWidth * -1).reverse(),\n                    ...elements.slice(rowWidth, elements.length - rowWidth).filter((element, index) => !(index % 2)).reverse()\n                ] : elements;\n                        \n                //Shift to the right if clockwise, otherwise to the left.\n                let removedElement = counterClockwise ? elementsToShift.shift() : elementsToShift.pop();\n                if(counterClockwise) {\n                    elementsToShift.push(removedElement);\n                } else {\n                    elementsToShift.unshift(removedElement);\n                }\n                        \n                //If the elements were rearranged, put them back into order in the same format as the input.\n                if(rowWidth > 1 && colHeight > 1) {\n                    //Find the values that will need to be reshuffled\n                    let sectionSize = (elementsToShift.length - (rowWidth * 2)) / 2;\n                    let section1 = elementsToShift.slice(rowWidth, rowWidth + sectionSize);\n                    let section2 = elementsToShift.slice(sectionSize * -1);\n                    //Reorder the scrambled sections.\n                    let reorderedSections = [];\n                    for(let i = 0; i < section1.length; i++) {\n                        reorderedSections.push(section2[section2.length - 1 - i]);\n                        reorderedSections.push(section1[i]);\n                    }\n                    //Return the reordered array.\n                    return [\n                        ...elementsToShift.slice(0, rowWidth),\n                        ...reorderedSections,\n                        ...elementsToShift.slice(rowWidth + sectionSize, (rowWidth + sectionSize) + rowWidth).reverse()\n                    ];\n                } \n                //Otherwise, return original array.\n                return elementsToShift;\n            };\n            \n            //Initial pointers to array indexes and dimension bounds\n            let start_i = 0; \n            let start_j = 0;\n            let height = matrix.length;\n            let width = matrix[0].length;\n            \n            //Loop through every 'rectangle' in order to extract values, pass to be rotated, and then replaced.\n            while(height >= 1 && width >= 1) {\n                //Extract the elements bordering this rectangle.\n                let elements = [];\n                //Loop over every row in the 'rectangle'\n                for(let i_offset = start_i; i_offset - start_i < height; i_offset++) {\n                    //Loop over every col in the 'rectangle'\n                    for(let j_offset = start_j; j_offset - start_j < width; j_offset++) {\n                        //If this is a top or bottom row, extract all elements.\n                        if(i_offset === start_i || \n                        i_offset === start_i + height - 1 ||\n                        j_offset === start_j ||\n                        j_offset === start_j + width - 1) {\n                            elements.push(matrix[i_offset][j_offset]);\n                        }\n                    }\n                }\n                \n                //Pass these elements, along with the direction value (0 or 1) and row width/height, to be shifted.\n                let shiftedElements = shiftElements(elements, start_i % 2, width, height);\n                        \n                //Traverse this rectangle again, replacing the elements.\n                //Loop over every row in the 'rectangle'\n                for(let i_offset = start_i; i_offset - start_i < height; i_offset++) {\n                    //Loop over every col in the 'rectangle'\n                    for(let j_offset = start_j; j_offset - start_j < width; j_offset++) {\n                        //If this is a top or bottom row, extract all elements.\n                        if(i_offset === start_i || \n                        i_offset === start_i + height - 1 ||\n                        j_offset === start_j ||\n                        j_offset === start_j + width - 1) {\n                            matrix[i_offset][j_offset] = shiftedElements.shift();\n                        }\n                    }\n                }\n                \n                //Update values and move on to next rectangle.\n                start_i++;\n                start_j++;\n                height -= 2;\n                width -= 2;\n            }\n            \n            //Return the final shifted matrix.\n            return matrix;\n        },\n        arguments: {\n            descriptions: [\n                {\n                    text: \"Array of Integer Arrays (Form of [1,2,3], [1,2,3]... * One Space Between Arrays)\",\n                    type: \"NumberArrayArray\"\n                }\n            ]\n        }\n    },\n    correctNonogram: {\n        name: 'correctNonogram',\n        instructions: `A nonogram is also known as Paint by Numbers and Japanese Crossword. The aim in this puzzle is to color the grid into black and white squares. At the top of each column, and at the side of each row, there are sets of one or more numbers which describe the runs of black squares in that row/column in exact order. For example, if you see 10 1 along some column/row, this indicates that there will be a run of exactly ten black squares, followed by one or more white squares, followed by a single black square. The cells along the edges of the grid can also be white.\n\n        You are given a square nonogram of size size. Its grid is given as a square matrix nonogramField of size (size + 1) / 2 + size, where the first (size + 1) / 2 cells of each row and and each column define the numbers for the corresponding row/column, and the rest size × size cells define the the grid itself.\n        \n        Determine if the given nonogram has been solved correctly.`,\n        codeOutput: \n        `function correctNonogram(size, nonogramField) {\n            //Loop through each column of the nonogram, seeing if the rules defined in the first elements are followed in the rest of the grid itself.\n            for(let col = nonogramField[0].length - size; col < nonogramField[0].length; col++) {\n                //Keep track of the 'rules' in the form of the number of # to be expected in each group.\n                let rules = [];\n                //If inside of a # group, keep track of the number found.\n                let inGroup = false;\n                let groupCount = 0;\n                //Loop over each row of this column index.\n                for(let row = 0; row < nonogramField.length; row++) {\n                    //If this is a number, add to the rules.\n                    if(!isNaN(nonogramField[row][col])) rules.push(nonogramField[row][col]);\n                    //If this is a #, track to see if there are the correct number of # together.\n                    if(nonogramField[row][col] === \"#\") {\n                        inGroup = true;\n                        groupCount++;\n                    } else if(nonogramField[row][col] === \".\") {\n                        //If there is a group counted, see if it follows the current rule.\n                        if(groupCount > 0) {\n                            if(rules[0] != groupCount) {\n                                //Exit the function if the rule isn't followed by this group.\n                                return false;\n                            }\n                            //Get rid of this rule, since it was used and now passed.\n                            rules.shift();\n                            //Reset group count.\n                            groupCount = 0;\n                        }\n                    }\n                    //If this is the end and not all groups are accounted for, verify now.\n                    if(row === nonogramField.length - 1 && groupCount) {\n                        //If there is a group count but no rules left, return early.\n                        if(!rules.length) return false;\n                        //Otherwise, verify that the rule is followed.\n                        if(rules[0] != groupCount) return false;\n                        //Clear the (hopefully last) rule.\n                        rules.shift();\n                        //If there are still rules left, this isn't a valid column.\n                        if(rules.length) return false;\n                    } \n                }\n            }\n            \n            //Loop through each row of the nonogram, seeing if the rules defined in the first elements are followed in the rest of the grid itself.\n            for(let row = nonogramField.length - size; row < nonogramField.length; row++) {\n                //Keep track of the 'rules' in the form of the number of # to be expected in each group.\n                let rules = [];\n                //If inside of a # group, keep track of the number found.\n                let inGroup = false;\n                let groupCount = 0;\n                console.log(\"Looping over row \" + row); \n                //Loop over each row of this column index.\n                for(let col = 0; col < nonogramField[row].length; col++) {\n                    //If this is a number, add to the rules.\n                    if(!isNaN(nonogramField[row][col])) rules.push(nonogramField[row][col]);\n                    //If this is a #, track to see if there are the correct number of # together.\n                    if(nonogramField[row][col] === \"#\") {\n                        inGroup = true;\n                        groupCount++;\n                    } else if(nonogramField[row][col] === \".\") {\n                        //If there is a group counted, see if it follows the current rule.\n                        if(groupCount > 0) {\n                            if(rules[0] != groupCount) {\n                                //Exit the function if the rule isn't followed by this group.\n                                return false;\n                            }\n                            //Get rid of this rule, since it was used and now passed.\n                            rules.shift();\n                            //Reset group count.\n                            groupCount = 0;\n                        }\n                    }\n                    //If this is the end and not all groups are accounted for, verify now.\n                    if(col === nonogramField[0].length - 1 && groupCount) {\n                        //If there is a group count but no rules left, return early.\n                        if(!rules.length) return false;\n                        //Otherwise, verify that the rule is followed.\n                        if(rules[0] != groupCount) return false;\n                        //Clear the (hopefully last) rule.\n                        rules.shift();\n                        //If there are still rules left, this isn't a valid column.\n                        if(rules.length) return false;\n                    } \n                }\n            }\n            \n            return true;\n        }`,\n        code: function correctNonogram(size, nonogramField) {\n            //Loop through each column of the nonogram, seeing if the rules defined in the first elements are followed in the rest of the grid itself.\n            for(let col = nonogramField[0].length - size; col < nonogramField[0].length; col++) {\n                //Keep track of the 'rules' in the form of the number of # to be expected in each group.\n                let rules = [];\n                //If inside of a # group, keep track of the number found.\n                let inGroup = false;\n                let groupCount = 0;\n                //Loop over each row of this column index.\n                for(let row = 0; row < nonogramField.length; row++) {\n                    //If this is a number, add to the rules.\n                    if(!isNaN(nonogramField[row][col])) rules.push(nonogramField[row][col]);\n                    //If this is a #, track to see if there are the correct number of # together.\n                    if(nonogramField[row][col] === \"#\") {\n                        inGroup = true;\n                        groupCount++;\n                    } else if(nonogramField[row][col] === \".\") {\n                        //If there is a group counted, see if it follows the current rule.\n                        if(groupCount > 0) {\n                            if(rules[0] != groupCount) {\n                                //Exit the function if the rule isn't followed by this group.\n                                return false;\n                            }\n                            //Get rid of this rule, since it was used and now passed.\n                            rules.shift();\n                            //Reset group count.\n                            groupCount = 0;\n                        }\n                    }\n                    //If this is the end and not all groups are accounted for, verify now.\n                    if(row === nonogramField.length - 1 && groupCount) {\n                        //If there is a group count but no rules left, return early.\n                        if(!rules.length) return false;\n                        //Otherwise, verify that the rule is followed.\n                        if(rules[0] != groupCount) return false;\n                        //Clear the (hopefully last) rule.\n                        rules.shift();\n                        //If there are still rules left, this isn't a valid column.\n                        if(rules.length) return false;\n                    } \n                }\n            }\n            \n            //Loop through each row of the nonogram, seeing if the rules defined in the first elements are followed in the rest of the grid itself.\n            for(let row = nonogramField.length - size; row < nonogramField.length; row++) {\n                //Keep track of the 'rules' in the form of the number of # to be expected in each group.\n                let rules = [];\n                //If inside of a # group, keep track of the number found.\n                let inGroup = false;\n                let groupCount = 0;\n                console.log(\"Looping over row \" + row); \n                //Loop over each row of this column index.\n                for(let col = 0; col < nonogramField[row].length; col++) {\n                    //If this is a number, add to the rules.\n                    if(!isNaN(nonogramField[row][col])) rules.push(nonogramField[row][col]);\n                    //If this is a #, track to see if there are the correct number of # together.\n                    if(nonogramField[row][col] === \"#\") {\n                        inGroup = true;\n                        groupCount++;\n                    } else if(nonogramField[row][col] === \".\") {\n                        //If there is a group counted, see if it follows the current rule.\n                        if(groupCount > 0) {\n                            if(rules[0] != groupCount) {\n                                //Exit the function if the rule isn't followed by this group.\n                                return false;\n                            }\n                            //Get rid of this rule, since it was used and now passed.\n                            rules.shift();\n                            //Reset group count.\n                            groupCount = 0;\n                        }\n                    }\n                    //If this is the end and not all groups are accounted for, verify now.\n                    if(col === nonogramField[0].length - 1 && groupCount) {\n                        //If there is a group count but no rules left, return early.\n                        if(!rules.length) return false;\n                        //Otherwise, verify that the rule is followed.\n                        if(rules[0] != groupCount) return false;\n                        //Clear the (hopefully last) rule.\n                        rules.shift();\n                        //If there are still rules left, this isn't a valid column.\n                        if(rules.length) return false;\n                    } \n                }\n            }\n            \n            return true;\n        },\n        arguments: {\n            descriptions: [\n                {\n                    text: \"Size (Positive Integer)\",\n                    type: \"Number\"\n                },\n                {\n                    text: 'Nonogram Field (Example: [\"-\",\"-\",\"-\",\"-\",\"-\",\"-\",\"-\",\"-\"], [\"-\",\"-\",\"-\",\"2\",\"2\",\"1\",\"-\",\"1\"], [\"-\",\"-\",\"-\",\"2\",\"1\",\"1\",\"3\",\"3\"], [\"-\",\"3\",\"1\",\"#\",\"#\",\"#\",\".\",\"#\"], [\"-\",\"-\",\"2\",\"#\",\"#\",\".\",\".\",\".\"], [\"-\",\"-\",\"2\",\".\",\".\",\".\",\"#\",\"#\"], [\"-\",\"1\",\"2\",\"#\",\".\",\".\",\"#\",\"#\"], [\"-\",\"-\",\"5\",\"#\",\"#\",\"#\",\"#\",\"#\"])',\n                    type: \"ArrayArray\"\n                }\n            ]\n        }\n    },\n    countSumOfTwoRepresentations2: {\n        name: 'countSumOfTwoRepresentations2',\n        instructions: `Given integers n, l and r, find the number of ways to represent n as a sum of two integers A and B such that l ≤ A ≤ B ≤ r.`,\n        codeOutput: \n        `function countSumOfTwoRepresentations2(n, l, r) {\n            //Keep track of number of working sums.\n            count = 0;\n            //Check if l or r are too large/small and adjust them if needed.\n            if(l + r < n) {\n                l = n - r;\n            } else if(l + r > n) {\n                r = n - l;\n            }\n            //Continue to narrow down l and r until they are equal or l is no longer less than r.\n            while(l <= r) {\n                count++;\n                l++;\n                r--;\n            }\n            return count;\n        }`,\n        code: function countSumOfTwoRepresentations2(n, l, r) {\n            //Keep track of number of working sums.\n            let count = 0;\n            //Check if l or r are too large/small and adjust them if needed.\n            if(l + r < n) {\n                l = n - r;\n            } else if(l + r > n) {\n                r = n - l;\n            }\n            //Continue to narrow down l and r until they are equal or l is no longer less than r.\n            while(l <= r) {\n                count++;\n                l++;\n                r--;\n            }\n            return count;\n        },\n        arguments: {\n            descriptions: [\n                {\n                    text: \"Number to Represent n\",\n                    type: \"Number\"\n                },\n                {\n                    text: \"Number to Represent l\",\n                    type: \"Number\"\n                },\n                {\n                    text: \"Number to Represent r\",\n                    type: \"Number\"\n                }\n            ]\n        }\n    },\n    createAnagram: {\n        name: 'createAnagram',\n        instructions: `You are given two strings s and t of the same length, consisting of uppercase English letters. Your task is to find the minimum number of \"replacement operations\" needed to get some anagram of the string t from the string s. A replacement operation is performed by picking exactly one character from the string s and replacing it by some other character.`,\n        codeOutput: \n        `function createAnagram(s, t) {\n            //Create character maps for each string.\n            let sMap = {};\n            let tMap = {};\n            for(let i = 0; i < s.length; i++) {\n                if(sMap[s[i]]) {\n                    sMap[s[i]]++;\n                } else {\n                    sMap[s[i]] = 1;\n                }\n            }\n            for(let i = 0; i < t.length; i++) {\n                if(tMap[t[i]]) {\n                    tMap[t[i]]++;\n                } else {\n                    tMap[t[i]] = 1;\n                }\n            }\n            //Keep track of characters to add or remove.\n            let charsToAdd = [];\n            let charsToRemove = [];\n            for(let character in tMap) {\n                //If a character exists in the first string, add it to the correct array the correct number of times.\n                if(sMap[character]) {\n                    if(tMap[character] - sMap[character] < 0) {\n                        for(let i = 0; i < Math.abs(tMap[character] - sMap[character]); i++) {\n                            charsToRemove.push(character);\n                        }\n                    } else if(tMap[character] - sMap[character] > 0) {\n                        for(let i = 0; i < tMap[character] - sMap[character]; i++) {\n                            charsToAdd.push(character);\n                        }\n                    }\n                    //If this character isn't in the first string, we know we need to add it.\n                } else {\n                    for(let i = 0; i < tMap[character]; i++) {\n                        charsToAdd.push(character);\n                    }\n                }\n            }\n          \n            //If both arrays have the same length, divide the total by 2. Otherwise, return the size of the array of characters needed to be added.\n            return charsToAdd.length === charsToRemove.length ? \n            Math.floor((charsToAdd.length + charsToRemove.length) / 2) :\n            Math.floor(charsToAdd.length);\n        }`,\n        code: function createAnagram(s, t) {\n            //Create character maps for each string.\n            let sMap = {};\n            let tMap = {};\n            for(let i = 0; i < s.length; i++) {\n                if(sMap[s[i]]) {\n                    sMap[s[i]]++;\n                } else {\n                    sMap[s[i]] = 1;\n                }\n            }\n            for(let i = 0; i < t.length; i++) {\n                if(tMap[t[i]]) {\n                    tMap[t[i]]++;\n                } else {\n                    tMap[t[i]] = 1;\n                }\n            }\n            //Keep track of characters to add or remove.\n            let charsToAdd = [];\n            let charsToRemove = [];\n            for(let character in tMap) {\n                //If a character exists in the first string, add it to the correct array the correct number of times.\n                if(sMap[character]) {\n                    if(tMap[character] - sMap[character] < 0) {\n                        for(let i = 0; i < Math.abs(tMap[character] - sMap[character]); i++) {\n                            charsToRemove.push(character);\n                        }\n                    } else if(tMap[character] - sMap[character] > 0) {\n                        for(let i = 0; i < tMap[character] - sMap[character]; i++) {\n                            charsToAdd.push(character);\n                        }\n                    }\n                    //If this character isn't in the first string, we know we need to add it.\n                } else {\n                    for(let i = 0; i < tMap[character]; i++) {\n                        charsToAdd.push(character);\n                    }\n                }\n            }\n          \n            //If both arrays have the same length, divide the total by 2. Otherwise, return the size of the array of characters needed to be added.\n            return charsToAdd.length === charsToRemove.length ? \n            Math.floor((charsToAdd.length + charsToRemove.length) / 2) :\n            Math.floor(charsToAdd.length);\n        },\n        arguments: {\n            descriptions: [\n                {\n                    text: \"String 's' (Uppercase English Letters)\",\n                    type: \"String\"\n                },\n                {\n                    text: \"String 't' (Uppercase English Letters)\",\n                    type: \"String\"\n                }\n            ]\n        }\n    },\n    crossingSum: {\n        name: 'crossingSum',\n        instructions: `Given a rectangular matrix and integers a and b, consider the union of the ath row and the bth (both 0-based) column of the matrix (i.e. all cells that belong either to the ath row or to the bth column, or to both). Return sum of all elements of that union.`,\n        codeOutput: \n        `function crossingSum(matrix, a, b) {\n            //First, add the entire row at index a, then loop through all the columns (index b) except for the one that matches a (to avoid duplicate) and add the sums together.\n            return matrix[a].reduce((sum, current) => sum += current, 0) + \n                   matrix.reduce((sum, current, arrayIndex) => {\n                       if(arrayIndex !== a) return sum += current[b];\n                       return sum;\n                   }, 0);\n        }`,\n        code: function crossingSum(matrix, a, b) {\n            //First, add the entire row at index a, then loop through all the columns (index b) except for the one that matches a (to avoid duplicate) and add the sums together.\n            return matrix[a].reduce((sum, current) => sum += current, 0) + \n                   matrix.reduce((sum, current, arrayIndex) => {\n                       if(arrayIndex !== a) return sum += current[b];\n                       return sum;\n                   }, 0);\n        },\n        arguments: {\n            descriptions: [\n                {\n                    text: \"Array of Integer Arrays (Form of [1,2,3], [1,2,3]... * One Space Between Arrays)\",\n                    type: \"NumberArrayArray\"\n                },\n                {\n                    text: \"Integer 'a'\",\n                    type: \"Number\"\n                },\n                {\n                    text: \"Integer 'b'\",\n                    type: \"Number\"\n                }\n            ]\n        }\n    },\n    crosswordFormation: {\n        name: 'crosswordFormation',\n        instructions: `You're a crossword fanatic, and have finally decided to try and create your own. However, you also love symmetry and good design, so you come up with a set of rules they should follow:\n\n        the crossword must contain exactly four words;\n        these four words should form four pairwise intersections;\n        all words must be written either left-to-right or top-to-bottom;\n        the area of the rectangle formed by empty cells inside the intersections isn't equal to zero.\n        Given 4 words, find the number of ways to make a crossword following the above-described rules. Note that two crosswords which differ by rotation are considered different.`,\n        codeOutput: \n        `function crosswordFormation(words) {\n            let workingCrossword = 0;\n            \n            //Loop through each possible combination of 4 words to see if it works.\n            for (let first = 0; first < words.length; first++) {\n                for (let second = 0; second < words.length; second++) {\n                    for (let third = 0; third < words.length; third++) {\n                        for (let fourth = 0; fourth < words.length; fourth++) {\n                            if (first != second && first != third && first != fourth && \n                                second != third && second != fourth && third != fourth) {\n                                    workingCrossword += check(words[first],words[second],words[third],words[fourth]); \n                            }\n                        }\n                    } \n                }\n            }\n            \n            return workingCrossword;\n        \n            function check (firstWord, secondWord, thirdWord, fourthWord) {\n                let total = 0;\n                //Loop through indexes of the first word that are 2 away from each other.\n                for (let firstWord_1 = 0; firstWord_1 < firstWord.length; firstWord_1++) {\n                    for (let firstWord_2 = firstWord_1 + 2; firstWord_2 < firstWord.length; firstWord_2++) {\n                        \n                        //Loop through indexes of the second word that are two away from each other.\n                        for (let secondWord_1 = 0; secondWord_1 < secondWord.length; secondWord_1++) {\n                            for (let secondWord_2 = secondWord_1 + 2; secondWord_2 < secondWord.length; secondWord_2++) {\n                                \n                                //Loop through indexes of the third word.\n                                for (let thirdWord_1 = 0; thirdWord_1 < thirdWord.length; thirdWord_1++) {\n                                    //For each index of the third word, loop through each index of the fourth word.\n                                    for (let fourthWord_1 = 0; fourthWord_1 < fourthWord.length; fourthWord_1++) {\n                                        \n                                        //Indexes of the 'pair' for third and fourth words will essentially loop around.\n                                        let thirdWord_2 = thirdWord_1 + (firstWord_2 - firstWord_1);\n                                        let fourthWord_2 = fourthWord_1 + (secondWord_2 - secondWord_1);\n                                        \n                                        //As long as we are not at the end of the third and fourth words\n                                        if (thirdWord_2 < thirdWord.length && fourthWord_2 < fourthWord.length) {\n                                            //Check if the characters at the current positions match where they should be in their 'partner' words.\n                                            //If so, this is a working game.\n                                            if (firstWord.charAt(firstWord_1) == secondWord.charAt(secondWord_1)\n                                            && firstWord.charAt(firstWord_2) == fourthWord.charAt(fourthWord_1)\n                                            && thirdWord.charAt(thirdWord_1) == secondWord.charAt(secondWord_2)\n                                            && thirdWord.charAt(thirdWord_2) == fourthWord.charAt(fourthWord_2)) total++;\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n                return total;\n            }\n        }`,\n        code: function crosswordFormation(words) {\n            let workingCrossword = 0;\n            \n            //Loop through each possible combination of 4 words to see if it works.\n            for (let first = 0; first < words.length; first++) {\n                for (let second = 0; second < words.length; second++) {\n                    for (let third = 0; third < words.length; third++) {\n                        for (let fourth = 0; fourth < words.length; fourth++) {\n                            if (first != second && first != third && first != fourth && \n                                second != third && second != fourth && third != fourth) {\n                                    workingCrossword += check(words[first],words[second],words[third],words[fourth]); \n                            }\n                        }\n                    } \n                }\n            }\n            \n            return workingCrossword;\n        \n            function check (firstWord, secondWord, thirdWord, fourthWord) {\n                let total = 0;\n                //Loop through indexes of the first word that are 2 away from each other.\n                for (let firstWord_1 = 0; firstWord_1 < firstWord.length; firstWord_1++) {\n                    for (let firstWord_2 = firstWord_1 + 2; firstWord_2 < firstWord.length; firstWord_2++) {\n                        \n                        //Loop through indexes of the second word that are two away from each other.\n                        for (let secondWord_1 = 0; secondWord_1 < secondWord.length; secondWord_1++) {\n                            for (let secondWord_2 = secondWord_1 + 2; secondWord_2 < secondWord.length; secondWord_2++) {\n                                \n                                //Loop through indexes of the third word.\n                                for (let thirdWord_1 = 0; thirdWord_1 < thirdWord.length; thirdWord_1++) {\n                                    //For each index of the third word, loop through each index of the fourth word.\n                                    for (let fourthWord_1 = 0; fourthWord_1 < fourthWord.length; fourthWord_1++) {\n                                        \n                                        //Indexes of the 'pair' for third and fourth words will essentially loop around.\n                                        let thirdWord_2 = thirdWord_1 + (firstWord_2 - firstWord_1);\n                                        let fourthWord_2 = fourthWord_1 + (secondWord_2 - secondWord_1);\n                                        \n                                        //As long as we are not at the end of the third and fourth words\n                                        if (thirdWord_2 < thirdWord.length && fourthWord_2 < fourthWord.length) {\n                                            //Check if the characters at the current positions match where they should be in their 'partner' words.\n                                            //If so, this is a working game.\n                                            if (firstWord.charAt(firstWord_1) == secondWord.charAt(secondWord_1)\n                                            && firstWord.charAt(firstWord_2) == fourthWord.charAt(fourthWord_1)\n                                            && thirdWord.charAt(thirdWord_1) == secondWord.charAt(secondWord_2)\n                                            && thirdWord.charAt(thirdWord_2) == fourthWord.charAt(fourthWord_2)) total++;\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n                return total;\n            }\n        },\n        arguments: {\n            descriptions: [\n                {\n                    text: \"Array of Strings (No Brackets [], Quotes, or Spaces Between Strings)\",\n                    type: \"StringArray\"\n                }\n            ]\n        }\n    },\n    curiousClock: {\n        name: 'curiousClock',\n        instructions: `Benjamin recently bought a digital clock at a magic trick shop. The seller never told Ben what was so special about it, but mentioned that one day Benjamin would be faced with a surprise.\n\n        Indeed, the clock did surprise Benjamin: without warning, at someTime the clock suddenly started going in the opposite direction! Unfortunately, Benjamin has an important meeting very soon, and knows that at leavingTime he should leave the house so as to not be late. Ben spent all his money on the clock, so has to figure out what time his clock will show when it's time to leave.\n        \n        Given the someTime at which the clock started to go backwards, find out what time will be shown on the curious clock at leavingTime.`,\n        codeOutput: \n        `function curiousClock(someTime, leavingTime) {\n            //Array to keep track of month lengths\n            let monthLengths = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n            let monthMinutes = [44640, 40320, 44640, 43200, 44640, 43200, 44640, 44640, 43200, 44640, 43200, 44640];\n            //Convert an input string into minutes.\n            const convertToMins = timeString => {\n                //Split this date into units.\n                let timeUnits = timeString.split(\" \").map((string, index) => {\n                    let items = [];\n                    if(index === 0) {\n                        items = string.split(\"-\");\n                    } else if(index === 1) {\n                        items = string.split(\":\");\n                    }\n                    return items;\n                //Remove array nesting and map to numbers.\n                }).flat().map(str => Number(str));        \n                \n                //Convert each unit to minutes.\n                let totalMinutes = \n                //Convert the year to minutes (since Jan 1, 1901 up until Jan 1 of this year)\n                (525600 * (timeUnits[0] - 1901)) + \n                //Account for extra minutes in leap years between \n                (1440 * (Math.floor((timeUnits[0] - 1901) / 4))) +\n                //Find the number of minutes in all months leading up to the current month\n                (monthMinutes.slice(0, timeUnits[1] - 1).reduce((a, b) => a += b, 0)) + \n                //Find the number of minutes in all days leading up to the current day\n                (1440 * (timeUnits[2] - 1)) + \n                //Find the number of minutes in all hours leading up to the current hour\n                (60 * timeUnits[3]) + \n                //Add remaining minutes\n                (timeUnits[4]) +\n                //If this is a leap year and leap day already passed, add in the extra leap day minutes\n                (timeUnits[0] % 4 === 0 && timeUnits[1] > 2 ? 1440 : 0);\n                        \n                return totalMinutes;\n            };\n            \n            const convertToString = minutesInput => { \n                //Track the minutes left to convert to other units.\n                let minutesLeft = minutesInput;\n                //Extract the minutes\n                let mins = minutesLeft % 60;\n                minutesLeft -= mins;\n                //Extract the hours\n                let hours = (minutesLeft % 1440);\n                minutesLeft -= hours;\n                hours /= 60;\n                //Extract the years and remove leap days.\n                let years = Math.floor(minutesLeft / 525600);\n                let numLeapDays = Math.floor(years / 4);\n                minutesLeft -= (525600 * years);\n                years += 1901;\n                minutesLeft -= (numLeapDays * 1440);\n                //Extract the months.\n                let monthSum = 0;\n                let monthIndex = 0;\n                //Incrementally add each month's minutes to a total until the current minutes left is reached.\n                while(monthSum + monthMinutes[monthIndex] <= minutesLeft) {\n                    monthSum += monthMinutes[monthIndex];\n                    monthIndex++;\n                }\n                let months = monthIndex + 1;\n                minutesLeft -= monthSum;\n                //Extract the date\n                let day = minutesLeft / 1440;\n                //Determine if a day needs to be accounted for (leap day)\n                if(years % 4 || (!(years % 4) && months < 3)) day++;\n                \n                //Format output.\n                return \\`\\${years}-\\${months < 10 ? \n                \\`0\\${months}\\` : \n                \\`\\${months}\\`}-\\${day < 10 ?\n                \\`0\\${day}\\` :\n                \\`\\${day}\\`} \\${hours < 10 ? \n                \\`0\\${hours}\\` :\n                \\`\\${hours}\\`}:\\${mins < 10 ?\n                \\`0\\${mins}\\` :\n                \\`\\${mins}\\`}\\`;\n            };\n            \n            //Find the difference between someTime and leavingTime\n            let someTimeMins = convertToMins(someTime);\n            let leavingTimeMins = convertToMins(leavingTime);\n            let timeDifference = leavingTimeMins - someTimeMins;\n            \n            //Convert these minutes back to a string.\n            let benTimeMins = someTimeMins - timeDifference;\n            return convertToString(benTimeMins);\n        }`,\n        code: function curiousClock(someTime, leavingTime) {\n            //Array to keep track of month lengths\n            let monthLengths = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n            let monthMinutes = [44640, 40320, 44640, 43200, 44640, 43200, 44640, 44640, 43200, 44640, 43200, 44640];\n            //Convert an input string into minutes.\n            const convertToMins = timeString => {\n                //Split this date into units.\n                let timeUnits = timeString.split(\" \").map((string, index) => {\n                    let items = [];\n                    if(index === 0) {\n                        items = string.split(\"-\");\n                    } else if(index === 1) {\n                        items = string.split(\":\");\n                    }\n                    return items;\n                //Remove array nesting and map to numbers.\n                }).flat().map(str => Number(str));        \n                \n                //Convert each unit to minutes.\n                let totalMinutes = \n                //Convert the year to minutes (since Jan 1, 1901 up until Jan 1 of this year)\n                (525600 * (timeUnits[0] - 1901)) + \n                //Account for extra minutes in leap years between \n                (1440 * (Math.floor((timeUnits[0] - 1901) / 4))) +\n                //Find the number of minutes in all months leading up to the current month\n                (monthMinutes.slice(0, timeUnits[1] - 1).reduce((a, b) => a += b, 0)) + \n                //Find the number of minutes in all days leading up to the current day\n                (1440 * (timeUnits[2] - 1)) + \n                //Find the number of minutes in all hours leading up to the current hour\n                (60 * timeUnits[3]) + \n                //Add remaining minutes\n                (timeUnits[4]) +\n                //If this is a leap year and leap day already passed, add in the extra leap day minutes\n                (timeUnits[0] % 4 === 0 && timeUnits[1] > 2 ? 1440 : 0);\n                        \n                return totalMinutes;\n            };\n            \n            const convertToString = minutesInput => { \n                //Track the minutes left to convert to other units.\n                let minutesLeft = minutesInput;\n                //Extract the minutes\n                let mins = minutesLeft % 60;\n                minutesLeft -= mins;\n                //Extract the hours\n                let hours = (minutesLeft % 1440);\n                minutesLeft -= hours;\n                hours /= 60;\n                //Extract the years and remove leap days.\n                let years = Math.floor(minutesLeft / 525600);\n                let numLeapDays = Math.floor(years / 4);\n                minutesLeft -= (525600 * years);\n                years += 1901;\n                minutesLeft -= (numLeapDays * 1440);\n                //Extract the months.\n                let monthSum = 0;\n                let monthIndex = 0;\n                //Incrementally add each month's minutes to a total until the current minutes left is reached.\n                while(monthSum + monthMinutes[monthIndex] <= minutesLeft) {\n                    monthSum += monthMinutes[monthIndex];\n                    monthIndex++;\n                }\n                let months = monthIndex + 1;\n                minutesLeft -= monthSum;\n                //Extract the date\n                let day = minutesLeft / 1440;\n                //Determine if a day needs to be accounted for (leap day)\n                if(years % 4 || (!(years % 4) && months < 3)) day++;\n                \n                //Format output.\n                return `${years}-${months < 10 ? \n                `0${months}` : \n                `${months}`}-${day < 10 ?\n                `0${day}` :\n                `${day}`} ${hours < 10 ? \n                `0${hours}` :\n                `${hours}`}:${mins < 10 ?\n                `0${mins}` :\n                `${mins}`}`;\n            };\n            \n            //Find the difference between someTime and leavingTime\n            let someTimeMins = convertToMins(someTime);\n            let leavingTimeMins = convertToMins(leavingTime);\n            let timeDifference = leavingTimeMins - someTimeMins;\n            \n            //Convert these minutes back to a string.\n            let benTimeMins = someTimeMins - timeDifference;\n            return convertToString(benTimeMins);\n        },\n        arguments: {\n            descriptions: [\n                {\n                    text: \"Time: Date/Time String (24-Hour Form of YYYY-MM-DD HH:MM)\",\n                    type: \"String\"\n                },\n                {\n                    text: \"Leaving Time: Date/Time String (24-Hour Form of YYYY-MM-DD HH:MM)\",\n                    type: \"String\"\n                }\n            ]\n        }\n    },\n    cyclicString: {\n        name: 'cyclicString',\n        instructions: `You're given a substring s of some cyclic string. What's the length of the smallest possible string that can be concatenated to itself many times to obtain this cyclic string?\n\n        Example\n        \n        For s = \"cabca\", the output should be\n        cyclicString(s) = 3.\n        \n        \"cabca\" is a substring of a cycle string \"abcabcabcabc...\" that can be obtained by concatenating \"abc\" to itself. Thus, the answer is 3.`,\n        codeOutput: \n        `function cyclicString(s) {\n            let lengths = [];\n            //Start building string(s) to be repeated\n            for(let i = 0; i < s.length; i++) {    \n                //Build up the string starting at this point\n                let subString = \"\";\n                for(let j = i; j < s.length; j++) {\n                    subString += s[j];\n                    //See if this string, when repeated, creates the target string.\n                    let repeatedString = \"\";\n                    //Using the current sub-string, continue to build a repeated string and see if 's' is a part of it.\n                    while(repeatedString.length <= s.length + subString.length) {\n                        repeatedString += subString;\n                        if(repeatedString.includes(s)) {\n                            //If we find a match, push this length and continue on.\n                            lengths.push(subString.length);\n                            break;\n                        }\n                    }\n                }\n            }\n            //Return the length of the smallest combination.\n            return Math.min(...lengths);\n        }`,\n        code: function cyclicString(s) {\n            let lengths = [];\n            //Start building string(s) to be repeated\n            for(let i = 0; i < s.length; i++) {    \n                //Build up the string starting at this point\n                let subString = \"\";\n                for(let j = i; j < s.length; j++) {\n                    subString += s[j];\n                    //See if this string, when repeated, creates the target string.\n                    let repeatedString = \"\";\n                    //Using the current sub-string, continue to build a repeated string and see if 's' is a part of it.\n                    while(repeatedString.length <= s.length + subString.length) {\n                        repeatedString += subString;\n                        if(repeatedString.includes(s)) {\n                            //If we find a match, push this length and continue on.\n                            lengths.push(subString.length);\n                            break;\n                        }\n                    }\n                }\n            }\n            //Return the length of the smallest combination.\n            return Math.min(...lengths);\n        },\n        arguments: {\n            descriptions: [\n                {\n                    text: \"Input String\",\n                    type: \"String\"\n                }\n            ]\n        }\n    }\n};\n\nexport default challenges;\n\n/*\n\nTemplate:\n\nname: {\n    name: ``,\n    instructions: ``,\n    codeOutput: \n    ``,\n    code: ,\n    arguments: {\n        descriptions: [\n            {\n                text: \"\",\n                type: \"\"\n            }\n        ]\n    }\n}\n\nType List:\nNumber\nString\nNumber Array \nString Array\nNumber Array Array\nString Array Array \n\n*/","//Include global BigInt (as comment) in order to prevent no-undef in this environment.\n/* global BigInt */\n\nconst challenges_d_f = {\n    dayOfWeek: {\n        name: 'dayOfWeek',\n        instructions: `Whenever you decide to celebrate your birthday you always do this your favorite café, which is quite popular and as such usually very crowded. This year you got lucky: when you and your friend enter the café you're surprised to see that it's almost empty. The waiter lets slip that there are always very few people on this day of the week.\n\n        You enjoyed having the café all to yourself, and are now curious about the next time you'll be this lucky. Given the current birthdayDate, determine the number of years until it will fall on the same day of the week.\n        \n        For your convenience, here is the list of months lengths (from January to December, respectively):\n        \n        Months lengths: 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31.\n        Please, note that in leap years February has 29 days. If your birthday is on the 29th of February, you celebrate it once in four years. Otherwise you birthday is celebrated each year`,\n        codeOutput: \n        `function dayOfWeek(birthdayDate) {\n            //Helper function to find the total number of days in a current date.\n            const findDays = date => {\n                //Days array to define which day it currently is\n                let days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n                //Keep track of number of days in each month\n                let monthLengths = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n                \n                //Parse out the date.\n                let currentDate = date.split(\"-\").map(str => Number(str));\n                \n                //If this is not a leap year, yet the day is 29, return. \n                if((currentDate[0] === 2 && currentDate[1] === 29 && (currentDate[2] - 1900) % 4)) {\n                    return \"Not Leap\";\n                }\n                //If this date is 2/29 on a non-leap year divisible by 100, return (ignore 1900 due to guaranteed constraints)\n                if(currentDate[0] === 2 && currentDate[1] === 29 && currentDate[2] % 400 && !(currentDate[2] % 100) && currentDate[2] > 1900) {\n                    return \"Not Leap\"\n                }\n                \n                //Convert the date into the total days since Jan 1, 1900.\n                //Add up the total number of days in the months that have passed.\n                let totalDays = monthLengths.slice(0, currentDate[0] - 1).reduce((a, b) => a += b, 0) +\n                //Add the number of days passed in the current month.\n                currentDate[1] + \n                //Add the number of days passed in every previous standard year.\n                ((currentDate[2] - 1900) * 365) +\n                //Add the number of leap year extra days.\n                Math.floor((currentDate[2] - 1900) / 4)  -\n                //If the current year is a leap year, and the date is not yet Feb 29, remove one leap day\n                (((currentDate[2] - 1900) % 4 === 0) && (currentDate[0] < 3) && ((currentDate[2] - 1900) / 4 >= 1) ? \n                1 :\n                0) -\n                //If we are currently counting after 2100, delete one more leap year\n                (currentDate[2] >= 2100 && currentDate[1] > 2 ? 1 : 0);\n                return days[totalDays % 7];\n            };\n            \n            //Keep track of the day we want to find as well as the next year's date to check.\n            let dayToFind = findDays(birthdayDate);\n            let nextDate = birthdayDate;\n            //Count the years that have passed.\n            let totalYears = 0;\n            \n            //Keep counting until the number of years is reached.\n            while(dayToFind !== findDays(nextDate) || !totalYears) {\n                totalYears++;\n                let nextDateArray = nextDate.split(\"-\");\n                nextDateArray[2]++;\n                nextDate = nextDateArray.join(\"-\");\n            }\n            \n            return totalYears; \n        }`,\n        code: function dayOfWeek(birthdayDate) {\n            //Helper function to find the total number of days in a current date.\n            const findDays = date => {\n                //Days array to define which day it currently is\n                let days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n                //Keep track of number of days in each month\n                let monthLengths = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n                \n                //Parse out the date.\n                let currentDate = date.split(\"-\").map(str => Number(str));\n                \n                //If this is not a leap year, yet the day is 29, return. \n                if((currentDate[0] === 2 && currentDate[1] === 29 && (currentDate[2] - 1900) % 4)) {\n                    return \"Not Leap\";\n                }\n                //If this date is 2/29 on a non-leap year divisible by 100, return (ignore 1900 due to guaranteed constraints)\n                if(currentDate[0] === 2 && currentDate[1] === 29 && currentDate[2] % 400 && !(currentDate[2] % 100) && currentDate[2] > 1900) {\n                    return \"Not Leap\"\n                }\n                \n                //Convert the date into the total days since Jan 1, 1900.\n                //Add up the total number of days in the months that have passed.\n                let totalDays = monthLengths.slice(0, currentDate[0] - 1).reduce((a, b) => a += b, 0) +\n                //Add the number of days passed in the current month.\n                currentDate[1] + \n                //Add the number of days passed in every previous standard year.\n                ((currentDate[2] - 1900) * 365) +\n                //Add the number of leap year extra days.\n                Math.floor((currentDate[2] - 1900) / 4)  -\n                //If the current year is a leap year, and the date is not yet Feb 29, remove one leap day\n                (((currentDate[2] - 1900) % 4 === 0) && (currentDate[0] < 3) && ((currentDate[2] - 1900) / 4 >= 1) ? \n                1 :\n                0) -\n                //If we are currently counting after 2100, delete one more leap year\n                (currentDate[2] >= 2100 && currentDate[1] > 2 ? 1 : 0);\n                return days[totalDays % 7];\n            };\n            \n            //Keep track of the day we want to find as well as the next year's date to check.\n            let dayToFind = findDays(birthdayDate);\n            let nextDate = birthdayDate;\n            //Count the years that have passed.\n            let totalYears = 0;\n            \n            //Keep counting until the number of years is reached.\n            while(dayToFind !== findDays(nextDate) || !totalYears) {\n                totalYears++;\n                let nextDateArray = nextDate.split(\"-\");\n                nextDateArray[2]++;\n                nextDate = nextDateArray.join(\"-\");\n            }\n            \n            return totalYears; \n        },\n        arguments: {\n            descriptions: [\n                {\n                    text: \"Date String (Form of MM-DD-YYYY)\",\n                    type: \"String\"\n                }\n            ]\n        }\n    },\n    decipher: {\n        name: 'decipher',\n        instructions: `Consider the following ciphering algorithm:\n\n        For each character replace it with its code.\n        Concatenate all of the obtained numbers.\n        Given a ciphered string, return the initial one if it is known that it consists only of lowercase letters.`,\n        codeOutput: \n        `function decipher(cipher) {\n            let currentCode = \"\";\n            let result = \"\";\n            for(let i = 0; i < cipher.length; i++) {\n                //Start or continue building the current code.\n                currentCode += cipher[i];\n                //Check if the current code is a valid value between 97-122.\n                if(Number(currentCode) >= 97 && Number(currentCode) <= 122) {\n                    //If so, add to the result using this character code.\n                    result += String.fromCharCode(Number(currentCode));\n                    //Now, reset the current code.\n                    currentCode = \"\";\n                }\n            }\n            return result;\n        }`,\n        code: function decipher(cipher) {\n            let currentCode = \"\";\n            let result = \"\";\n            for(let i = 0; i < cipher.length; i++) {\n                //Start or continue building the current code.\n                currentCode += cipher[i];\n                //Check if the current code is a valid value between 97-122.\n                if(Number(currentCode) >= 97 && Number(currentCode) <= 122) {\n                    //If so, add to the result using this character code.\n                    result += String.fromCharCode(Number(currentCode));\n                    //Now, reset the current code.\n                    currentCode = \"\";\n                }\n            }\n            return result;\n        },\n        arguments: {\n            descriptions: [\n                {\n                    text: \"String of ASCII Character Codes; No Spaces, etc. (Example: 10197115121 = 'easy')\",\n                    type: \"String\"\n                }\n            ]\n        }\n    },\n    deleteDigit: {\n        name: 'deleteDigit',\n        instructions: `Given some integer, find the maximal number you can obtain by deleting exactly one digit of the given number.`,\n        codeOutput: \n        `function deleteDigit(n) {\n            //Create string representation.\n            let numberString = String(n);\n            //Create the initial max number by removing the first digit character.\n            let maxNumber = Number(numberString.substring(1));\n            console.log(maxNumber);\n            \n            //Go through each character of the string representation of the number.\n            for(let i = 1; i < numberString.length; i++) {\n                //Form the new number by removing this character.\n                let thisNumber = i === numberString.length - 1 ? \n                Number(numberString.substring(0, i)) :\n                Number(numberString.substring(0, i) + numberString.substring(i + 1));\n                 \n                //See if this current number (with the removed digit) is larger than the current max.\n                maxNumber = thisNumber > maxNumber ? thisNumber : maxNumber;\n            }\n            \n            return maxNumber;\n        }`,\n        code: function deleteDigit(n) {\n            //Create string representation.\n            let numberString = String(n);\n            //Create the initial max number by removing the first digit character.\n            let maxNumber = Number(numberString.substring(1));\n            console.log(maxNumber);\n            \n            //Go through each character of the string representation of the number.\n            for(let i = 1; i < numberString.length; i++) {\n                //Form the new number by removing this character.\n                let thisNumber = i === numberString.length - 1 ? \n                Number(numberString.substring(0, i)) :\n                Number(numberString.substring(0, i) + numberString.substring(i + 1));\n                 \n                //See if this current number (with the removed digit) is larger than the current max.\n                maxNumber = thisNumber > maxNumber ? thisNumber : maxNumber;\n            }\n            \n            return maxNumber;\n        },\n        arguments: {\n            descriptions: [\n                {\n                    text: \"Integer (To Remove Digit From)\",\n                    type: \"Number\"\n                }\n            ]\n        }\n    },\n    depositProfit: {\n        name: 'depositProfit',\n        instructions: `You have deposited a specific amount of money into your bank account. Each year your balance increases at the same growth rate. With the assumption that you don't make any additional deposits, find out how long it would take for your balance to pass a specific threshold.`,\n        codeOutput: \n        `function depositProfit(deposit, rate, threshold) {\n            //Keep track of current total amount and years passed.\n            let total = deposit;\n            let years = 0;\n            while(total < threshold) {\n                //Keep adding one year and adding this rate to the total until past threshold.\n                years++;\n                total += (total * rate / 100);\n            }\n            return years;\n        }`,\n        code: function depositProfit(deposit, rate, threshold) {\n            //Keep track of current total amount and years passed.\n            let total = deposit;\n            let years = 0;\n            while(total < threshold) {\n                //Keep adding one year and adding this rate to the total until past threshold.\n                years++;\n                total += (total * rate / 100);\n            }\n            return years;\n        },\n        arguments: {\n            descriptions: [\n                {\n                    text: \"Deposit (Positive Integer)\",\n                    type: \"Number\"\n                },\n                {\n                    text: \"Growth Rate (Positive Integer)\",\n                    type: \"Number\"\n                },\n                {\n                    text: \"Threshold (Positive Integer)\",\n                    type: \"Number\"\n                }\n            ]\n        }\n    },\n    detectCapitalUse: {\n        name: `detectCapitalUse`,\n        instructions: `We define the usage of capitals in a word to be right when one of the following cases holds:\n\n        All letters in this word are capitals, like \"USA\".\n        All letters in this word are not capitals, like \"leetcode\".\n        Only the first letter in this word is capital, like \"Google\".\n        Given a string word, return true if the usage of capitals in it is right.`,\n        codeOutput: \n        `var detectCapitalUse = function(word) {\n            return word.toUpperCase() === word ||\n                word.toLowerCase() === word ||\n                word.substring(1).toLowerCase() === word.substring(1);\n        };`,\n        code: function detectCapitalUse(word) {\n            return word.toUpperCase() === word ||\n                word.toLowerCase() === word ||\n                word.substring(1).toLowerCase() === word.substring(1);\n        },\n        arguments: {\n            descriptions: [\n                {\n                    text: \"Single Word to Check\",\n                    type: \"String\"\n                }\n            ]\n        }\n    },\n    differentRightmostBit: {\n        name: 'differentRightmostBit',\n        instructions: `You're given two integers, n and m. Find position of the rightmost bit in which they differ in their binary representations (it is guaranteed that such a bit exists), counting from right to left. Return the value of 2position_of_the_found_bit (0-based).`,\n        codeOutput: \n        `function differentRightmostBit(n, m) {\n            //Handle edge case (difference is only 1, then move on to other cases)\n            //Take binary versions of both numbers:\n            //Taking the first (n), filter it into array down to only values.\n            //Where there are null values, put a placeholder value of 999 so that \n            //next map can run.\n            //Final map function sees if every element is 999. If so, we know \n            //That the element we are looking for is out of bounds of this array, and specifically \n            //has the next unique bit in the next spot (so we use the length of the smaller number in binary form)\n            //Finally, we take the resulting array and use Math.min to find the smallest index,\n            //Making sure to spread the values out with ...\n            return m - n === 1 ? 1 : 2 ** Math.min(...(n.toString(2)\n            .split(\"\")\n            .reverse()\n            .map((bit, index) => {\n                if(bit !== m.toString(2).split(\"\").reverse()[index]) {\n                    return index;\n                }\n            })\n            .map((element, index, array) => {\n                //Filter out null values.\n                return element ? element : 999;\n            })\n            .map((number, index, array) => {\n                console.log(array);\n                if(array.every(element => element === 999)) {\n                    return m.toString(2).length > n.toString(2).length ? \n                    m.toString(2).length - 1 :\n                    n.toString(2).length - 1;\n                } else {\n                    return number;\n                }\n            })\n            ));\n        }`,\n        code: function differentRightmostBit(n, m) {\n            //Handle edge case (difference is only 1, then move on to other cases)\n            //Take binary versions of both numbers:\n            //Taking the first (n), filter it into array down to only values.\n            //Where there are null values, put a placeholder value of 999 so that \n            //next map can run.\n            //Final map function sees if every element is 999. If so, we know \n            //That the element we are looking for is out of bounds of this array, and specifically \n            //has the next unique bit in the next spot (so we use the length of the smaller number in binary form)\n            //Finally, we take the resulting array and use Math.min to find the smallest index,\n            //Making sure to spread the values out with ...\n            return m - n === 1 ? 1 : 2 ** Math.min(...(n.toString(2)\n            .split(\"\")\n            .reverse()\n            .map((bit, index) => {\n                if(bit !== m.toString(2).split(\"\").reverse()[index]) {\n                    return index;\n                }\n            })\n            .map((element, index, array) => {\n                //Filter out null values.\n                return element ? element : 999;\n            })\n            .map((number, index, array) => {\n                console.log(array);\n                if(array.every(element => element === 999)) {\n                    return m.toString(2).length > n.toString(2).length ? \n                    m.toString(2).length - 1 :\n                    n.toString(2).length - 1;\n                } else {\n                    return number;\n                }\n            })\n            ));\n        },\n        arguments: {\n            descriptions: [\n                {\n                    text: \"Integer n\",\n                    type: \"Number\"\n                },\n                {\n                    text: \"Integer m\",\n                    type: \"Number\"\n                }\n            ]\n        }\n    },\n    differentSquares: {\n        name: 'differentSquares',\n        instructions: `Given a rectangular matrix containing only digits, calculate the number of different 2 × 2 squares in it.`,\n        codeOutput: \n        `function differentSquares(matrix) {\n            //Keep track of unique squares.\n            let uniqueSquares = {};\n            //Loop through each square start.\n            for(let row = 0; row < matrix.length - 1; row++) {\n                for(let col = 0; col < matrix[0].length - 1; col++) {\n                    //Loop through this square, and build this square's string representation.\n                    let thisSquare = \"\";\n                    for(let row_prime = row; row_prime < row + 2; row_prime++) {\n                        for(let col_prime = col; col_prime < col + 2; col_prime++) {\n                            thisSquare += matrix[row_prime][col_prime];\n                        }\n                    }\n                    //If this is not already a unique square, add it to unique squares.\n                    if(!uniqueSquares[thisSquare]) uniqueSquares[thisSquare] = 1;\n                }\n            }\n            //Total up the number of unique squares stored and return.\n            let total = 0;\n            for(let square in uniqueSquares) {\n                total++;\n            }\n            return total;\n        }`,\n        code: function differentSquares(matrix) {\n            //Keep track of unique squares.\n            let uniqueSquares = {};\n            //Loop through each square start.\n            for(let row = 0; row < matrix.length - 1; row++) {\n                for(let col = 0; col < matrix[0].length - 1; col++) {\n                    //Loop through this square, and build this square's string representation.\n                    let thisSquare = \"\";\n                    for(let row_prime = row; row_prime < row + 2; row_prime++) {\n                        for(let col_prime = col; col_prime < col + 2; col_prime++) {\n                            thisSquare += matrix[row_prime][col_prime];\n                        }\n                    }\n                    //If this is not already a unique square, add it to unique squares.\n                    if(!uniqueSquares[thisSquare]) uniqueSquares[thisSquare] = 1;\n                }\n            }\n            //Total up the number of unique squares stored and return.\n            let total = 0;\n            for(let square in uniqueSquares) {\n                total++;\n            }\n            return total;\n        },\n        arguments: {\n            descriptions: [\n                {\n                    text: \"Array of Integer Arrays (Form of [1,2,3], [1,2,3]...); Each Array Has Same Length\",\n                    type: \"NumberArrayArray\"\n                }\n            ]\n        }\n    },\n    differentSymbolsNaive: {\n        name: 'differentSymbolsNaive',\n        instructions: `Given a string, find the number of different characters in it.`,\n        codeOutput: \n        `function differentSymbolsNaive(s) {\n            //Create a character map object from the string.\n            let charMap = {};\n            for(let i = 0; i < s.length; i++) {\n                charMap[s[i]] ? charMap[s[i]]++ : charMap[s[i]] = 1;\n            }\n            \n            //Count the number of unique characters as properties in the character map object.\n            let uniqueChars = 0;\n            for(let letter in charMap) uniqueChars++;\n            \n            return uniqueChars;\n        }`,\n        code: function differentSymbolsNaive(s) {\n            //Create a character map object from the string.\n            let charMap = {};\n            for(let i = 0; i < s.length; i++) {\n                charMap[s[i]] ? charMap[s[i]]++ : charMap[s[i]] = 1;\n            }\n            \n            //Count the number of unique characters as properties in the character map object.\n            let uniqueChars = 0;\n            for(let letter in charMap) uniqueChars++;\n            \n            return uniqueChars;\n        },\n        arguments: {\n            descriptions: [\n                {\n                    text: \"Input String\",\n                    type: \"String\"\n                }\n            ]\n        }\n    },\n    digitDegree: {\n        name: 'digitDegree',\n        instructions: `Let's define digit degree of some positive integer as the number of times we need to replace this number with the sum of its digits until we get to a one digit number.\n\n        Given an integer, find its digit degree.`,\n        codeOutput: \n        `function digitDegree(n) {\n            //Copy string representation of this number.\n            let currentNumber = String(n);\n            let iterations = 0;\n            //Iteratively split the number into digits, add them together, and see if this new number is one digit.\n            while(currentNumber.length > 1) {\n                iterations++;\n                let digitArray = currentNumber.split(\"\");\n                let sum = 0;\n                for(let i = 0; i < digitArray.length; i++) {\n                    sum += Number(digitArray[i]);\n                }\n                currentNumber = String(sum);\n            }\n            return iterations;\n        }`,\n        code: function digitDegree(n) {\n            //Copy string representation of this number.\n            let currentNumber = String(n);\n            let iterations = 0;\n            //Iteratively split the number into digits, add them together, and see if this new number is one digit.\n            while(currentNumber.length > 1) {\n                iterations++;\n                let digitArray = currentNumber.split(\"\");\n                let sum = 0;\n                for(let i = 0; i < digitArray.length; i++) {\n                    sum += Number(digitArray[i]);\n                }\n                currentNumber = String(sum);\n            }\n            return iterations;\n        },\n        arguments: {\n            descriptions: [\n                {\n                    text: \"Positive Integer\",\n                    type: \"Number\"\n                }\n            ]\n        }\n    },\n    digitDifferenceSort: {\n        name: 'digitDifferenceSort',\n        instructions: `Given an array of integers, sort its elements by the difference of their largest and smallest digits. In the case of a tie, that with the larger index in the array should come first.`,\n        codeOutput: \n        `function digitDifferenceSort(a) {\n            let differenceMap = {};\n            //Find the difference of all elements and map them out.\n            a.forEach(element => {\n                //Find the largest and smallest digits.\n                let largest = 0;\n                let smallest = 9;\n                let currentNumber = element;\n                while(currentNumber) {\n                    let lastDigit = currentNumber % 10;\n                    //Compare this digit to the current largest/smallest digits.\n                    largest = Math.max(largest, lastDigit);\n                    smallest = Math.min(smallest, lastDigit);\n                    //Update number to go to the next digit.\n                    currentNumber = Math.floor(currentNumber / 10);\n                }\n                //Find the difference and store it.\n                let difference = largest - smallest;\n                if(differenceMap[difference]) {\n                    //Unshift the elements so that they are in the correct order.\n                    differenceMap[difference].unshift(element);\n                } else {\n                    differenceMap[difference] = [element];\n                }\n            });\n            //Turn the difference map into a sorted array.\n            let differenceArray = [];\n            for(let difference in differenceMap) {\n                differenceArray.push(...differenceMap[difference]);\n            }\n            \n            return differenceArray;\n        }`,\n        code: function digitDifferenceSort(a) {\n            let differenceMap = {};\n            //Find the difference of all elements and map them out.\n            a.forEach(element => {\n                //Find the largest and smallest digits.\n                let largest = 0;\n                let smallest = 9;\n                let currentNumber = element;\n                while(currentNumber) {\n                    let lastDigit = currentNumber % 10;\n                    //Compare this digit to the current largest/smallest digits.\n                    largest = Math.max(largest, lastDigit);\n                    smallest = Math.min(smallest, lastDigit);\n                    //Update number to go to the next digit.\n                    currentNumber = Math.floor(currentNumber / 10);\n                }\n                //Find the difference and store it.\n                let difference = largest - smallest;\n                if(differenceMap[difference]) {\n                    //Unshift the elements so that they are in the correct order.\n                    differenceMap[difference].unshift(element);\n                } else {\n                    differenceMap[difference] = [element];\n                }\n            });\n            //Turn the difference map into a sorted array.\n            let differenceArray = [];\n            for(let difference in differenceMap) {\n                differenceArray.push(...differenceMap[difference]);\n            }\n            \n            return differenceArray;\n        },\n        arguments: {\n            descriptions: [\n                {\n                    text: \"Array of Integers (Form of 1,2,3... No Brackets)\",\n                    type: \"NumberArray\"\n                }\n            ]\n        }\n    },\n    digitsProduct: {\n        name: 'digitsProduct',\n        instructions: `Given an integer product, find the smallest positive (i.e. greater than 0) integer the product of whose digits is equal to product. If there is no such integer, return -1 instead.`,\n        codeOutput: \n        `function digitsProduct(product) {\n            //Return early in special cases: product is 0 or a one-digit number.\n            if(product === 0) return 10\n            if(product < 10) return product;\n            \n            //Find all factors\n            let factors = [];\n            for(let i = 1; i <= 9; i++) {\n                if(product % i === 0) factors.push(i);\n            }\n            console.log(factors);\n            \n            //Return early if number is prime and longer than one digit.\n            if(factors.length < 2) return -1;\n            \n            //Using only the number's one-digit factors, work backwards to divide the product recursively by the largest possible factor until reaching one.\n            \n            //Keep track of the digits and the current product.\n            let digits = [];\n            let currentProduct = product;\n            \n            //While the product has not been divided down to 1:\n            while(currentProduct > 1) {\n                //Each time we divide, start with the largest possible one-digit factor.\n                for(let i = factors.length - 1; i > 0; i--) {\n                    //If this factor can be used to divide the current product evenly, it becomes one of our result digits, and we continue to divide the product down. Break out of this iteration if so.\n                    if(currentProduct % factors[i] === 0) {\n                        digits.unshift(factors[i]);\n                        currentProduct = currentProduct / factors[i];\n                        break;\n                    } else if(i === 1) {\n                        //If we have not found a factor to divide evenly with, then there is no way to build this number.\n                        return -1;\n                    }\n                }\n            }\n        \n            //Join the digits together and return.\n            return Number(digits.join(\"\"));\n        }`,\n        code: function digitsProduct(product) {\n            //Return early in special cases: product is 0 or a one-digit number.\n            if(product === 0) return 10\n            if(product < 10) return product;\n            \n            //Find all factors\n            let factors = [];\n            for(let i = 1; i <= 9; i++) {\n                if(product % i === 0) factors.push(i);\n            }\n            console.log(factors);\n            \n            //Return early if number is prime and longer than one digit.\n            if(factors.length < 2) return -1;\n            \n            //Using only the number's one-digit factors, work backwards to divide the product recursively by the largest possible factor until reaching one.\n            \n            //Keep track of the digits and the current product.\n            let digits = [];\n            let currentProduct = product;\n            \n            //While the product has not been divided down to 1:\n            while(currentProduct > 1) {\n                //Each time we divide, start with the largest possible one-digit factor.\n                for(let i = factors.length - 1; i > 0; i--) {\n                    //If this factor can be used to divide the current product evenly, it becomes one of our result digits, and we continue to divide the product down. Break out of this iteration if so.\n                    if(currentProduct % factors[i] === 0) {\n                        digits.unshift(factors[i]);\n                        currentProduct = currentProduct / factors[i];\n                        break;\n                    } else if(i === 1) {\n                        //If we have not found a factor to divide evenly with, then there is no way to build this number.\n                        return -1;\n                    }\n                }\n            }\n        \n            //Join the digits together and return.\n            return Number(digits.join(\"\"));\n        },\n        arguments: {\n            descriptions: [\n                {\n                    text: \"Product Input (Positive Integer)\",\n                    type: \"Number\"\n                }\n            ]\n        }\n    },\n    distributeCandies: {\n        name: `distributeCandies`,\n        instructions: `Alice has n candies, where the ith candy is of type candyType[i]. Alice noticed that she started to gain weight, so she visited a doctor.\n\n        The doctor advised Alice to only eat n / 2 of the candies she has (n is always even). Alice likes her candies very much, and she wants to eat the maximum number of different types of candies while still following the doctor's advice.\n        \n        Given the integer array candyType of length n, return the maximum number of different types of candies she can eat if she only eats n / 2 of them.`,\n        codeOutput: \n        `var distributeCandies = function(candyType) {\n            //Using Set constructor, get the total number of unique types of candies (will be in object form, so use size property)\n            //Return the smallest value, whether it be the number of unique types OR half the number of candies.\n            return Math.min([new Set(candyType)][0].size, candyType.length / 2)\n        };`,\n        code: function distributeCandies(candyType) {\n            //Using Set constructor, get the total number of unique types of candies (will be in object form, so use size property)\n            //Return the smallest value, whether it be the number of unique types OR half the number of candies.\n            return Math.min([new Set(candyType)][0].size, candyType.length / 2)\n        },\n        arguments: {\n            descriptions: [\n                {\n                    text: \"Array With Even Length to Represent Candies (e.g. 1,1,2,2,2,3)\",\n                    type: \"NumberArray\"\n                }\n            ]\n        }\n    },\n    drawRectangle: {\n        name: 'drawRectangle',\n        instructions: `You are implementing a command-line version of the Paint app. Since the command line doesn't support colors, you are using different characters to represent pixels. Your current goal is to support rectangle x1 y1 x2 y2 operation, which draws a rectangle that has an upper left corner at (x1, y1) and a lower right corner at (x2, y2). Here the x-axis points from left to right, and the y-axis points from top to bottom.\n\n        Given the initial canvas state and the array that represents the coordinates of the two corners, return the canvas state after the operation is applied. For the details about how rectangles are painted, see the example.`,\n        codeOutput: \n        `function drawRectangle(canvas, rectangle) {\n            for(let row = 0; row < canvas.length; row++) {\n                //Skip over loops out of bounds of the rectangle.\n                if(row < rectangle[1] || row > rectangle[3]) continue;\n                //Handle top and bottom rows of the rectangle.\n                if(row === rectangle[1] || row === rectangle[3]) {\n                    //Loop over all positions of the top and bottom row of the rectangle.\n                    for(let position = rectangle[0]; position <= rectangle[2]; position++) {\n                        //Handle corners.\n                        if(position === rectangle[0] || position === rectangle[2]) {\n                            canvas[row][position] = \"*\";\n                        } else {\n                            canvas[row][position] = \"-\";\n                        }\n                    }\n                } else {\n                    //Otherwise, this is a rectangle side.\n                    canvas[row][rectangle[0]] = \"|\";\n                    canvas[row][rectangle[2]] = \"|\";\n                }\n            }\n            return canvas;\n        }`,\n        code: function drawRectangle(canvas, rectangle) {\n            for(let row = 0; row < canvas.length; row++) {\n                //Skip over loops out of bounds of the rectangle.\n                if(row < rectangle[1] || row > rectangle[3]) continue;\n                //Handle top and bottom rows of the rectangle.\n                if(row === rectangle[1] || row === rectangle[3]) {\n                    //Loop over all positions of the top and bottom row of the rectangle.\n                    for(let position = rectangle[0]; position <= rectangle[2]; position++) {\n                        //Handle corners.\n                        if(position === rectangle[0] || position === rectangle[2]) {\n                            canvas[row][position] = \"*\";\n                        } else {\n                            canvas[row][position] = \"-\";\n                        }\n                    }\n                } else {\n                    //Otherwise, this is a rectangle side.\n                    canvas[row][rectangle[0]] = \"|\";\n                    canvas[row][rectangle[2]] = \"|\";\n                }\n            }\n            return canvas;\n        },\n        arguments: {\n            descriptions: [\n                {\n                    text: 'Canvas Array (Example: [a,a,a,a,a,a,a,a], [a,a,a,a,a,a,a,a], [a,a,a,a,a,a,a,a], [b,b,b,b,b,b,b,b], [b,b,b,b,b,b,b,b])',\n                    type: \"ArrayArray\"\n                },\n                {\n                    text: \"Number Rectangle Array (Example: 1,1,4,3)\",\n                    type: \"NumberArray\"\n                }\n            ]\n        }\n    },\n    electionsWinners: {\n        name: 'electionsWinners',\n        instructions: `Elections are in progress!\n\n        Given an array of the numbers of votes given to each of the candidates so far, and an integer k equal to the number of voters who haven't cast their vote yet, find the number of candidates who still have a chance to win the election.\n        \n        The winner of the election must secure strictly more votes than any other candidate. If two or more candidates receive the same (maximum) number of votes, assume there is no winner at all.`,\n        codeOutput: \n        `function electionsWinners(votes, k) {\n            //Find the number of votes needed to win.\n            let votesToWin = Math.max(...votes);\n            //Keep track of the number of candidates that will be eligible.\n            let numberOfCandidates = 0;\n            \n            //If there are no voters left, we need to return 1 if there is 1 max, or return 0 if there are ties for the max number of votes.\n            if(k === 0) {\n                let numMax = 0;\n                for(let i = 0; i < votes.length; i++) {\n                    if(votes[i] === votesToWin) numMax++;\n                    if(numMax > 1) return 0;\n                }\n                return 1;\n            }\n            \n            //Otherwise, go through each candidate and see if adding the remaining votes would secure a win.\n            votes.forEach(candidate => {\n                if(candidate + k > votesToWin) numberOfCandidates++;\n            });\n            \n            return numberOfCandidates;\n        }`,\n        code: function electionsWinners(votes, k) {\n            //Find the number of votes needed to win.\n            let votesToWin = Math.max(...votes);\n            //Keep track of the number of candidates that will be eligible.\n            let numberOfCandidates = 0;\n            \n            //If there are no voters left, we need to return 1 if there is 1 max, or return 0 if there are ties for the max number of votes.\n            if(k === 0) {\n                let numMax = 0;\n                for(let i = 0; i < votes.length; i++) {\n                    if(votes[i] === votesToWin) numMax++;\n                    if(numMax > 1) return 0;\n                }\n                return 1;\n            }\n            \n            //Otherwise, go through each candidate and see if adding the remaining votes would secure a win.\n            votes.forEach(candidate => {\n                if(candidate + k > votesToWin) numberOfCandidates++;\n            });\n            \n            return numberOfCandidates;\n        },\n        arguments: {\n            descriptions: [\n                {\n                    text: \"Array of Integers for Votes (Form of 1,2,3,4...); No Brackets []\",\n                    type: \"NumberArray\"\n                },\n                {\n                    text: \"Integer for k\",\n                    type: \"Number\"\n                }\n            ]\n        }\n    },\n    equalPairOfBits: {\n        name: 'equalPairOfBits',\n        instructions: `You're given two integers, n and m. Find position of the rightmost pair of equal bits in their binary representations (it is guaranteed that such a pair exists), counting from right to left.\n\n        Return the value of 2position_of_the_found_pair (0-based).`,\n        codeOutput: \n        `function equalPairOfBits(n, m) {\n            return 2 ** n.toString(2)\n            .split(\"\")\n            .reverse()\n            .map((bit, index, array) => {\n                //compare this bit and it's next neighbor with that of the other string m\n                let m_bits = m.toString(2).split(\"\").reverse();\n                //If the pairs are equal, push those.\n                if(bit === m_bits[index] && array[index + 1] === m_bits[index + 1]) {\n                    console.log(\"Values are equal\")\n                    return index;\n                }\n                //Add the array length in case there are no matching pairs in the bits shown.\n                if(index === array.length - 1) return array.length;\n            })\n            .filter((value, index, array) => {\n                if(value === 0) return \"0\";\n                if(value) return value;\n            })\n            .map((value, index, array) => {\n                console.log(array);\n                return value;\n            })[0]\n            ;\n        }`,\n        code: function equalPairOfBits(n, m) {\n            return 2 ** n.toString(2)\n            .split(\"\")\n            .reverse()\n            .map((bit, index, array) => {\n                //compare this bit and it's next neighbor with that of the other string m\n                let m_bits = m.toString(2).split(\"\").reverse();\n                //If the pairs are equal, push those.\n                if(bit === m_bits[index] && array[index + 1] === m_bits[index + 1]) {\n                    console.log(\"Values are equal\")\n                    return index;\n                }\n                //Add the array length in case there are no matching pairs in the bits shown.\n                if(index === array.length - 1) return array.length;\n            })\n            .filter((value, index, array) => {\n                if(value === 0) return \"0\";\n                if(value) return value;\n            })\n            .map((value, index, array) => {\n                console.log(array);\n                return value;\n            })[0]\n            ;\n        },\n        arguments: {\n            descriptions: [\n                {\n                    text: \"Integer n\",\n                    type: \"Number\"\n                },\n                {\n                    text: \"Integer m\",\n                    type: \"Number\"\n                }\n            ]\n        }\n    },\n    evenDigitsOnly: {\n        name: 'evenDigitsOnly',\n        instructions: `Check if all digits of the given integer are even.`,\n        codeOutput: \n        `function evenDigitsOnly(n) {\n            let numberString = String(n);\n            //Loop through every 'character' in the stringified number.\n            for(let i = 0; i < numberString.length; i++) {\n                //If any digit is odd, return early.\n                if(Number(numberString[i]) % 2 !== 0) {\n                    return false;\n                }\n            }\n            return true;\n        }`,\n        code: function evenDigitsOnly(n) {\n            let numberString = String(n);\n            //Loop through every 'character' in the stringified number.\n            for(let i = 0; i < numberString.length; i++) {\n                //If any digit is odd, return early.\n                if(Number(numberString[i]) % 2 !== 0) {\n                    return false;\n                }\n            }\n            return true;\n        },\n        arguments: {\n            descriptions: [\n                {\n                    text: \"Integer to Check\",\n                    type: \"Number\"\n                }\n            ]\n        }\n    },\n    extractEachKth: {\n        name: 'extractEachKth',\n        instructions: `Given array of integers, remove each kth element from it.`,\n        codeOutput: \n        `function extractEachKth(inputArray, k) {\n            //Save the current index to represent the amount of skips between each number.\n            let index = k - 1;\n            \n            //While we still have elements to work with within that skip range, remove the next element from the correct position and update the new skip index.\n            while(index < inputArray.length) {\n                inputArray.splice(index, 1);\n                index += k - 1;\n            }\n            \n            return inputArray;\n        }`,\n        code: function extractEachKth(inputArray, k) {\n            //Save the current index to represent the amount of skips between each number.\n            let index = k - 1;\n            \n            //While we still have elements to work with within that skip range, remove the next element from the correct position and update the new skip index.\n            while(index < inputArray.length) {\n                inputArray.splice(index, 1);\n                index += k - 1;\n            }\n            \n            return inputArray;\n        },\n        arguments: {\n            descriptions: [\n                {\n                    text: \"Integer Array (Form of 1,2,3...); No Brackets []\",\n                    type: \"NumberArray\"\n                },\n                {\n                    text: \"Integer k\",\n                    type: \"Number\"\n                }\n            ]\n        }\n    },\n    extractMatrixColumn: {\n        name: 'extractMatrixColumn',\n        instructions: `Given a rectangular matrix and an integer column, return an array containing the elements of the columnth column of the given matrix (the leftmost column is the 0th one).`,\n        codeOutput: \n        `function extractMatrixColumn(matrix, column) {\n            //Take out each 'row' (array element) and return the element at position [column]\n            return matrix.map(row => row[column]);\n        }`,\n        code: function extractMatrixColumn(matrix, column) {\n            //Take out each 'row' (array element) and return the element at position [column]\n            return matrix.map(row => row[column]);\n        },\n        arguments: {\n            descriptions: [\n                {\n                    text: \"Array of Integer Arrays (Form of [1,2,3], [4,5,6]...)\",\n                    type: \"NumberArrayArray\"\n                },\n                {\n                    text: \"Column Number (Integer)\",\n                    type: \"Number\"\n                }\n            ]\n        }\n    },\n    extraNumber: {\n        name: 'extraNumber',\n        instructions: `You're given three integers, a, b and c. It is guaranteed that two of these integers are equal to each other. What is the value of the third integer?`,\n        codeOutput: \n        `function extraNumber(a, b, c) {\n            return a === b ? c : a === c ? b : a;\n        }`,\n        code: function extraNumber(a, b, c) {\n            return a === b ? c : a === c ? b : a;\n        },\n        arguments: {\n            descriptions: [\n                {\n                    text: \"Integer a\",\n                    type: \"Number\"\n                },\n                {\n                    text: \"Integer b\",\n                    type: \"Number\"\n                },\n                {\n                    text: \"Integer c\",\n                    type: \"Number\"\n                }\n            ]\n        }\n    },\n    eyeRhyme: {\n        name: 'eyeRhyme',\n        instructions: `An eye rhyme is a rhyme in which two words are spelled similarly but pronounced differently. An example is the pair cough and bough; although they look similar, when they are spoken there is no rhyming quality.\n\n        You are writing a thesis on the eye rhyme, and you thought it would be cool to make the text itself eye rhymed. This brilliant idea came to your mind a little too late: the text is already written. Now you want to check if a given pair of lines in your text have an eye rhyme. More specifically, you want to make sure that the last three characters of each pair of lines coincide.\n        \n        You have already split your text into pairs of lines. Now all that's left is to check that the last three characters of the lines in each pairOfLines coincide. Implement a function that will do this job.`,\n        codeOutput: \n        `function eyeRhyme(pairOfLines) {\n            /*\n            Using RegExp constructor, create a pattern to capture two separate groups:\n            The first is the set of any 3 characters before the tab:\n            -.* matches any character(s).\n            -Starting in the capture group, match any 3 characters.\n            -\\t references the tab that comes immediately after the 3 captured characters.\n            The second group is the 3 characters at the end:\n            -.* matches any character(s).\n            -Starting in the capture group, match any 3 characters.\n            -$ references the end of the string.\n            When exec() is run on the input string, the 3 characters before the \\ are grouped and the 3 end characters are grouped.\n            When the two strings are compared, it returns true if they are the same and false otherwise.\n            */\n            var re = new RegExp(\".*(.{3})\\t.*(.{3})$\");\n            var match = re.exec(pairOfLines);\n            return match[1] == match[2];\n        }`,\n        code: function eyeRhyme(pairOfLines) {\n            //Format the input so that it works in this environment.\n            let inputSplit = pairOfLines.split(\"\\\\t\");\n            let formatted = inputSplit[0] + '\\t' + inputSplit[1];\n            /*\n            Using RegExp constructor, create a pattern to capture two separate groups:\n            The first is the set of any 3 characters before the tab:\n            -.* matches any character(s).\n            -Starting in the capture group, match any 3 characters.\n            -\\t references the tab that comes immediately after the 3 captured characters.\n            The second group is the 3 characters at the end:\n            -.* matches any character(s).\n            -Starting in the capture group, match any 3 characters.\n            -$ references the end of the string.\n            When exec() is run on the input string, the 3 characters before the \\ are grouped and the 3 end characters are grouped.\n            When the two strings are compared, it returns true if they are the same and false otherwise.\n            */\n            var re = new RegExp(\".*(.{3})\\t.*(.{3})$\");\n            var match = re.exec(formatted);\n            return match[1] == match[2];\n        },\n        arguments: {\n            descriptions: [\n                {\n                    text: \"String Input (Contains \\\\t in the middle)\",\n                    type: \"String\"\n                }\n            ]\n        }\n    },\n    fileNaming: {\n        name: 'fileNaming',\n        instructions: `You are given an array of desired filenames in the order of their creation. Since two files cannot have equal names, the one which comes later will have an addition to its name in a form of (k), where k is the smallest positive integer such that the obtained name is not used yet.\n\n        Return an array of names that will be given to the files.`,\n        codeOutput: \n        `function fileNaming(names) {\n            //Store all names and see how many times they occur.\n            let uniqueNames = {};\n            for(let i = 0; i < names.length; i++) {\n                let thisName = names[i];\n                if(uniqueNames[thisName]) { \n                    //If this name is already in the list, update the name with the appended number.\n                    let count = uniqueNames[thisName];\n                    \n                    //Make sure we are using a number that is not already part of a unique name itself.\n                    while(uniqueNames[\\`\\${thisName}(\\${count})\\`]) {\n                        count++;\n                    }\n                    \n                    //Once we have a unique name, update the number of times the original name appeared.\n                    //Also, update this current name and put it in the list of unique names.\n                    uniqueNames[thisName]++;\n                    thisName = \\`\\${thisName}(\\${count})\\`;\n                    uniqueNames[thisName] = 1;\n                } else {\n                    //If this name as-is isn't already in the list, add it to the list.\n                    uniqueNames[thisName] = 1;\n                }\n        \n                //Update this name in the array.\n                names[i] = thisName;\n            }\n            \n            //Return output with unique file names;\n            return names;\n        }`,\n        code: function fileNaming(names) {\n            //Store all names and see how many times they occur.\n            let uniqueNames = {};\n            for(let i = 0; i < names.length; i++) {\n                let thisName = names[i];\n                if(uniqueNames[thisName]) { \n                    //If this name is already in the list, update the name with the appended number.\n                    let count = uniqueNames[thisName];\n                    \n                    //Make sure we are using a number that is not already part of a unique name itself.\n                    while(uniqueNames[`${thisName}(${count})`]) {\n                        count++;\n                    }\n                    \n                    //Once we have a unique name, update the number of times the original name appeared.\n                    //Also, update this current name and put it in the list of unique names.\n                    uniqueNames[thisName]++;\n                    thisName = `${thisName}(${count})`;\n                    uniqueNames[thisName] = 1;\n                } else {\n                    //If this name as-is isn't already in the list, add it to the list.\n                    uniqueNames[thisName] = 1;\n                }\n        \n                //Update this name in the array.\n                names[i] = thisName;\n            }\n            \n            //Return output with unique file names;\n            return names;\n        },\n        arguments: {\n            descriptions: [\n                {\n                    text: \"Array of Strings (Form of string1,string2...etc); No Brackets [] or Quotes\",\n                    type: \"StringArray\"\n                }\n            ]\n        }\n    },\n    findEmailDomain: {\n        name: 'findEmailDomain',\n        instructions: `Given a valid email address, find its domain part.`,\n        codeOutput: \n        `function findEmailDomain(address) {\n            //Keep track of the current index, and create an array to store the domain.\n            let currentIndex = address.length - 1;\n            let domain = [];\n            //As long as we aren't at the beginning of the string or reached the @, add to the array in correct order using unshift\n            while(address[currentIndex] !== \"@\" && currentIndex >= 0) {\n                domain.unshift(address[currentIndex]);\n                currentIndex--;\n            }\n            //Return the result as a string\n            return domain.join(\"\");\n        }`,\n        code: function findEmailDomain(address) {\n            //Keep track of the current index, and create an array to store the domain.\n            let currentIndex = address.length - 1;\n            let domain = [];\n            //As long as we aren't at the beginning of the string or reached the @, add to the array in correct order using unshift\n            while(address[currentIndex] !== \"@\" && currentIndex >= 0) {\n                domain.unshift(address[currentIndex]);\n                currentIndex--;\n            }\n            //Return the result as a string\n            return domain.join(\"\");\n        },\n        arguments: {\n            descriptions: [\n                {\n                    text: \"Valid Email Address\",\n                    type: \"String\"\n                }\n            ]\n        }\n    },\n    findLUSlength: {\n        name: `findLUSlength`,\n        instructions: `Given two strings a and b, return the length of the longest uncommon subsequence between a and b. If the longest uncommon subsequence does not exist, return -1.\n\n        An uncommon subsequence between two strings is a string that is a subsequence of one but not the other.\n        \n        A subsequence of a string s is a string that can be obtained after deleting any number of characters from s.\n        \n        For example, \"abc\" is a subsequence of \"aebdc\" because you can delete the underlined characters in \"aebdc\" to get \"abc\". Other subsequences of \"aebdc\" include \"aebdc\", \"aeb\", and \"\" (empty string).`,\n        codeOutput: \n        `var findLUSlength = function(a, b) {\n            //All that is required here is to return the longer string length OR the length of both (if they aren't equal)\n            //Think of it this way as an example: 'morefun' will always itself be a longer subsequence than 'fun'\n            return a === b ?\n                -1 :\n                a.length > b.length ? \n                a.length : \n                b.length;\n        };`,\n        code: function findLUSlength(a, b) {\n            //All that is required here is to return the longer string length OR the length of both (if they aren't equal)\n            //Think of it this way as an example: 'morefun' will always itself be a longer subsequence than 'fun'\n            return a === b ?\n                -1 :\n                a.length > b.length ? \n                a.length : \n                b.length;\n        },\n        arguments: {\n            descriptions: [\n                {\n                    text: \"First String\",\n                    type: \"String\"\n                },\n                {\n                    text: \"Second String\",\n                    type: \"String\"\n                }\n            ]\n        }\n    },\n    findMaxConsecutiveOnes: {\n        name: `findMaxConsecutiveOnes`,\n        instructions: `Given a binary array nums, return the maximum number of consecutive 1's in the array.`,\n        codeOutput: \n        `var findMaxConsecutiveOnes = function(nums) {\n            //At any point, keep track of the max number of 1s so far and the number of 1s in the current group.\n            let max = 0;\n            let current = 0;\n            \n            //Iterate through every num.\n            nums.forEach((num, index) => {\n                if(num === 1) {\n                    current++;\n                } else {\n                    //When a zero is encountered, reset the current and see if this is the new max.\n                    max = Math.max(max, current);\n                    current = 0;\n                }\n            });\n            //Return the max (or in the case of the last element being 1, return current if it's larger)\n            return Math.max(max, current);\n        };`,\n        code: function findMaxConsecutiveOnes(nums) {\n            //At any point, keep track of the max number of 1s so far and the number of 1s in the current group.\n            let max = 0;\n            let current = 0;\n            \n            //Iterate through every num.\n            nums.forEach(num => {\n                if(num === 1) {\n                    current++;\n                } else {\n                    //When a zero is encountered, reset the current and see if this is the new max.\n                    max = Math.max(max, current);\n                    current = 0;\n                }\n            });\n            //Return the max (or in the case of the last element being 1, return current if it's larger)\n            return Math.max(max, current);\n        },\n        arguments: {\n            descriptions: [\n                {\n                    text: \"Array of ONLY 1s and 0s (example: 1,1,0,0,0,1,1,1)\",\n                    type: \"NumberArray\"\n                }\n            ]\n        }\n    },\n    findTheDifference: {\n        name: `findTheDifference`,\n        instructions: `You are given two strings s and t.\n\n        String t is generated by random shuffling string s and then add one more letter at a random position.\n        \n        Return the letter that was added to t.`,\n        codeOutput: \n        `var findTheDifference = function(s, t) {\n            //Create a character map to store characters from the longer string.\n            let charMap = {};\n            \n            //Populate the character map.\n            for(let i = 0; i < t.length; i++) {\n                if(charMap[t[i]]) {\n                    charMap[t[i]]++;\n                } else {\n                    charMap[t[i]] = 1;\n                }\n            }\n            \n            //Look at each character in the shorter string.\n            for(const character of s.split(\"\")) {\n                //Remove this instance of this character from the character map.\n                charMap[character]--;\n            }\n            \n            //Return which ever characteris left over.\n            for(const character in charMap) {\n                if(charMap[character]) return character;\n            }\n            \n            //Only adding this line for use in GitHub project (if user does not input according to constraints)\n            return \"\";\n        };`,\n        code: function findTheDifference(s, t) {\n            //Create a character map to store characters from the longer string.\n            let charMap = {};\n            \n            //Populate the character map.\n            for(let i = 0; i < t.length; i++) {\n                if(charMap[t[i]]) {\n                    charMap[t[i]]++;\n                } else {\n                    charMap[t[i]] = 1;\n                }\n            }\n            \n            //Look at each character in the shorter string.\n            for(const character of s.split(\"\")) {\n                //Remove this instance of this character from the character map.\n                charMap[character]--;\n            }\n            \n            //Return which ever characteris left over.\n            for(const character in charMap) {\n                if(charMap[character]) return character;\n            }\n            \n            //Only adding this line for use in GitHub project (if user does not input according to constraints)\n            return \"\";\n        },\n        arguments: {\n            descriptions: [\n                {\n                    text: \"First String of Characters\",\n                    type: \"String\"\n                },\n                {\n                    text: \"Second String of Characters (one character longer than first)\",\n                    type: \"String\"\n                }\n            ]\n        }\n    },\n    firstDigit: {\n        name: 'firstDigit',\n        instructions: `Find the leftmost digit that occurs in a given string.`,\n        codeOutput: \n        `function firstDigit(inputString) {\n            let index = 0;\n            while(index < inputString.length) {\n                switch(inputString[index]) {\n                    case \"0\":\n                    case \"1\":\n                    case \"2\":\n                    case \"3\":\n                    case \"4\":\n                    case \"5\":\n                    case \"6\":\n                    case \"7\":\n                    case \"8\":\n                    case \"9\":\n                        return inputString[index];\n                    default:\n                        index++;\n                }\n            }\n        }`,\n        code: function firstDigit(inputString) {\n            let index = 0;\n            while(index < inputString.length) {\n                switch(inputString[index]) {\n                    case \"0\":\n                    case \"1\":\n                    case \"2\":\n                    case \"3\":\n                    case \"4\":\n                    case \"5\":\n                    case \"6\":\n                    case \"7\":\n                    case \"8\":\n                    case \"9\":\n                        return inputString[index];\n                    default:\n                        index++;\n                }\n            }\n        },\n        arguments: {\n            descriptions: [\n                {\n                    text: \"Input String (One or More Digits)\",\n                    type: \"String\"\n                }\n            ]\n        }\n    },\n    firstReverseTry: {\n        name: 'firstReverseTry',\n        instructions: `Reversing an array can be a tough task, especially for a novice programmer. Mary just started coding, so she would like to start with something basic at first. Instead of reversing the array entirely, she wants to swap just its first and last elements.\n\n        Given an array arr, swap its first and last elements and return the resulting array.`,\n        codeOutput: \n        `function firstReverseTry(arr) {\n            if(arr.length) [arr[0], arr[arr.length - 1]] = [arr[arr.length - 1], arr[0]];\n            return arr;\n        }`,\n        code: function firstReverseTry(arr) {\n            if(arr.length) [arr[0], arr[arr.length - 1]] = [arr[arr.length - 1], arr[0]];\n            return arr;\n        },\n        arguments: {\n            descriptions: [\n                {\n                    text: \"Array (Form of 1,2,3...No Brackets [])\",\n                    type: \"StringArray\"\n                }\n            ]\n        }\n    }\n};\n\nexport default challenges_d_f;\n\n/*\n\nTemplate:\n\nname: {\n    name: ``,\n    instructions: ``,\n    codeOutput: \n    ``,\n    code: ,\n    arguments: {\n        descriptions: [\n            {\n                text: \"\",\n                type: \"\"\n            }\n        ]\n    }\n}\n\nType List:\nNumber\nString\nNumber Array \nString Array\nNumber Array Array\nString Array Array \n\n*/","//Include global BigInt (as comment) in order to prevent no-undef in this environment.\n/* global BigInt */\n\nconst challenges_g_j = {\n    gravitation: {\n        name: 'gravitation',\n        instructions: `You are given a vertical box divided into equal columns. Someone dropped several stones from its top through the columns. Stones are falling straight down at a constant speed (equal for all stones) while possible (i.e. while they haven't reached the ground or they are not blocked by another motionless stone). Given the state of the box at some moment in time, find out which columns become motionless first.`,\n        codeOutput: \n        `function gravitation(rows) {\n            let motionless = [];\n            let smallest = Infinity;\n            //Count number of non-stone spaces in each column.\n            for(let col = 0; col < rows[0].length; col++) {\n                let spaces = 0;\n                let foundStones = false;\n                for(let row = 0; row < rows.length; row++) {\n                    //Once a # is found, spaces can be counted.\n                    if(rows[row][col] === \"#\") foundStones = true;\n                    if(foundStones && rows[row][col] === \".\") spaces++;\n                }\n                //Once the number of spaces are counted, see if this is the smallest so far.\n                //If this is the smallest, mark as the new smallest and recrete the motionless array to include this column\n                if(spaces < smallest) {\n                    smallest = spaces;\n                    motionless = [col];\n                } else if(spaces === smallest) {\n                    //If this is equal to the current smallest, push this column.\n                    motionless.push(col);\n                }\n            }\n            //Return the array with all the indexes.\n            return motionless;\n        }`,\n        code: function gravitation(rows) {\n            console.log(rows);\n            let motionless = [];\n            let smallest = Infinity;\n            //Count number of non-stone spaces in each column.\n            for(let col = 0; col < rows[0].length; col++) {\n                let spaces = 0;\n                let foundStones = false;\n                for(let row = 0; row < rows.length; row++) {\n                    //Once a # is found, spaces can be counted.\n                    if(rows[row][col] === \"#\") foundStones = true;\n                    if(foundStones && rows[row][col] === \".\") spaces++;\n                }\n                //Once the number of spaces are counted, see if this is the smallest so far.\n                //If this is the smallest, mark as the new smallest and recrete the motionless array to include this column\n                if(spaces < smallest) {\n                    smallest = spaces;\n                    motionless = [col];\n                } else if(spaces === smallest) {\n                    //If this is equal to the current smallest, push this column.\n                    motionless.push(col);\n                }\n            }\n            //Return the array with all the indexes.\n            return motionless;\n        },\n        arguments: {\n            descriptions: [\n                {\n                    text: \"Array of Equal-Length Strings (Only . and #; No Spaces or Brackets; Form of #..##,.##.#, etc.)\",\n                    type: \"StringArray\"\n                }\n            ]\n        }\n    },\n    growingPlant: {\n        name: 'growingPlant',\n        instructions: `Caring for a plant can be hard work, but since you tend to it regularly, you have a plant that grows consistently. Each day, its height increases by a fixed amount represented by the integer upSpeed. But due to lack of sunlight, the plant decreases in height every night, by an amount represented by downSpeed.\n\n        Since you grew the plant from a seed, it started at height 0 initially. Given an integer desiredHeight, your task is to find how many days it'll take for the plant to reach this height.`,\n        codeOutput: \n        `function growingPlant(upSpeed, downSpeed, desiredHeight) {\n            let days = 0;\n            let currentHeight = 0;\n            //Loop each day, continuing until the height from the day reaches the desired height. If not yet reached, continue by decreasing height from the night and move on to the next day.\n            while(true) {\n                days++;\n                currentHeight += upSpeed;\n                if(currentHeight >= desiredHeight) return days;\n                currentHeight -= downSpeed;\n            }\n        }`,\n        code: function growingPlant(upSpeed, downSpeed, desiredHeight) {\n            let days = 0;\n            let currentHeight = 0;\n            //Loop each day, continuing until the height from the day reaches the desired height. If not yet reached, continue by decreasing height from the night and move on to the next day.\n            while(true) {\n                days++;\n                currentHeight += upSpeed;\n                if(currentHeight >= desiredHeight) return days;\n                currentHeight -= downSpeed;\n            }\n        },\n        arguments: {\n            descriptions: [\n                {\n                    text: \"Integer for upSpeed\",\n                    type: \"Number\"\n                },\n                {\n                    text: \"Integer for downSpeed\",\n                    type: \"Number\"\n                },\n                {\n                    text: \"Integer for desiredHeight\",\n                    type: \"Number\"\n                }\n            ]\n        }\n    },\n    hammingWeight: {\n        name: `hammingWeight`,\n        instructions: `Write a function that takes an unsigned integer and returns the number of '1' bits it has (also known as the Hamming weight).\n\n        Note:\n        \n        Note that in some languages, such as Java, there is no unsigned integer type. In this case, the input will be given as a signed integer type. It should not affect your implementation, as the integer's internal binary representation is the same, whether it is signed or unsigned.\n        In Java, the compiler represents the signed integers using 2's complement notation. Therefore, in Example 3, the input represents the signed integer. -3.`,\n        codeOutput: \n        `var hammingWeight = function(n) {\n            //Convert the binary string into a string split into array form.\n            //For each element in the array, if it is a '1' representing a set bit, add to a total, starting at 0.\n            return n.toString(2)\n                .split(\"\")\n                .reduce((prev, current) => current === \"1\" ? prev + 1 : prev, 0)\n        };`,\n        code: function hammingWeight(n) {\n            //Convert the binary string into a string split into array form.\n            //For each element in the array, if it is a '1' representing a set bit, add to a total, starting at 0.\n            return n.toString(2)\n                .split(\"\")\n                .reduce((prev, current) => current === \"1\" ? prev + 1 : prev, 0)\n        },\n        arguments: {\n            descriptions: [\n                {\n                    text: \"Standard Decimal Integer\",\n                    type: \"Number\"\n                }\n            ]\n        }\n    },\n    higherVersion: {\n        name: 'higherVersion',\n        instructions: `Given two version strings composed of several non-negative decimal fields separated by periods (\".\"), both strings contain equal number of numeric fields. Return true if the first version is higher than the second version and false otherwise.\n\n        The syntax follows the regular semver ordering rules:\n        \n        1.0.5 < 1.1.0 < 1.1.5 < 1.1.10 < 1.2.0 < 1.2.2\n        < 1.2.10 < 1.10.2 < 2.0.0 < 10.0.0\n        There are no leading zeros in any of the numeric fields, i.e. you do not have to handle inputs like 100.020.003 (it would instead be given as 100.20.3).`,\n        codeOutput: \n        `function higherVersion(ver1, ver2) {\n            //If the strings are the same, return false;\n            if(ver1 === ver2) return false;\n            //Create array versions of each number as numbers for proper comparisons\n            let ver1split = ver1.split(\".\").map(string => Number(string));\n            let ver2split = ver2.split(\".\").map(string => Number(string));\n            //Return early when the appropriate condition is met.\n            for(let i = 0; i < ver1split.length; i++) {\n                if(ver2split[i] > ver1split[i]) return false;\n                if(ver1split[i] > ver2split[i]) return true;\n            }\n        }`,\n        code: function higherVersion(ver1, ver2) {\n            //If the strings are the same, return false;\n            if(ver1 === ver2) return false;\n            //Create array versions of each number as numbers for proper comparisons\n            let ver1split = ver1.split(\".\").map(string => Number(string));\n            let ver2split = ver2.split(\".\").map(string => Number(string));\n            //Return early when the appropriate condition is met.\n            for(let i = 0; i < ver1split.length; i++) {\n                if(ver2split[i] > ver1split[i]) return false;\n                if(ver1split[i] > ver2split[i]) return true;\n            }\n        },\n        arguments: {\n            descriptions: [\n                {\n                    text: \"String of numbers/decimals as described above (e.g. 1.2.3)\",\n                    type: \"String\"\n                },\n                {\n                    text: \"String of numbers/decimals as described above (e.g. 1.2.3)\",\n                    type: \"String\"\n                }\n            ]\n        }\n    },\n    holiday: {\n        name: 'holiday',\n        instructions: `John Doe likes holidays very much, and he was very happy to hear that his country's government decided to introduce yet another one. He heard that the new holiday will be celebrated each year on the xth week of month, on weekDay.\n\n        Your task is to return the day of month on which the holiday will be celebrated in the year yearNumber.\n        \n        For your convenience, here are the lists of months names and lengths and the list of days of the week names.\n        \n        Months: \"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\".\n        Months lengths: 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31.\n        Days of the week: \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\".\n        Please, note that in leap years February has 29 days.`,\n        codeOutput: \n        `function holiday(x, weekDay, month, yearNumber) {\n            //Keep track of months.\n                let months = [\n                    { name: \"January\", days: 31 },\n                    { name: \"February\", days: 28 },\n                    { name: \"March\", days: 31 },\n                    { name: \"April\", days: 30 },\n                    { name: \"May\", days: 31 },\n                    { name: \"June\", days: 30 },\n                    { name: \"July\", days: 31 },\n                    { name: \"August\", days: 31 },\n                    { name: \"September\", days: 30 },\n                    { name: \"October\", days: 31 },\n                    { name: \"November\", days: 30 },\n                    { name: \"December\", days: 31 }\n                ];\n                //Keep track of if this year is a leap year.\n                let isLeap = false;\n                \n                //Keep track of days.\n                let days = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"];\n                \n                //Find the day of the week that it will be at the beginning of a given month.\n                const findCurrentDay = inputDate => {\n                    //Find the number of days in years passed since 1996.\n                    let days = ((inputDate[1] - 1996) * 365);\n                    //Add in the total number of leap days that passed in years before.\n                    days += Math.ceil((inputDate[1] - 1996) / 4);\n                    //Remove extra leap day from specific years.\n                    if(inputDate[1] > 2100) days--;\n                    if(inputDate[1] > 2200) days--;\n                    if(inputDate[1] > 2300) days--;\n                    //Add in one more day if this year is a leap year, AND if leap day already passed, excluding certain years (which aren't a leap year)\n                    \n                    if(inputDate[1] % 4 === 0 && inputDate[1] !== 2100 && inputDate[1] !== 2200 && inputDate[1] !== 2300 && inputDate[1] !== 2500) {\n                        if(inputDate[0] > 2) days++;\n                        isLeap = true;\n                    };\n                    \n                    //Add in the number of days that have passed so far before this month this year (leap day already included if this is a leap year).\n                    for(let i = 0; i < inputDate[0] - 1; i++) {\n                        days += months[i].days;\n                    }\n                    \n                    //Finally, add in the number of days passed this month.\n                    days += (inputDate[2] - 1);\n                    \n                    //Return the number of the current day of the week from the input string (if 0 - Monday, 6 - Sunday, etc.)\n                    return days % 7;\n                };\n                \n                //Find the month number of the month name passed into the function.\n                let monthNumber = months.indexOf(months.find(thisMonth => thisMonth.name === month)) + 1;\n                \n                //Find the day of the week (0 - Monday; 6 - Sunday) on the first day of the target month/year.\n                let dayOfFirst = findCurrentDay([monthNumber, yearNumber, 1]);\n                \n                //Find the date when the holiday will occur.\n                let dateOfHoliday = 1 + (days.indexOf(weekDay) === dayOfFirst  ? 0 : days.indexOf(weekDay) > dayOfFirst ? days.indexOf(weekDay) - dayOfFirst : (7 - dayOfFirst) + days.indexOf(weekDay)) + (7 * (x - 1));\n                \n                //Check one final case: If this is an actual leap day, don't return -1. In any case, return the date if not over bounds of the given month.    \n                return dateOfHoliday <= months[months.indexOf(months.find(thisMonth => thisMonth.name === month))].days ||\n                (isLeap && month === \"February\" && dateOfHoliday === 29) ? \n                dateOfHoliday :\n                -1;\n        }`,\n        code: function holiday(x, weekDay, month, yearNumber) {\n            //Keep track of months.\n                let months = [\n                    { name: \"January\", days: 31 },\n                    { name: \"February\", days: 28 },\n                    { name: \"March\", days: 31 },\n                    { name: \"April\", days: 30 },\n                    { name: \"May\", days: 31 },\n                    { name: \"June\", days: 30 },\n                    { name: \"July\", days: 31 },\n                    { name: \"August\", days: 31 },\n                    { name: \"September\", days: 30 },\n                    { name: \"October\", days: 31 },\n                    { name: \"November\", days: 30 },\n                    { name: \"December\", days: 31 }\n                ];\n                //Keep track of if this year is a leap year.\n                let isLeap = false;\n                \n                //Keep track of days.\n                let days = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"];\n                \n                //Find the day of the week that it will be at the beginning of a given month.\n                const findCurrentDay = inputDate => {\n                    //Find the number of days in years passed since 1996.\n                    let days = ((inputDate[1] - 1996) * 365);\n                    //Add in the total number of leap days that passed in years before.\n                    days += Math.ceil((inputDate[1] - 1996) / 4);\n                    //Remove extra leap day from specific years.\n                    if(inputDate[1] > 2100) days--;\n                    if(inputDate[1] > 2200) days--;\n                    if(inputDate[1] > 2300) days--;\n                    //Add in one more day if this year is a leap year, AND if leap day already passed, excluding certain years (which aren't a leap year)\n                    \n                    if(inputDate[1] % 4 === 0 && inputDate[1] !== 2100 && inputDate[1] !== 2200 && inputDate[1] !== 2300 && inputDate[1] !== 2500) {\n                        if(inputDate[0] > 2) days++;\n                        isLeap = true;\n                    };\n                    \n                    //Add in the number of days that have passed so far before this month this year (leap day already included if this is a leap year).\n                    for(let i = 0; i < inputDate[0] - 1; i++) {\n                        days += months[i].days;\n                    }\n                    \n                    //Finally, add in the number of days passed this month.\n                    days += (inputDate[2] - 1);\n                    \n                    //Return the number of the current day of the week from the input string (if 0 - Monday, 6 - Sunday, etc.)\n                    return days % 7;\n                };\n                \n                //Find the month number of the month name passed into the function.\n                let monthNumber = months.indexOf(months.find(thisMonth => thisMonth.name === month)) + 1;\n                \n                //Find the day of the week (0 - Monday; 6 - Sunday) on the first day of the target month/year.\n                let dayOfFirst = findCurrentDay([monthNumber, yearNumber, 1]);\n                \n                //Find the date when the holiday will occur.\n                let dateOfHoliday = 1 + (days.indexOf(weekDay) === dayOfFirst  ? 0 : days.indexOf(weekDay) > dayOfFirst ? days.indexOf(weekDay) - dayOfFirst : (7 - dayOfFirst) + days.indexOf(weekDay)) + (7 * (x - 1));\n                \n                //Check one final case: If this is an actual leap day, don't return -1. In any case, return the date if not over bounds of the given month.    \n                return dateOfHoliday <= months[months.indexOf(months.find(thisMonth => thisMonth.name === month))].days ||\n                (isLeap && month === \"February\" && dateOfHoliday === 29) ? \n                dateOfHoliday :\n                -1;\n        },\n        arguments: {\n            descriptions: [\n                {\n                    text: \"Integer x\",\n                    type: \"Number\"\n                },\n                {\n                    text: \"Weekday (Written Correctly)\",\n                    type: \"String\"\n                },\n                {\n                    text: \"Month (Written Correctly)\",\n                    type: \"String\"\n                },\n                {\n                    text: \"Year (Written Correctly)\",\n                    type: \"Number\"\n                }\n            ]\n        }\n    },\n    houseNumbersSum: {\n        name: 'houseNumbersSum',\n        instructions: `A boy is walking a long way from school to his home. To make the walk more fun he decides to add up all the numbers of the houses that he passes by during his walk. Unfortunately, not all of the houses have numbers written on them, and on top of that the boy is regularly taking turns to change streets, so the numbers don't appear to him in any particular order.\n\n        At some point during the walk the boy encounters a house with number 0 written on it, which surprises him so much that he stops adding numbers to his total right after seeing that house.\n        \n        For the given sequence of houses determine the sum that the boy will get. It is guaranteed that there will always be at least one 0 house on the path.`,\n        codeOutput: \n        `function houseNumbersSum(inputArray) {\n            return inputArray.slice(0, inputArray.findIndex(element => element === 0)).reduce((a, b) => a += b, 0); \n        }`,\n        code: function houseNumbersSum(inputArray) {\n            return inputArray.slice(0, inputArray.findIndex(element => element === 0)).reduce((a, b) => a += b, 0); \n        },\n        arguments: {\n            descriptions: [\n                {\n                    text: \"Array of Integers (No Brackets []; Form of 1,2,3,4...)\",\n                    type: \"NumberArray\"\n                }\n            ]\n        }\n    },\n    houseOfCats: {\n        name: 'houseOfCats',\n        instructions: `There are some people and cats in a house. You are given the number of legs they have all together. Your task is to return an array containing every possible number of people that could be in the house sorted in ascending order. It's guaranteed that each person has 2 legs and each cat has 4 legs.`,\n        codeOutput: \n        `function houseOfCats(legs) {\n            //Start assuming all legs belong to people.\n            //Incrementally group 4 legs into cats, each time grouping the legs left into 2 (people)\n            let legsLeft = legs;\n            let possiblePeople = [];\n            while(legsLeft >= 0) {\n                //Put this possible number into the beginning of the array so it is sorted.\n                possiblePeople.unshift(legsLeft / 2);\n                legsLeft -= 4;\n            }\n            return possiblePeople;\n        }`,\n        code: function houseOfCats(legs) {\n            //Start assuming all legs belong to people.\n            //Incrementally group 4 legs into cats, each time grouping the legs left into 2 (people)\n            let legsLeft = legs;\n            let possiblePeople = [];\n            while(legsLeft >= 0) {\n                //Put this possible number into the beginning of the array so it is sorted.\n                possiblePeople.unshift(legsLeft / 2);\n                legsLeft -= 4;\n            }\n            return possiblePeople;\n        },\n        arguments: {\n            descriptions: [\n                {\n                    text: \"Integer (Number of Legs)\",\n                    type: \"Number\"\n                }\n            ]\n        }\n    },\n    htmlEndTagByStartTag: {\n        name: 'htmlEndTagByStartTag',\n        instructions: `You are implementing your own HTML editor. To make it more comfortable for developers you would like to add an auto-completion feature to it.\n\n        Given the starting HTML tag, find the appropriate end tag which your editor should propose.`,\n        codeOutput: \n        `function htmlEndTagByStartTag(startTag) {\n            //Get the tag name.\n            let tag = startTag.substr(1, startTag.indexOf(\" \")) ? \n            startTag.substr(1, startTag.indexOf(\" \") - 1) : \n            startTag.substr(1, startTag.indexOf(\">\") - 1);\n            //Return the closing version of the tag.\n            return \\`</\\${tag}>\\`;\n        }`,\n        code: function htmlEndTagByStartTag(startTag) {\n            //Get the tag name.\n            let tag = startTag.substr(1, startTag.indexOf(\" \")) ? \n            startTag.substr(1, startTag.indexOf(\" \") - 1) : \n            startTag.substr(1, startTag.indexOf(\">\") - 1);\n            //Return the closing version of the tag (Formatted for output in browser).\n            return `&lt;/${tag}&gt;`;\n        },\n        arguments: {\n            descriptions: [\n                {\n                    text: \"Starting HTML Tag\",\n                    type: \"String\"\n                }\n            ]\n        }\n    },\n    increaseNumberRoundness: {\n        name: 'increaseNumberRoundness',\n        instructions: `Define an integer's roundness as the number of trailing zeroes in it.\n\n        Given an integer n, check if it's possible to increase n's roundness by swapping some pair of its digits.`,\n        codeOutput: \n        `function increaseNumberRoundness(n) {\n            //Create an array out of this number.\n            let number = String(n).split(\"\").reverse();\n            let zeroEnd = false;\n            console.log(number);\n            //Go through each number. If we encounter a \"second\" group of zeros, we know we can swap.\n            for(let i = 0; i < number.length; i++) {\n                if(number[i] !== \"0\") {\n                    zeroEnd = true;\n                } else if(number[i] === \"0\" && zeroEnd) {\n                    return true;\n                }\n            }\n            return false;\n        }`,\n        code: function increaseNumberRoundness(n) {\n            //Create an array out of this number.\n            let number = String(n).split(\"\").reverse();\n            let zeroEnd = false;\n            console.log(number);\n            //Go through each number. If we encounter a \"second\" group of zeros, we know we can swap.\n            for(let i = 0; i < number.length; i++) {\n                if(number[i] !== \"0\") {\n                    zeroEnd = true;\n                } else if(number[i] === \"0\" && zeroEnd) {\n                    return true;\n                }\n            }\n            return false;\n        },\n        arguments: {\n            descriptions: [\n                {\n                    text: \"Whole Number Integer\",\n                    type: \"Number\"\n                }\n            ]\n        }\n    },\n    insertionSortList: {\n        name: `insertionSortList`,\n        instructions: `Implement insertion sort on an array of integers.`,\n        codeOutput: \n        `var insertionSortList = function(head) {\n            //Iterate through the unsorted portion.\n            for(let i = 1; i < head.length; i++) {\n                let currentElement = head[i];\n                //Iterate back through the sorted portion of this list.\n                let j = i - 1;\n                while((j >= 0) && (currentElement < head[j])) {\n                    //Start shifting all elements upward in the sorted portion.\n                    head[j + 1] = head[j];\n                    //Move to the next element down.\n                    j--;\n                }\n                //Place the current element in its correct spot\n                head[j + 1] = currentElement;\n            }\n            return head;\n        };`,\n        code: function insertionSortList(head) {\n            //Iterate through the unsorted portion.\n            for(let i = 1; i < head.length; i++) {\n                let currentElement = head[i];\n                //Iterate back through the sorted portion of this list.\n                let j = i - 1;\n                while((j >= 0) && (currentElement < head[j])) {\n                    //Start shifting all elements upward in the sorted portion.\n                    head[j + 1] = head[j];\n                    //Move to the next element down.\n                    j--;\n                }\n                //Place the current element in its correct spot\n                head[j + 1] = currentElement;\n            }\n            return head;\n        },\n        arguments: {\n            descriptions: [\n                {\n                    text: \"Array of Integers (e,g. 5,4,3,2,1)\",\n                    type: \"NumberArray\"\n                }\n            ]\n        }\n    },\n    integerToStringOfFixedWidth: {\n        name: 'integerToStringOfFixedWidth',\n        instructions: `Given a positive integer number and a certain length, we need to modify the given number to have a specified length. We are allowed to do that either by cutting out leading digits (if the number needs to be shortened) or by adding 0s in front of the original number.`,\n        codeOutput: \n        `function integerToStringOfFixedWidth(number, width) {\n            //If the number string is the same size, simply return string version.\n            //If the number string is longer, return a substring trimming off the first characters until the sizes are equal.\n            //If the number string is shorter, put 0s into the front by using array concat, filling with the correct number of 0s, then joining back into a string.\n            return String(number).length === width ? \n            String(number) :\n            String(number).length > width ?\n            String(number).substr(String(number).length - width) :\n            [].concat(...new Array(width - String(number).length).fill(0), String(number).split(\"\")).join(\"\");\n        }`,\n        code: function integerToStringOfFixedWidth(number, width) {\n            //If the number string is the same size, simply return string version.\n            //If the number string is longer, return a substring trimming off the first characters until the sizes are equal.\n            //If the number string is shorter, put 0s into the front by using array concat, filling with the correct number of 0s, then joining back into a string.\n            return String(number).length === width ? \n            String(number) :\n            String(number).length > width ?\n            String(number).substr(String(number).length - width) :\n            [].concat(...new Array(width - String(number).length).fill(0), String(number).split(\"\")).join(\"\");\n        },\n        arguments: {\n            descriptions: [\n                {\n                    text: \"Integer (number)\",\n                    type: \"Number\"\n                },\n                {\n                    text: \"Integer (width)\",\n                    type: \"Number\"\n                }\n            ]\n        }\n    },\n    intersection: {\n        name: `intersection`,\n        instructions: `Given two integer arrays nums1 and nums2, return an array of their intersection. Each element in the result must be unique and you may return the result in any order.`,\n        codeOutput: \n        `var intersection = function(nums1, nums2) {\n            //Run function with correct parameters depending on which array has larger length.\n            if(nums1.length > nums2.length) return findIntersections(nums1, nums2);\n            return findIntersections(nums2, nums1);\n            \n            //Helper function looks through the larger array to find elements in the shorter array.\n            function findIntersections(shorterArray, largerArray) {\n                let intersections = [];\n                for(let i = 0; i < shorterArray.length; i++) {\n                    //Unique new values (found in both arrays) are added as intersections.\n                    if(largerArray.includes(shorterArray[i]) && !intersections.includes(shorterArray[i])) {\n                        intersections.push(shorterArray[i]);\n                    }\n                }\n                return intersections;\n            }\n        };`,\n        code: function intersection(nums1, nums2) {\n            //Run function with correct parameters depending on which array has larger length.\n            if(nums1.length > nums2.length) return findIntersections(nums1, nums2);\n            return findIntersections(nums2, nums1);\n            \n            //Helper function looks through the larger array to find elements in the shorter array.\n            function findIntersections(shorterArray, largerArray) {\n                let intersections = [];\n                for(let i = 0; i < shorterArray.length; i++) {\n                    //Unique new values (found in both arrays) are added as intersections.\n                    if(largerArray.includes(shorterArray[i]) && !intersections.includes(shorterArray[i])) {\n                        intersections.push(shorterArray[i]);\n                    }\n                }\n                return intersections;\n            }\n        },\n        arguments: {\n            descriptions: [\n                {\n                    text: \"Array of Integers (Form of 1,2,3...)\",\n                    type: \"NumberArray\"\n                },\n                {\n                    text: \"Array of Integers (Form of 1,2,3...)\",\n                    type: \"NumberArray\"\n                }\n            ]\n        }\n    },\n    isBeautifulString: {\n        name: 'isBeautifulString',\n        instructions: `A string is said to be beautiful if each letter in the string appears at most as many times as the previous letter in the alphabet within the string; ie: b occurs no more times than a; c occurs no more times than b; etc. Note that letter a has no previous letter.\n\n        Given a string, check whether it is beautiful.`,\n        codeOutput: \n        `function isBeautifulString(inputString) {\n            //Create character map using character codes as keys\n            let inputArray = inputString.split(\"\");\n            let charMap = {};\n            \n            inputArray.forEach(character => {\n                charMap[String(character.charCodeAt(0))] ? \n                charMap[String(character.charCodeAt(0))]++ : \n                charMap[String(character.charCodeAt(0))] = 1;\n            });\n            \n            //Go through each key in the character map.\n            for(let charKey in charMap) {\n                //If this key has more than the 'previous' key based on character codes, OR if we are not at 'a' and there is no key for the previous character code, return false;\n                if(charMap[charKey] > charMap[String(Number(charKey) - 1)] || !charMap[String(Number(charKey) - 1)] && charKey !== \"97\") return false;\n            }\n            \n            return true;\n        }`,\n        code: function isBeautifulString(inputString) {\n            //Create character map using character codes as keys\n            let inputArray = inputString.split(\"\");\n            let charMap = {};\n            \n            inputArray.forEach(character => {\n                charMap[String(character.charCodeAt(0))] ? \n                charMap[String(character.charCodeAt(0))]++ : \n                charMap[String(character.charCodeAt(0))] = 1;\n            });\n            \n            //Go through each key in the character map.\n            for(let charKey in charMap) {\n                //If this key has more than the 'previous' key based on character codes, OR if we are not at 'a' and there is no key for the previous character code, return false;\n                if(charMap[charKey] > charMap[String(Number(charKey) - 1)] || !charMap[String(Number(charKey) - 1)] && charKey !== \"97\") return false;\n            }\n            \n            return true;\n        },\n        arguments: {\n            descriptions: [\n                {\n                    text: \"Input String\",\n                    type: \"String\"\n                }\n            ]\n        }\n    },\n    isCaseInsensitivePalindrome: {\n        name: 'isCaseInsensitivePalindrome',\n        instructions: `Given a string, check if it can become a palindrome through a case change of some (possibly, none) letters.`,\n        codeOutput: \n        `function isCaseInsensitivePalindrome(inputString) {\n            //Default to lower case to compare palindromes.\n            let lowerString = inputString.toLowerCase();\n            //If the lowercase version is a palindrome, return true;\n            if(lowerString.split(\"\").reverse().join(\"\") === lowerString) return true;\n            return false;\n        }`,\n        code: function isCaseInsensitivePalindrome(inputString) {\n            //Default to lower case to compare palindromes.\n            let lowerString = inputString.toLowerCase();\n            //If the lowercase version is a palindrome, return true;\n            if(lowerString.split(\"\").reverse().join(\"\") === lowerString) return true;\n            return false;\n        },\n        arguments: {\n            descriptions: [\n                {\n                    text: \"Input String\",\n                    type: \"String\"\n                }\n            ]\n        }\n    },\n    isDigit: {\n        name: 'isDigit',\n        instructions: `Determine if symbol is a digit`,\n        codeOutput: \n        `function isDigit(symbol) {\n            if(!(symbol.charCodeAt(0) > 47 && symbol.charCodeAt(0) < 58)) return false;\n            return true;\n        }`,\n        code: function isDigit(symbol) {\n            if(!(symbol.charCodeAt(0) > 47 && symbol.charCodeAt(0) < 58)) return false;\n            return true;\n        },\n        arguments: {\n            descriptions: [\n                {\n                    text: \"Single Character\",\n                    type: \"String\"\n                }\n            ]\n        }\n    },\n    isInfiniteProcess: {\n        name: 'isInfiniteProcess',\n        instructions: `Given integers a and b, determine whether the following pseudocode results in an infinite loop\n\n        while a is not equal to b do\n          increase a by 1\n          decrease b by 1\n        Assume that the program is executed on a virtual machine which can store arbitrary long numbers and execute forever.`,\n        codeOutput: \n        `function isInfiniteProcess(a, b) {\n            //Is a greater than b? If so, it is already infinite.\n            return a > b ? \n            true : \n            //Otherwise, is a equal to b? If so, this is not infinite.\n            a === b ? \n            false : \n            //Otherwise, does the difference between b and a result in an odd number greater than 0? \n            //If so, it is infinite. Otherwise, it is not.\n            b - a > 0 && (b - a) % 2 === 1 ? \n            true : \n            false;\n        }`,\n        code: function isInfiniteProcess(a, b) {\n            //Is a greater than b? If so, it is already infinite.\n            return a > b ? \n            true : \n            //Otherwise, is a equal to b? If so, this is not infinite.\n            a === b ? \n            false : \n            //Otherwise, does the difference between b and a result in an odd number greater than 0? \n            //If so, it is infinite. Otherwise, it is not.\n            b - a > 0 && (b - a) % 2 === 1 ? \n            true : \n            false;\n        },\n        arguments: {\n            descriptions: [\n                {\n                    text: \"Integer a\",\n                    type: \"Number\"\n                },\n                {\n                    text: \"Integer b\",\n                    type: \"Number\"\n                }\n            ]\n        }\n    },\n    isInformationConsistent: {\n        name: 'isInformationConsistent',\n        instructions: `Court is in session. We got a group of witnesses who have all taken an oath to tell the truth. The prosecutor is pointing at the defendants one by one and asking each witnesses a simple question - \"guilty or not?\". The witnesses are allowed to respond in one of the following three ways:\n\n        I am sure he/she is guilty.\n        I am sure he/she is innocent.\n        I have no idea.\n        The prosecutor has a hunch that one of the witnesses might not be telling the truth so she decides to cross-check all of their testimonies and see if the information gathered is consistent, i.e. there are no two witnesses A and B and a defendant C such that A says C is guilty while B says C is innocent.`,\n        codeOutput: \n        `function isInformationConsistent(evidences) {\n            //Loop through each column and see if we see values of 1 and -1 simultaneously.\n            for(let col = 0; col < evidences[0].length; col++) {\n                //Loop through each witness (row) of this defendant (col).\n                let foundGuilty = false;\n                let foundInnocent = false;\n                for(let row = 0; row < evidences.length; row++) {\n                    //Check if a guilty or innocent value is found.\n                    if(evidences[row][col] === -1) foundInnocent = true;\n                    if(evidences[row][col] === 1) foundGuilty = true;\n                    //If both innocent and guilty verdicts have been found, return false.\n                    if(foundGuilty && foundInnocent) return false;\n                }\n            }\n            return true;\n        }`,\n        code: function isInformationConsistent(evidences) {\n            //Loop through each column and see if we see values of 1 and -1 simultaneously.\n            for(let col = 0; col < evidences[0].length; col++) {\n                //Loop through each witness (row) of this defendant (col).\n                let foundGuilty = false;\n                let foundInnocent = false;\n                for(let row = 0; row < evidences.length; row++) {\n                    //Check if a guilty or innocent value is found.\n                    if(evidences[row][col] === -1) foundInnocent = true;\n                    if(evidences[row][col] === 1) foundGuilty = true;\n                    //If both innocent and guilty verdicts have been found, return false.\n                    if(foundGuilty && foundInnocent) return false;\n                }\n            }\n            return true;\n        },\n        arguments: {\n            descriptions: [\n                {\n                    text: \"Array of Equal-Length Integer Arrays With Only 1, -1, and 0's (Form of [-1,0,1], [1,0,-1]...)\",\n                    type: \"NumberArrayArray\"\n                }\n            ]\n        }\n    },\n    isIPv4Address: {\n        name: 'isIPv4Address',\n        instructions: `An IP address is a numerical label assigned to each device (e.g., computer, printer) participating in a computer network that uses the Internet Protocol for communication. There are two versions of the Internet protocol, and thus two versions of addresses. One of them is the IPv4 address.\n\n        Given a string, find out if it satisfies the IPv4 address naming rules.`,\n        codeOutput: \n        `function isIPv4Address(inputString) {\n            let octets = inputString.split(\".\");\n            console.log(octets);\n            \n            //Handle length\n            if(octets.length !== 4) return false;\n            \n            //Handle the size of each octet\n            if(!octets.every(octet => octet > -1 && octet < 256)) return false;\n            \n            //Handle blanks\n            if(octets.some(octet => octet === \"\")) return false;\n            \n            //Handle number errors (more than one digit for single-digit numbers)\n            if(octets.some(octet => octet < 10 && octet.length > 1)) return false;\n            \n            return true;\n        }`,\n        code: function isIPv4Address(inputString) {\n            let octets = inputString.split(\".\");\n            console.log(octets);\n            \n            //Handle length\n            if(octets.length !== 4) return false;\n            \n            //Handle the size of each octet\n            if(!octets.every(octet => octet > -1 && octet < 256)) return false;\n            \n            //Handle blanks\n            if(octets.some(octet => octet === \"\")) return false;\n            \n            //Handle number errors (more than one digit for single-digit numbers)\n            if(octets.some(octet => octet < 10 && octet.length > 1)) return false;\n            \n            return true;\n        },\n        arguments: {\n            descriptions: [\n                {\n                    text: \"Input Address\",\n                    type: \"String\"\n                }\n            ]\n        }\n    },\n    isLucky: {\n        name: 'isLucky',\n        instructions: `Ticket numbers usually consist of an even number of digits. A ticket number is considered lucky if the sum of the first half of the digits is equal to the sum of the second half.\n\n        Given a ticket number n, determine if it's lucky or not.`,\n        codeOutput: \n        `function isLucky(n) {\n            let nString = String(n);\n            \n            let sum1 = 0;\n            for(let i = nString.length / 2; i < nString.length; i++) {\n                sum1 += Number(nString[i]);\n            }\n            \n            let sum2 = 0;\n            for(let i = 0; i < nString.length / 2; i++) {\n                sum2 += Number(nString[i]);\n            }\n            \n            if(sum1 === sum2) {\n                return true;\n            } else {\n                return false;\n            }\n        }`,\n        code: function isLucky(n) {\n            let nString = String(n);\n            \n            let sum1 = 0;\n            for(let i = nString.length / 2; i < nString.length; i++) {\n                sum1 += Number(nString[i]);\n            }\n            \n            let sum2 = 0;\n            for(let i = 0; i < nString.length / 2; i++) {\n                sum2 += Number(nString[i]);\n            }\n            \n            if(sum1 === sum2) {\n                return true;\n            } else {\n                return false;\n            }\n        },\n        arguments: {\n            descriptions: [\n                {\n                    text: \"Integer\",\n                    type: \"Number\"\n                }\n            ]\n        }\n    },\n    isMAC48Address: {\n        name: 'isMAC48Address',\n        instructions: `A media access control address (MAC address) is a unique identifier assigned to network interfaces for communications on the physical network segment.\n\n        The standard (IEEE 802) format for printing MAC-48 addresses in human-friendly form is six groups of two hexadecimal digits (0 to 9 or A to F), separated by hyphens (e.g. 01-23-45-67-89-AB).\n        \n        Your task is to check by given string inputString whether it corresponds to MAC-48 address or not.`,\n        codeOutput: \n        `function isMAC48Address(inputString) {\n            let groups = inputString.split(\"-\");\n            //Return early if this array is not 6 valid groups of 2 characters\n            if(groups.length !== 6) return false;\n            //Return early if this array's elements are not 2 characters long.\n            for(let i = 0; i < groups.length; i++) {\n                if(groups[i].length !== 2) return false;\n            }\n            \n            console.log(groups);\n            \n            //Make sure the characters in each element are valid\n            for(let i = 0; i < groups.length; i++) {\n                //Go through each character of all groups, and make sure it is between 0-9 or A-F.\n                if(!(groups[i].charCodeAt(0) > 47 && groups[i].charCodeAt(0) < 58 ||\n                groups[i].charCodeAt(0) > 64 && groups[i].charCodeAt(0) < 71)) {\n                    return false;\n                }\n                if(!(groups[i].charCodeAt(1) > 47 && groups[i].charCodeAt(1) < 58 ||\n                groups[i].charCodeAt(1) > 64 && groups[i].charCodeAt(1) < 71)) {\n                    return false;\n                }\n            }\n            \n            return true;\n        }`,\n        code: function isMAC48Address(inputString) {\n            let groups = inputString.split(\"-\");\n            //Return early if this array is not 6 valid groups of 2 characters\n            if(groups.length !== 6) return false;\n            //Return early if this array's elements are not 2 characters long.\n            for(let i = 0; i < groups.length; i++) {\n                if(groups[i].length !== 2) return false;\n            }\n            \n            console.log(groups);\n            \n            //Make sure the characters in each element are valid\n            for(let i = 0; i < groups.length; i++) {\n                //Go through each character of all groups, and make sure it is between 0-9 or A-F.\n                if(!(groups[i].charCodeAt(0) > 47 && groups[i].charCodeAt(0) < 58 ||\n                groups[i].charCodeAt(0) > 64 && groups[i].charCodeAt(0) < 71)) {\n                    return false;\n                }\n                if(!(groups[i].charCodeAt(1) > 47 && groups[i].charCodeAt(1) < 58 ||\n                groups[i].charCodeAt(1) > 64 && groups[i].charCodeAt(1) < 71)) {\n                    return false;\n                }\n            }\n            \n            return true;\n        },\n        arguments: {\n            descriptions: [\n                {\n                    text: \"Input String\",\n                    type: \"String\"\n                }\n            ]\n        }\n    },\n    isOneBitCharacter: {\n        name: `isOneBitCharacter`,\n        instructions: `We have two special characters:\n\n        The first character can be represented by one bit 0.\n        The second character can be represented by two bits (10 or 11).\n        Given a binary array bits that ends with 0, return true if the last character must be a one-bit character.`,\n        codeOutput: \n        `var isOneBitCharacter = function(bits) {\n            //Put all bits into groups according to the rules (10, 11, or 0).\n            let groups = [];\n            for(let i = 0; i < bits.length; i++) {\n                let thisGroup = [];\n                if(bits[i] === 1) {\n                    //If this bit is a 1, it means the next bit must be part of this group.\n                    thisGroup.push(bits[i]);\n                    thisGroup.push(bits[i + 1]);\n                    groups.push(thisGroup);\n                    //Skip over next element, since it is part of this group.\n                    i++;\n                } else {\n                    //If this bit is a 0, it means this is on its own.\n                    thisGroup.push(bits[i]);\n                    groups.push(thisGroup);\n                }\n            }\n            //Remove the last group. If this is a single zero, return true.\n            let lastGroup = groups.pop();\n            if(lastGroup.length === 1 && lastGroup[0] === 0) return true;\n            return false;\n        };`,\n        code: function isOneBitCharacter(bits) {\n            //Put all bits into groups according to the rules (10, 11, or 0).\n            let groups = [];\n            for(let i = 0; i < bits.length; i++) {\n                let thisGroup = [];\n                if(bits[i] === 1) {\n                    //If this bit is a 1, it means the next bit must be part of this group.\n                    thisGroup.push(bits[i]);\n                    thisGroup.push(bits[i + 1]);\n                    groups.push(thisGroup);\n                    //Skip over next element, since it is part of this group.\n                    i++;\n                } else {\n                    //If this bit is a 0, it means this is on its own.\n                    thisGroup.push(bits[i]);\n                    groups.push(thisGroup);\n                }\n            }\n            //Remove the last group. If this is a single zero, return true.\n            let lastGroup = groups.pop();\n            if(lastGroup.length === 1 && lastGroup[0] === 0) return true;\n            return false;\n        },\n        arguments: {\n            descriptions: [\n                {\n                    text: \"Array of 1s and 0s, built of only 10, 11, or 0 (e.g. 1,1,1,0,0)\",\n                    type: \"NumberArray\"\n                }\n            ]\n        }\n    },\n    isPalindrome: {\n        name: `isPalindrome`,\n        instructions: `A phrase is a palindrome if, after converting all uppercase letters into lowercase letters and removing all non-alphanumeric characters, it reads the same forward and backward. Alphanumeric characters include letters and numbers.\n        Given a string s, return true if it is a palindrome, or false otherwise.`,\n        codeOutput: \n        `var isPalindrome = function(s) {\n            //Compare the reversed string to the normal string (both stripped of special characters and lower case)\n            return s.toLowerCase()\n                .replace(/[^0-9a-z]/gi, '')\n                .split('')\n                .reverse()\n                .join('') === s.toLowerCase().replace(/[^0-9a-z]/gi, '');\n        };`,\n        code: function isPalindrome(s) {\n            //Compare the reversed string to the normal string (both stripped of special characters and lower case)\n            return s.toLowerCase()\n                .replace(/[^0-9a-z]/gi, '')\n                .split('')\n                .reverse()\n                .join('') === s.toLowerCase().replace(/[^0-9a-z]/gi, '');\n        },\n        arguments: {\n            descriptions: [\n                {\n                    text: \"String to check\",\n                    type: \"String\"\n                }\n            ]\n        }\n    },\n    isPerfectSquare: {\n        name: `isPerfectSquare`,\n        instructions: `Given a positive integer num, write a function which returns True if num is a perfect square else False.\n        Follow up: Do not use any built-in library function such as sqrt.`,\n        codeOutput: \n        `var isPerfectSquare = function(num) {\n            //Start with a single unit length.\n            let side = 1;\n            //Incrementally increase the side length by 1, until we go over the desired area in square units.\n            while(side * side <= num) {\n                //If this side length results in the target area num, return true.\n                if(side * side === num) return true;\n                side++;\n            }\n            return false;\n        };`,\n        code: function isPerfectSquare(num) {\n            //Start with a single unit length.\n            let side = 1;\n            //Incrementally increase the side length by 1, until we go over the desired area in square units.\n            while(side * side <= num) {\n                //If this side length results in the target area num, return true.\n                if(side * side === num) return true;\n                side++;\n            }\n            return false;\n        },\n        arguments: {\n            descriptions: [\n                {\n                    text: \"Integer Number\",\n                    type: \"Number\"\n                }\n            ]\n        }\n    },\n    isPower: {\n        name: 'isPower',\n        instructions: `Determine if the given number is a power of some non-negative integer.`,\n        codeOutput: \n        `function isPower(n) {\n            //Handle edge case.\n            if(n === 1) return true;\n            \n            //Find all factors of n\n            let factors = [];\n            let max = n;\n            for(let i = 2; i < max; i++) {\n                if(n % i === 0) {\n                    factors.push(i);\n                    factors.push(n / i);\n                    max = n / 1;\n                }\n            }\n            //Sort the factors.\n            factors.sort((a, b) => a - b);\n            \n            //For all factors, and as long as the current factor times itself is not larger than n, see if we can equal n by multiplying that factor repeatedly. If so, return true\n            for(let i = 0; i < factors.length; i++) {\n                let currentProduct = factors[i];\n                while(currentProduct * factors[i] <= n) {\n                    currentProduct *= factors[i];\n                    if(currentProduct === n) return true;\n                }\n            }\n            \n            //Once we have gone through all factors, return false.\n            return false;\n        }`,\n        code: function isPower(n) {\n            //Handle edge case.\n            if(n === 1) return true;\n            \n            //Find all factors of n\n            let factors = [];\n            let max = n;\n            for(let i = 2; i < max; i++) {\n                if(n % i === 0) {\n                    factors.push(i);\n                    factors.push(n / i);\n                    max = n / 1;\n                }\n            }\n            //Sort the factors.\n            factors.sort((a, b) => a - b);\n            \n            //For all factors, and as long as the current factor times itself is not larger than n, see if we can equal n by multiplying that factor repeatedly. If so, return true\n            for(let i = 0; i < factors.length; i++) {\n                let currentProduct = factors[i];\n                while(currentProduct * factors[i] <= n) {\n                    currentProduct *= factors[i];\n                    if(currentProduct === n) return true;\n                }\n            }\n            \n            //Once we have gone through all factors, return false.\n            return false;\n        },\n        arguments: {\n            descriptions: [\n                {\n                    text: \"Integer\",\n                    type: \"Number\"\n                }\n            ]\n        }\n    },\n    isPowerOfFour: {\n        name: `isPowerOfFour`,\n        instructions: `Given an integer n, return true if it is a power of four. Otherwise, return false.\n\n        An integer n is a power of four, if there exists an integer x such that n == 4x.`,\n        codeOutput: \n        `var isPowerOfFour = function(n) {\n            //Handle case of power of 0.\n            if(n === 1) return true;\n            //Start with the current number.\n            let current = n;\n            //Iteratively divide by 4, returning false if the current number does not have 4 as a factor. \n            while(current > 4) {\n                console.log(current);\n                if(current % 4 !== 0) return false;\n                current /= 4;\n            }\n            //By the end of the loop, only 3 should remain, otherwise return false.\n            if(current === 4) return true;\n            return false;\n        };`,\n        code: function isPowerOfFour(n) {\n            //Handle case of power of 0.\n            if(n === 1) return true;\n            //Start with the current number.\n            let current = n;\n            //Iteratively divide by 4, returning false if the current number does not have 4 as a factor. \n            while(current > 4) {\n                console.log(current);\n                if(current % 4 !== 0) return false;\n                current /= 4;\n            }\n            //By the end of the loop, only 3 should remain, otherwise return false.\n            if(current === 4) return true;\n            return false;\n        },\n        arguments: {\n            descriptions: [\n                {\n                    text: \"Integer Number\",\n                    type: \"Number\"\n                }\n            ]\n        }\n    },\n    isPowerOfThree: {\n        name: `isPowerOfThree`,\n        instructions: `Given an integer n, return true if it is a power of three. Otherwise, return false.\n\n        An integer n is a power of three, if there exists an integer x such that n == 3x.`,\n        codeOutput: \n        `var isPowerOfThree = function(n) {\n            //Handle case of power of 0.\n            if(n === 1) return true;\n            //Start with the current number.\n            let current = n;\n            //Iteratively divide by 3, returning false if the current number does not have 3 as a factor. \n            while(current > 3) {\n                console.log(current);\n                if(current % 3 !== 0) return false;\n                current /= 3;\n            }\n            //By the end of the loop, only 3 should remain, otherwise return false.\n            if(current === 3) return true;\n            return false;\n        }`,\n        code: function isPowerOfThree(n) {\n            //Handle case of power of 0.\n            if(n === 1) return true;\n            //Start with the current number.\n            let current = n;\n            //Iteratively divide by 3, returning false if the current number does not have 3 as a factor. \n            while(current > 3) {\n                console.log(current);\n                if(current % 3 !== 0) return false;\n                current /= 3;\n            }\n            //By the end of the loop, only 3 should remain, otherwise return false.\n            if(current === 3) return true;\n            return false;\n        },\n        arguments: {\n            descriptions: [\n                {\n                    text: \"Integer Number\",\n                    type: \"Number\"\n                }\n            ]\n        }\n    },\n    isSentenceCorrect: {\n        name: 'isSentenceCorrect',\n        instructions: `A sentence is considered correct if:\n\n        it starts with a capital letter;\n        it ends with a full stop, question mark or exclamation point ('.', '?' or '!');\n        full stops, question marks and exclamation points don't appear anywhere else in the sentence.\n        Given a sentence, return true if it is correct and false otherwise.`,\n        codeOutput: \n        `function isSentenceCorrect(sentence) {\n            //^[A-Z] searches for a capital letter at the beginning.\n            //[^.?!]* searches for 0+ instances of any character that is NOT (^) final punctuation.\n            //[.?!]& searches for ending punctuation at the end of the string.\n            var re = new RegExp(\\`^[A-Z][^.?!]*[.?!]$\\`);\n            return re.test(sentence);\n        }`,\n        code: function isSentenceCorrect(sentence) {\n            //^[A-Z] searches for a capital letter at the beginning.\n            //[^.?!]* searches for 0+ instances of any character that is NOT (^) final punctuation.\n            //[.?!]& searches for ending punctuation at the end of the string.\n            var re = new RegExp(`^[A-Z][^.?!]*[.?!]$`);\n            return re.test(sentence);\n        },\n        arguments: {\n            descriptions: [\n                {\n                    text: \"Sentence\",\n                    type: \"String\"\n                }\n            ]\n        }\n    },\n    isSmooth: {\n        name: 'isSmooth',\n        instructions: `We define the middle of the array arr as follows:\n\n        if arr contains an odd number of elements, its middle is the element whose index number is the same when counting from the beginning of the array and from its end;\n        if arr contains an even number of elements, its middle is the sum of the two elements whose index numbers when counting from the beginning and from the end of the array differ by one.\n        An array is called smooth if its first and its last elements are equal to one another and to the middle. Given an array arr, determine if it is smooth or not.`,\n        codeOutput: \n        `function isSmooth(arr) {\n            return arr.length % 2 ?\n            //If the array is odd, just get middle element.\n            arr[0] === arr[arr.length - 1] && arr[0] === arr[Math.floor(arr.length / 2)] ?\n            true : \n            false :\n            //If the array is even, get the middle two elements' sum.\n            arr[0] === arr[arr.length - 1] && arr[0] === arr[Math.floor(arr.length / 2)] + arr[Math.floor(arr.length / 2) - 1] ?\n            true :\n            false;\n        }`,\n        code: function isSmooth(arr) {\n            return arr.length % 2 ?\n            //If the array is odd, just get middle element.\n            arr[0] === arr[arr.length - 1] && arr[0] === arr[Math.floor(arr.length / 2)] ?\n            true : \n            false :\n            //If the array is even, get the middle two elements' sum.\n            arr[0] === arr[arr.length - 1] && arr[0] === arr[Math.floor(arr.length / 2)] + arr[Math.floor(arr.length / 2) - 1] ?\n            true :\n            false;\n        },\n        arguments: {\n            descriptions: [\n                {\n                    text: \"Array of Integers (No Brackets []; Form of 1,2,3...)\",\n                    type: \"NumberArray\"\n                }\n            ]\n        }\n    },\n    isSubsequence: {\n        name: 'isSubsequence',\n        instructions: `Given a string s, determine if it is a subsequence of a given string t.`,\n        codeOutput: \n        `function isSubsequence(t, s) {\n            var pattern = \"\";\n            //For each letter in the string s (used to build the pattern to apply to string t), incrementally construct with the current element.\n            //Since we are looking for that particular character, use [].\n            //.* together looks for that character, then at some later point, the following character.\n            for (var i = 0; i < s.length; i++) {\n              pattern += \\`[\\${s[i]}].*\\`;\n            }\n            var re = new RegExp(pattern);\n            return re.test(t);\n        }`,\n        code: function isSubsequence(t, s) {\n            var pattern = \"\";\n            //For each letter in the string s (used to build the pattern to apply to string t), incrementally construct with the current element.\n            //Since we are looking for that particular character, use [].\n            //.* together looks for that character, then at some later point, the following character.\n            for (var i = 0; i < s.length; i++) {\n              pattern += `[${s[i]}].*`;\n            }\n            var re = new RegExp(pattern);\n            return re.test(t);\n        },\n        arguments: {\n            descriptions: [\n                {\n                    text: \"String s\",\n                    type: \"String\"\n                },\n                {\n                    text: \"String t\",\n                    type: \"String\"\n                }\n            ]\n        }\n    },\n    isSubstitutionCipher: {\n        name: 'isSubstitutionCipher',\n        instructions: `A ciphertext alphabet is obtained from the plaintext alphabet by means of rearranging some characters. For example \"bacdef...xyz\" will be a simple ciphertext alphabet where a and b are rearranged.\n\n        A substitution cipher is a method of encoding where each letter of the plaintext alphabet is replaced with the corresponding (i.e. having the same index) letter of some ciphertext alphabet.\n        \n        Given two strings, check whether it is possible to obtain them from each other using some (possibly, different) substitution ciphers.`,\n        codeOutput: \n        `function isSubstitutionCipher(string1, string2) {\n            //Keep track of both character sets/keys.\n            let charMap1 = {};\n            let charMap2 = {};\n            //Go through each character.\n            for(let i = 0; i < string1.length; i++) {\n                //If they keys for this letter don't exist yet, make them each other's key.\n                if(!charMap1[string1[i]] && !charMap2[string2[i]]) {\n                    charMap1[string1[i]] = string2[i];\n                    charMap2[string2[i]] = string1[i];\n                    //Otherwise, if a key does exist, check it against what it should be.\n                } else if(charMap1[string1[i]] !== string2[i] || charMap2[string2[i]] !== string1[i]) {\n                    return false;\n                }\n            }\n        \n            return true;\n        }`,\n        code: function isSubstitutionCipher(string1, string2) {\n            //Keep track of both character sets/keys.\n            let charMap1 = {};\n            let charMap2 = {};\n            //Go through each character.\n            for(let i = 0; i < string1.length; i++) {\n                //If they keys for this letter don't exist yet, make them each other's key.\n                if(!charMap1[string1[i]] && !charMap2[string2[i]]) {\n                    charMap1[string1[i]] = string2[i];\n                    charMap2[string2[i]] = string1[i];\n                    //Otherwise, if a key does exist, check it against what it should be.\n                } else if(charMap1[string1[i]] !== string2[i] || charMap2[string2[i]] !== string1[i]) {\n                    return false;\n                }\n            }\n        \n            return true;\n        },\n        arguments: {\n            descriptions: [\n                {\n                    text: \"String 1\",\n                    type: \"String\"\n                },\n                {\n                    text: \"String 2\",\n                    type: \"String\"\n                }\n            ]\n        }\n    },\n    isSumOfConsecutive2: {\n        name: 'isSumOfConsecutive2',\n        instructions: `Find the number of ways to express n as sum of some (at least two) consecutive positive integers.`,\n        codeOutput: \n        `function isSumOfConsecutive2(n) {\n            let totalWays = 0;\n            for(let i = 2; i < Math.floor(n / 2); i++) {\n                //Get the total sum of all digits between 1 and i (current number).\n                let sum = (i * (i + 1)) / 2;\n                //If this sum is larger than n, we are done.\n                if(sum > n) break;\n                //If this current sum subtracted from the starting number is divisible by current value, this is one consecutive sum.\n                if((n - sum) % i === 0) totalWays++;\n            }\n            return totalWays;\n        }`,\n        code: function isSumOfConsecutive2(n) {\n            let totalWays = 0;\n            for(let i = 2; i < Math.floor(n / 2); i++) {\n                //Get the total sum of all digits between 1 and i (current number).\n                let sum = (i * (i + 1)) / 2;\n                //If this sum is larger than n, we are done.\n                if(sum > n) break;\n                //If this current sum subtracted from the starting number is divisible by current value, this is one consecutive sum.\n                if((n - sum) % i === 0) totalWays++;\n            }\n            return totalWays;\n        },\n        arguments: {\n            descriptions: [\n                {\n                    text: \"Integer n\",\n                    type: \"Number\"\n                }\n            ]\n        }\n    },\n    isToeplitzMatrix: {\n        name: `isToeplitzMatrix`,\n        instructions: `Given an m x n matrix, return true if the matrix is Toeplitz. Otherwise, return false.\n\n        A matrix is Toeplitz if every diagonal from top-left to bottom-right has the same elements.`,\n        codeOutput: \n        `var isToeplitzMatrix = function(matrix) {\n            //Save the elements of the last row that should be present in the next.\n            let lastRowElements = [];\n            \n            //Loop through each row and determine if valid.\n            for(let row = 0; row < matrix.length; row++) {\n                //If this is not the first row, check against the last row elements.\n                if(row > 0) {\n                    //Check the last row elements to see if they are in the correct place in the current row.\n                    for(let i = 1; i < matrix[row].length; i++) {\n                        //If we do not see the expected elements shifted over in this row, return false.\n                        if(matrix[row][i] !== lastRowElements[i - 1]) return false;\n                    }\n                }\n                //Save the current row to be used to check against the next row.\n                lastRowElements = matrix[row].slice(0, -1);\n            }\n            \n            return true;\n        };`,\n        code: function isToeplitzMatrix(matrix) {\n            //Save the elements of the last row that should be present in the next.\n            let lastRowElements = [];\n            \n            //Loop through each row and determine if valid.\n            for(let row = 0; row < matrix.length; row++) {\n                //If this is not the first row, check against the last row elements.\n                if(row > 0) {\n                    //Check the last row elements to see if they are in the correct place in the current row.\n                    for(let i = 1; i < matrix[row].length; i++) {\n                        //If we do not see the expected elements shifted over in this row, return false.\n                        if(matrix[row][i] !== lastRowElements[i - 1]) return false;\n                    }\n                }\n                //Save the current row to be used to check against the next row.\n                lastRowElements = matrix[row].slice(0, -1);\n            }\n            \n            return true;\n        },\n        arguments: {\n            descriptions: [\n                {\n                    text: \"Matrix of Numbers (Format: [1,2,3,4], [5,1,2,3], [9,5,1,2])\",\n                    type: \"NumberArrayArray\"\n                }\n            ]\n        }\n    },\n    isUnstablePair: {\n        name: 'isUnstablePair',\n        instructions: `Some file managers sort filenames taking into account case of the letters, others compare strings as if all of the letters are of the same case. That may lead to different ways of filename ordering.\n\n        Call two filenames an unstable pair if their ordering depends on the case.\n        \n        To compare two filenames a and b, find the first position i at which a[i] ≠ b[i]. If a[i] < b[i], then a < b. Otherwise a > b. If such position doesn't exist, the shorter string goes first.\n        \n        Given two filenames, check whether they form an unstable pair.`,\n        codeOutput: \n        `function isUnstablePair(filename1, filename2) {\n            //See if there is a difference between the file names as is and the file names made lowercase.\n            return filename1 > filename2 === filename1.toLowerCase() > filename2.toLowerCase() ? \n            false : \n            true;\n        }`,\n        code: function isUnstablePair(filename1, filename2) {\n            //See if there is a difference between the file names as is and the file names made lowercase.\n            return filename1 > filename2 === filename1.toLowerCase() > filename2.toLowerCase() ? \n            false : \n            true;\n        },\n        arguments: {\n            descriptions: [\n                {\n                    text: \"Filename 1 (String)\",\n                    type: \"String\"\n                },\n                {\n                    text: \"Filename 2 (String)\",\n                    type: \"String\"\n                }\n            ]\n        }\n    },\n    isValidParentheses: {\n        name: `isValidParentheses`,\n        instructions: `Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.\n        An input string is valid if:\n        Open brackets must be closed by the same type of brackets.\n        Open brackets must be closed in the correct order.`,\n        codeOutput: \n        `var isValidParentheses = function(s) {\n            //Create a stack to hold closing parentheses.\n            let stack = [];\n            for(let i = 0; i < s.length; i++) {\n                //Check if this is an open or closing item.\n                if(s[i] === '(' || s[i] === '{' || s[i] === '[') {\n                    switch(s[i]) {\n                        case '(':\n                            stack.push(')');\n                            break;\n                        case '{':\n                            stack.push('}');\n                            break;\n                        case '[':\n                            stack.push(']');\n                            break;\n                        default:\n                            break;\n                    }\n                } else {\n                    //The current character should be the closing parentheses at the top of the stack.\n                    if(s[i] !== stack.pop()) return false;\n                }\n            }\n            //If we have reached the end and there are characters left in the stack, this is not valid.\n            if(stack.length) return false;\n            //Otherwise, this was a valid set.\n            return true;\n        };`,\n        code: function isValidParentheses(s) {\n            //Create a stack to hold closing parentheses.\n            let stack = [];\n            for(let i = 0; i < s.length; i++) {\n                //Check if this is an open or closing item.\n                if(s[i] === '(' || s[i] === '{' || s[i] === '[') {\n                    switch(s[i]) {\n                        case '(':\n                            stack.push(')');\n                            break;\n                        case '{':\n                            stack.push('}');\n                            break;\n                        case '[':\n                            stack.push(']');\n                            break;\n                        default:\n                            break;\n                    }\n                } else {\n                    //The current character should be the closing parentheses at the top of the stack.\n                    if(s[i] !== stack.pop()) return false;\n                }\n            }\n            //If we have reached the end and there are characters left in the stack, this is not valid.\n            if(stack.length) return false;\n            //Otherwise, this was a valid set.\n            return true;\n        },\n        arguments: {\n            descriptions: [\n                {\n                    text: \"A string containing only [], (), and {} characters\",\n                    type: \"String\"\n                }\n            ]\n        }\n    }\n};\n\nexport default challenges_g_j;\n\n/*\n\nTemplate:\n\nname: {\n    name: ``,\n    instructions: ``,\n    codeOutput: \n    ``,\n    code: ,\n    arguments: {\n        descriptions: [\n            {\n                text: \"\",\n                type: \"\"\n            }\n        ]\n    }\n}\n\nType List:\nNumber\nString\nNumber Array \nString Array\nNumber Array Array\nString Array Array \n\n*/","//Include global BigInt (as comment) in order to prevent no-undef in this environment.\n/* global BigInt */\n\nconst challenges_k_n = {\n    killKthBit: {\n        name: 'killKthBit',\n        instructions: `In order to stop the Mad Coder evil genius you need to decipher the encrypted message he sent to his minions. The message contains several numbers that, when typed into a supercomputer, will launch a missile into the sky blocking out the sun, and making all the people on Earth grumpy and sad.\n\n        You figured out that some numbers have a modified single digit in their binary representation. More specifically, in the given number n the kth bit from the right was initially set to 0, but its current value might be different. It's now up to you to write a function that will change the kth bit of n back to 0.`,\n        codeOutput: \n        `function killKthBit(n, k) {\n            //Convert n to binary (string), then check if the bit at position k is set.\n            //If so, remove that bit from n, otherwise return n as is.\n            return n.toString(2)[n.toString(2).length - k] === \"1\" ?\n            n - (2 ** (k - 1)) :\n            n;\n        }`,\n        code: function killKthBit(n, k) {\n            //Convert n to binary (string), then check if the bit at position k is set.\n            //If so, remove that bit from n, otherwise return n as is.\n            return n.toString(2)[n.toString(2).length - k] === \"1\" ?\n            n - (2 ** (k - 1)) :\n            n;\n        },\n        arguments: {\n            descriptions: [\n                {\n                    text: \"Integer n\",\n                    type: \"Number\"\n                },\n                {\n                    text: \"Integer k\",\n                    type: \"Number\"\n                }\n            ]\n        }\n    },\n    knapsackLight: {\n        name: 'knapsackLight',\n        instructions: `You found two items in a treasure chest! The first item weighs weight1 and is worth value1, and the second item weighs weight2 and is worth value2. What is the total maximum value of the items you can take with you, assuming that your max weight capacity is maxW and you can't come back for the items later?`,\n        codeOutput: \n        `function knapsackLight(value1, weight1, value2, weight2, maxW) {\n            //Use chained conditionals to first see if we can carry both items, then determine if either of the other values work (if so, choose the most valuable). Otherwise, return 0 (none of the items can be carried).\n            return weight1 + weight2 <= maxW ? \n                   value1 + value2 :\n                   weight1 <= maxW && weight2 <= maxW ?\n                   Math.max(value1, value2) :\n                   weight1 <= maxW ?\n                   value1 :\n                   weight2 <= maxW ?\n                   value2 :\n                   0;\n        }`,\n        code: function knapsackLight(value1, weight1, value2, weight2, maxW) {\n            //Use chained conditionals to first see if we can carry both items, then determine if either of the other values work (if so, choose the most valuable). Otherwise, return 0 (none of the items can be carried).\n            return weight1 + weight2 <= maxW ? \n                   value1 + value2 :\n                   weight1 <= maxW && weight2 <= maxW ?\n                   Math.max(value1, value2) :\n                   weight1 <= maxW ?\n                   value1 :\n                   weight2 <= maxW ?\n                   value2 :\n                   0;\n        },\n        arguments: {\n            descriptions: [\n                {\n                    text: \"Integer 'value1'\",\n                    type: \"Number\"\n                },\n                {\n                    text: \"Integer 'weight1'\",\n                    type: \"Number\"\n                },\n                {\n                    text: \"Integer 'value2'\",\n                    type: \"Number\"\n                },\n                {\n                    text: \"Integer 'weight2'\",\n                    type: \"Number\"\n                },\n                {\n                    text: \"Integer 'maxW'\",\n                    type: \"Number\"\n                }\n            ]\n        }\n    },\n    largestNumber: {\n        name: 'largestNumber',\n        instructions: `Given an integer n, return the largest number that contains exactly n digits.`,\n        codeOutput: \n        `function largestNumber(n) {\n            let count = 0;\n            let output = \"\";\n            //Iteratively add a 9 to the output n times and return it as a number.\n            while(count < n) {\n                output += \"9\";\n                count++;\n            }\n            return Number(output);\n        }`,\n        code: function largestNumber(n) {\n            let count = 0;\n            let output = \"\";\n            //Iteratively add a 9 to the output n times and return it as a number.\n            while(count < n) {\n                output += \"9\";\n                count++;\n            }\n            return Number(output);\n        },\n        arguments: {\n            descriptions: [\n                {\n                    text: \"Integer n\",\n                    type: \"Number\"\n                }\n            ]\n        }\n    },\n    lateRide: {\n        name: 'lateRide',\n        instructions: `One night you go for a ride on your motorcycle. At 00:00 you start your engine, and the built-in timer automatically begins counting the length of your ride, in minutes. Off you go to explore the neighborhood.\n\n        When you finally decide to head back, you realize there's a chance the bridges on your route home are up, leaving you stranded! Unfortunately, you don't have your watch on you and don't know what time it is. All you know thanks to the bike's timer is that n minutes have passed since 00:00.\n        \n        Using the bike's timer, calculate the current time. Return an answer as the sum of digits that the digital timer in the format hh:mm would show.`,\n        codeOutput: \n        `function lateRide(n) {\n            let total = 0;\n            //Get each digit (hours and minutes) and add them all up.\n            String(Math.floor(n / 60)).split(\"\").forEach(digit => total += Number(digit)) +\n            String(n % 60).split(\"\").forEach(digit => total += Number(digit));\n            return total;\n        }`,\n        code: function lateRide(n) {\n            //Comment out this code (original) due to no-unused-vars error in React environment.\n            //let total = 0;\n            //String(Math.floor(n / 60)).split(\"\").forEach(digit => total += Number(digit)) +\n            //String(n % 60).split(\"\").forEach(digit => total += Number(digit));\n\n            //Modified code for React environment:\n            //Get each digit (hours and minutes) and add them all up.\n            let total = String(Math.floor(n / 60)).split(\"\").reduce((a, b) => a += Number(b), 0) +\n            String(n % 60).split(\"\").reduce((a, b) => a += Number(b), 0);\n            return total;\n        },\n        arguments: {\n            descriptions: [\n                {\n                    text: \"Integer n (Minutes)\",\n                    type: \"Number\"\n                }\n            ]\n        }\n    },\n    longestCommonPrefix: {\n        name: `longestCommonPrefix`,\n        instructions: `Write a function to find the longest common prefix string amongst an array of strings.\n        If there is no common prefix, return an empty string \"\".`,\n        codeOutput: \n        `var longestCommonPrefix = function(strs) {\n            let prefix = \"\";\n            //Sort the strings by length.\n            strs.sort((a, b) => a.length - b.length);\n            //Get the longest that a prefix can be.\n            let maxPrefix = strs[0];\n            for(let i = 1; i <= maxPrefix.length; i++) {\n                //Starting with the first letter of the shortest word, begin to check for the longest prefix.\n                let currentPrefix = maxPrefix.substring(0, i);\n                //Check if all elements have this current prefix at the beginning.\n                if(strs.every(current => current.substring(0, i) === currentPrefix)) {\n                    //Set this as the longest prefix currently.\n                    prefix = currentPrefix;\n                } else {\n                    //Otherwise, we have the longest prefix possible (break out).\n                    break;\n                }\n            }\n            return prefix;\n        };`,\n        code: function longestCommonPrefix(strs) {\n            let prefix = \"\";\n            //Sort the strings by length.\n            strs.sort((a, b) => a.length - b.length);\n            //Get the longest that a prefix can be.\n            let maxPrefix = strs[0];\n            for(let i = 1; i <= maxPrefix.length; i++) {\n                //Starting with the first letter of the shortest word, begin to check for the longest prefix.\n                let currentPrefix = maxPrefix.substring(0, i);\n                //Check if all elements have this current prefix at the beginning.\n                if(strs.every(current => current.substring(0, i) === currentPrefix)) {\n                    //Set this as the longest prefix currently.\n                    prefix = currentPrefix;\n                } else {\n                    //Otherwise, we have the longest prefix possible (break out).\n                    break;\n                }\n            }\n            return prefix;\n        },\n        arguments: {\n            descriptions: [\n                {\n                    text: \"Array of strings (Form of example,example,example...)\",\n                    type: \"StringArray\"\n                }\n            ]\n        }\n    },\n    leastFactorial: {\n        name: 'leastFactorial',\n        instructions: `Given an integer n, find the minimal k such that\n\n        k = m! (where m! = 1 * 2 * ... * m) for some integer m;\n        k >= n.\n        In other words, find the smallest factorial which is not less than n.`,\n        codeOutput: \n        `function leastFactorial(n) {\n            //Keep track of the current product and start with 1.\n            let multiplier = 1, \n                currentProduct = multiplier;\n                \n            //Keep multiplying incrementing integers until reaching above the threshold.\n            while(currentProduct < n) {\n                currentProduct *= multiplier;\n                multiplier++;\n            }\n            \n            return currentProduct;\n        }`,\n        code: function leastFactorial(n) {\n            //Keep track of the current product and start with 1.\n            let multiplier = 1, \n                currentProduct = multiplier;\n                \n            //Keep multiplying incrementing integers until reaching above the threshold.\n            while(currentProduct < n) {\n                currentProduct *= multiplier;\n                multiplier++;\n            }\n            \n            return currentProduct;\n        },\n        arguments: {\n            descriptions: [\n                {\n                    text: \"Integer n\",\n                    type: \"Number\"\n                }\n            ]\n        }\n    },\n    lengthOfLastWord: {\n        name: `lengthOfLastWord`,\n        instructions: `Given a string s consisting of some words separated by some number of spaces, return the length of the last word in the string.\n        A word is a maximal substring consisting of non-space characters only.`,\n        codeOutput: \n        `var lengthOfLastWord = function(s) {\n            //Turn the string into an array, filtering out blank strings.\n            let words = s.split(' ').filter(s => s !== '');\n            //Return the length of the last 'word' in the string.\n            return words[words.length - 1].length;\n        };`,\n        code: function lengthOfLastWord(s) {\n            //Turn the string into an array, filtering out blank strings.\n            let words = s.split(' ').filter(s => s !== '');\n            //Return the length of the last 'word' in the string.\n            return words[words.length - 1].length;\n        },\n        arguments: {\n            descriptions: [\n                {\n                    text: \"String with one or more words\",\n                    type: \"String\"\n                }\n            ]\n        }\n    },\n    lineEncoding: {\n        name: 'lineEncoding',\n        instructions: `Given a string, return its encoding defined as follows:\n\n        First, the string is divided into the least possible number of disjoint substrings consisting of identical characters\n        for example, \"aabbbc\" is divided into [\"aa\", \"bbb\", \"c\"]\n        Next, each substring with length greater than one is replaced with a concatenation of its length and the repeating character\n        for example, substring \"bbb\" is replaced by \"3b\"\n        Finally, all the new strings are concatenated together in the same order and a new string is returned.`,\n        codeOutput: \n        `function lineEncoding(s) {\n            //Create the substring groups\n            let substrings = [];\n            //Keep track of the last character and group currently being built.\n            let lastChar = s[0];\n            let lastGroup = {\n                chars: lastChar,\n                count: 1\n            }\n            \n            //Go through each character to build the substrings.\n            for(let i = 1; i < s.length; i++) {\n                //If this character is the same as last, add to the current group.\n                if(s[i] === lastChar) {\n                    lastGroup.chars += s[i];\n                    lastGroup.count++;\n                } else {\n                    //Otherwise, push the groups and update the last character and current group.\n                    substrings.push(lastGroup);\n                    \n                    lastChar = s[i];\n                    lastGroup = {\n                        chars: lastChar,\n                        count: 1\n                    }\n                }\n                \n                //At the end, push the last group.\n                if(i === s.length - 1) substrings.push(lastGroup);\n            }\n            \n            //Build string to return.\n            let output = \"\";\n            \n            substrings.forEach(group => {\n                //If the count is greater than 1, add the number before the character.\n                group.count > 1 ? output += group.count : output;\n                //Add the character of this group.\n                output += group.chars[0];\n            });\n            \n            return output;\n        }`,\n        code: function lineEncoding(s) {\n            //Create the substring groups\n            let substrings = [];\n            //Keep track of the last character and group currently being built.\n            let lastChar = s[0];\n            let lastGroup = {\n                chars: lastChar,\n                count: 1\n            }\n            \n            //Go through each character to build the substrings.\n            for(let i = 1; i < s.length; i++) {\n                //If this character is the same as last, add to the current group.\n                if(s[i] === lastChar) {\n                    lastGroup.chars += s[i];\n                    lastGroup.count++;\n                } else {\n                    //Otherwise, push the groups and update the last character and current group.\n                    substrings.push(lastGroup);\n                    \n                    lastChar = s[i];\n                    lastGroup = {\n                        chars: lastChar,\n                        count: 1\n                    }\n                }\n                \n                //At the end, push the last group.\n                if(i === s.length - 1) substrings.push(lastGroup);\n            }\n            \n            //Build string to return.\n            let output = \"\";\n          \n            substrings.forEach(group => {\n                //If the count is greater than 1, add the number before the character.\n                //Comment out ternary version to avoid React error which expects an assignment here.\n                //group.count > 1 ? output += group.count : output;\n                if(group.count > 1) output += group.count;\n                //Add the character of this group.\n                output += group.chars[0];\n            });\n            \n            \n            return output;\n        },\n        arguments: {\n            descriptions: [\n                {\n                    text: \"Input String s\",\n                    type: \"String\"\n                }\n            ]\n        }\n    },\n    lineUp: {\n        name: 'lineUp',\n        instructions: `To prepare his students for an upcoming game, the sports coach decides to try some new training drills. To begin with, he lines them up and starts with the following warm-up exercise: when the coach says 'L', he instructs the students to turn to the left. Alternatively, when he says 'R', they should turn to the right. Finally, when the coach says 'A', the students should turn around.\n\n        Unfortunately some students (not all of them, but at least one) can't tell left from right, meaning they always turn right when they hear 'L' and left when they hear 'R'. The coach wants to know how many times the students end up facing the same direction.\n        \n        Given the list of commands the coach has given, count the number of such commands after which the students will be facing the same direction.`,\n        codeOutput: \n        `function lineUp(commands) {\n            let count = 0;\n            let correct = \"front\";\n            let incorrect = \"front\";\n            for(let i = 0; i < commands.length; i++) {\n                if(commands[i] === \"L\") {\n                    correct === \"front\" ? \n                    correct = \"left\" : correct === \"left\" ? \n                    correct = \"back\" : correct === \"back\" ? \n                    correct = \"right\" : correct = \"front\";\n                    \n                    incorrect === \"front\" ? \n                    incorrect = \"right\" : incorrect === \"right\" ? \n                    incorrect = \"back\" : incorrect === \"back\" ? \n                    incorrect = \"left\" : incorrect = \"front\"; \n                } else if(commands[i] === \"R\") {\n                    correct === \"front\" ? \n                    correct = \"right\" : correct === \"right\" ? \n                    correct = \"back\" : correct === \"back\" ? \n                    correct = \"left\" : correct = \"front\";\n                    \n                    incorrect === \"front\" ? \n                    incorrect = \"left\" : incorrect === \"left\" ? \n                    incorrect = \"back\" : incorrect === \"back\" ? \n                    incorrect = \"right\" : incorrect = \"front\"; \n                } else {\n                    correct === \"front\" ?\n                    correct = \"back\" : correct === \"back\" ?\n                    correct = \"front\" : correct === \"left\" ?\n                    correct = \"right\" : correct = \"left\";\n                    \n                    incorrect === \"front\" ?\n                    incorrect = \"back\" : incorrect === \"back\" ?\n                    incorrect = \"front\" : incorrect === \"left\" ?\n                    incorrect = \"right\" : incorrect = \"left\";\n                }\n                \n                if(correct === incorrect) count++;\n            }\n            return count;\n        }`,\n        code: function lineUp(commands) {\n            let count = 0;\n            let correct = \"front\";\n            let incorrect = \"front\";\n            for(let i = 0; i < commands.length; i++) {\n                if(commands[i] === \"L\") {\n                    correct === \"front\" ? \n                    correct = \"left\" : correct === \"left\" ? \n                    correct = \"back\" : correct === \"back\" ? \n                    correct = \"right\" : correct = \"front\";\n                    \n                    incorrect === \"front\" ? \n                    incorrect = \"right\" : incorrect === \"right\" ? \n                    incorrect = \"back\" : incorrect === \"back\" ? \n                    incorrect = \"left\" : incorrect = \"front\"; \n                } else if(commands[i] === \"R\") {\n                    correct === \"front\" ? \n                    correct = \"right\" : correct === \"right\" ? \n                    correct = \"back\" : correct === \"back\" ? \n                    correct = \"left\" : correct = \"front\";\n                    \n                    incorrect === \"front\" ? \n                    incorrect = \"left\" : incorrect === \"left\" ? \n                    incorrect = \"back\" : incorrect === \"back\" ? \n                    incorrect = \"right\" : incorrect = \"front\"; \n                } else {\n                    correct === \"front\" ?\n                    correct = \"back\" : correct === \"back\" ?\n                    correct = \"front\" : correct === \"left\" ?\n                    correct = \"right\" : correct = \"left\";\n                    \n                    incorrect === \"front\" ?\n                    incorrect = \"back\" : incorrect === \"back\" ?\n                    incorrect = \"front\" : incorrect === \"left\" ?\n                    incorrect = \"right\" : incorrect = \"left\";\n                }\n                \n                if(correct === incorrect) count++;\n            }\n            return count;\n        },\n        arguments: {\n            descriptions: [\n                {\n                    text: \"String (Uppercase L, R, and A only)\",\n                    type: \"String\"\n                }\n            ]\n        }\n    },\n    longestDigitsPrefix: {\n        name: 'longestDigitsPrefix',\n        instructions: `Given a string, output its longest prefix which contains only digits.`,\n        codeOutput: \n        `function longestDigitsPrefix(inputString) {\n            //Start with a blank prefix and starting index.\n            let prefix = \"\";\n            let currentIndex = 0;\n            //Loop through every character until we are no longer finding a digit, and add to the prefix.\n            while(inputString.charCodeAt(currentIndex) > 47 && inputString.charCodeAt(currentIndex) < 58 && currentIndex < inputString.length) {\n                prefix += inputString[currentIndex];\n                currentIndex++;\n            }\n            return prefix;\n        }`,\n        code: function longestDigitsPrefix(inputString) {\n            //Start with a blank prefix and starting index.\n            let prefix = \"\";\n            let currentIndex = 0;\n            //Loop through every character until we are no longer finding a digit, and add to the prefix.\n            while(inputString.charCodeAt(currentIndex) > 47 && inputString.charCodeAt(currentIndex) < 58 && currentIndex < inputString.length) {\n                prefix += inputString[currentIndex];\n                currentIndex++;\n            }\n            return prefix;\n        },\n        arguments: {\n            descriptions: [\n                {\n                    text: \"String of Characters (Beginning With 1+ Digits)\",\n                    type: \"String\"\n                }\n            ]\n        }\n    },\n    longestWord: {\n        name: 'longestWord',\n        instructions: `Define a word as a sequence of consecutive English letters. Find the longest word from the given string.`,\n        codeOutput: \n        `function longestWord(text) {\n            let words = [];\n            let currentWord = \"\";\n            for(let i = 0; i < text.length; i++) {\n                //If this is a letter, add to the current word.\n                if(text.charCodeAt(i) > 96 && text.charCodeAt(i) < 123 || \n                text.charCodeAt(i) > 64 && text.charCodeAt(i) < 91) {\n                    currentWord += text[i];\n                } else {\n                    //Otherwise, add the last word built to the array and start over with a new word.\n                    if(currentWord.length) {\n                        words.push(currentWord);\n                        currentWord = \"\";\n                    }\n                }\n                //If at the end, add the last group of letters.\n                if(i === text.length - 1 && currentWord.length) words.push(currentWord); \n            }\n            \n            //Keep track of the longest word and length.\n            let longestLength = 0;\n            let longestWord = \"\";\n            \n            //Go through each word and see if its length is longer than the current longest.\n            words.forEach(word => {\n                if(word.length > longestLength) {\n                    longestLength = word.length;\n                    longestWord = word;\n                }\n            });\n            \n            return longestWord;\n        }`,\n        code: function longestWord(text) {\n            let words = [];\n            let currentWord = \"\";\n            for(let i = 0; i < text.length; i++) {\n                //If this is a letter, add to the current word.\n                if(text.charCodeAt(i) > 96 && text.charCodeAt(i) < 123 || \n                text.charCodeAt(i) > 64 && text.charCodeAt(i) < 91) {\n                    currentWord += text[i];\n                } else {\n                    //Otherwise, add the last word built to the array and start over with a new word.\n                    if(currentWord.length) {\n                        words.push(currentWord);\n                        currentWord = \"\";\n                    }\n                }\n                //If at the end, add the last group of letters.\n                if(i === text.length - 1 && currentWord.length) words.push(currentWord); \n            }\n            \n            //Keep track of the longest word and length.\n            let longestLength = 0;\n            let longestWord = \"\";\n            \n            //Go through each word and see if its length is longer than the current longest.\n            words.forEach(word => {\n                if(word.length > longestLength) {\n                    longestLength = word.length;\n                    longestWord = word;\n                }\n            });\n            \n            return longestWord;\n        },\n        arguments: {\n            descriptions: [\n                {\n                    text: \"Input Sentence\",\n                    type: \"String\"\n                }\n            ]\n        }\n    },\n    magicalWell: {\n        name: 'magicalWell',\n        instructions: `You are standing at a magical well. It has two positive integers written on it: a and b. Each time you cast a magic marble into the well, it gives you a * b dollars and then both a and b increase by 1. You have n magic marbles. How much money will you make?`,\n        codeOutput: \n        `function magicalWell(a, b, n) {\n            //Keep track of total.\n            let total = 0;\n            //Each time a marble is cast, find the new total, update values, and decrease marbles.\n            while(n > 0) {\n                total += (a * b);\n                a++;\n                b++;\n                n--;\n            }\n            return total;\n        }`,\n        code: function magicalWell(a, b, n) {\n            //Keep track of total.\n            let total = 0;\n            //Each time a marble is cast, find the new total, update values, and decrease marbles.\n            while(n > 0) {\n                total += (a * b);\n                a++;\n                b++;\n                n--;\n            }\n            return total;\n        },\n        arguments: {\n            descriptions: [\n                {\n                    text: \"Integer a\",\n                    type: \"Number\"\n                },\n                {\n                    text: \"Integer b\",\n                    type: \"Number\"\n                },\n                {\n                    text: \"Integer n\",\n                    type: \"Number\"\n                }\n            ]\n        }\n    },\n    majorityElement: {\n        name: `majorityElement`,\n        instructions: `Given an array nums of size n, return the majority element.\n        The majority element is the element that appears more than ⌊n / 2⌋ times. You may assume that the majority element always exists in the array.`,\n        codeOutput: \n        `var majorityElement = function(nums) {\n            //Create an object to hold all values that appear in the array.\n            let numsMap = {};\n            //Map out the number of occurrences of each value.\n            nums.forEach(num => {\n                if(numsMap[num]) {\n                    numsMap[num]++;\n                } else {\n                    numsMap[num] = 1;\n                }\n            });\n            //Using the object, get all object keys (numbers that appear) into an array, \n            //Then, reduce the array down to the one with the largest value.\n            return Object.keys(numsMap)\n                .reduce((prev, current) => numsMap[prev] > numsMap[current] ? prev : current);\n        };`,\n        code: function majorityElement(nums) {\n            //Create an object to hold all values that appear in the array.\n            let numsMap = {};\n            //Map out the number of occurrences of each value.\n            nums.forEach(num => {\n                if(numsMap[num]) {\n                    numsMap[num]++;\n                } else {\n                    numsMap[num] = 1;\n                }\n            });\n            //Using the object, get all object keys (numbers that appear) into an array, \n            //Then, reduce the array down to the one with the largest value.\n            return Object.keys(numsMap)\n                .reduce((prev, current) => numsMap[prev] > numsMap[current] ? prev : current);\n        },\n        arguments: {\n            descriptions: [\n                {\n                    text: \"Array of Integers (Form of 1,2,3...)\",\n                    type: \"NumberArray\"\n                }\n            ]\n        }\n    },\n    makeArrayConsecutive2: {\n        name: 'makeArrayConsecutive2',\n        instructions: `Ratiorg got statues of different sizes as a present from CodeMaster for his birthday, each statue having an non-negative integer size. Since he likes to make things perfect, he wants to arrange them from smallest to largest so that each statue will be bigger than the previous one exactly by 1. He may need some additional statues to be able to accomplish that. Help him figure out the minimum number of additional statues needed.`,\n        codeOutput: \n        `function makeArrayConsecutive2(statues) {\n   \n            let sorted = []; \n            for(let currentHeight = 0; currentHeight <= 20; currentHeight++) {\n                statues.forEach((statue) => {\n                    if(statue === currentHeight) {\n                        sorted.push(statue); \n                    }\n                });   \n            }\n            \n            let missing = 0; \n            for(let currentHeight = sorted[0]; currentHeight < sorted[sorted.length - 1]; currentHeight++) {\n                let contains = false; \n                sorted.forEach((size) => {\n                    if(size === currentHeight) {\n                        contains = true; \n                    }\n                }); \n                if(contains === false) {\n                    missing++; \n                }\n             \n            }\n            \n            return missing;  \n        }`,\n        code: function makeArrayConsecutive2(statues) {\n   \n            let sorted = []; \n            for(let currentHeight = 0; currentHeight <= 20; currentHeight++) {\n                statues.forEach((statue) => {\n                    if(statue === currentHeight) {\n                        sorted.push(statue); \n                    }\n                });   \n            }\n            \n            let missing = 0; \n            for(let currentHeight = sorted[0]; currentHeight < sorted[sorted.length - 1]; currentHeight++) {\n                let contains = false; \n                sorted.forEach((size) => {\n                    if(size === currentHeight) {\n                        contains = true; \n                    }\n                }); \n                if(contains === false) {\n                    missing++; \n                }\n             \n            }\n            \n            return missing;  \n        },\n        arguments: {\n            descriptions: [\n                {\n                    text: \"Array of Integers (No Brackets []; Form of 1,2,3...)\",\n                    type: \"NumberArray\"\n                }\n            ]\n        }\n    },\n    matrixElementsSum: {\n        name: 'matrixElementsSum',\n        instructions: `After becoming famous, the CodeBots decided to move into a new building together. Each of the rooms has a different cost, and some of them are free, but there's a rumour that all the free rooms are haunted! Since the CodeBots are quite superstitious, they refuse to stay in any of the free rooms, or any of the rooms below any of the free rooms.\n\n        Given matrix, a rectangular matrix of integers, where each value represents the cost of the room, your task is to return the total sum of all rooms that are suitable for the CodeBots (ie: add up all the values that don't appear below a 0).`,\n        codeOutput: \n        `function matrixElementsSum(matrix) {\n            var haunted = []; \n            var sum = 0; \n            for(var i = 0; i < matrix.length; i++) {\n                for(var j = 0; j < matrix[i].length; j++) {\n                    if(matrix[i][j] < 1) {\n                        haunted.push(j); \n                        console.log(haunted, j); \n                    }\n                    var thisRoomIsHanted = false; \n                    if(haunted.length > 0) {\n                        haunted.forEach((haunted) => {\n                            if(haunted === j) {\n                                thisRoomIsHanted = true; \n                            }\n                        });\n                    }\n                    if(!thisRoomIsHanted) {\n                        sum += matrix[i][j]; \n                    }\n                }\n            }\n            return sum; \n        }`,\n        code: function matrixElementsSum(matrix) {\n            var haunted = []; \n            var sum = 0; \n            for(var i = 0; i < matrix.length; i++) {\n                for(var j = 0; j < matrix[i].length; j++) {\n                    if(matrix[i][j] < 1) {\n                        haunted.push(j); \n                        console.log(haunted, j); \n                    }\n                    var thisRoomIsHanted = false; \n                    if(haunted.length > 0) {\n                        haunted.forEach((haunted) => {\n                            if(haunted === j) {\n                                thisRoomIsHanted = true; \n                            }\n                        });\n                    }\n                    if(!thisRoomIsHanted) {\n                        sum += matrix[i][j]; \n                    }\n                }\n            }\n            return sum; \n        },\n        arguments: {\n            descriptions: [\n                {\n                    text: \"Rectangular Matrix (Array of Integer Arrays); Form of [1,2,3], [4,5,6]...etc.\",\n                    type: \"NumberArrayArray\"\n                }\n            ]\n        }\n    },\n    matrixReshape: {\n        name: `matrixReshape`,\n        instructions: `In MATLAB, there is a handy function called reshape which can reshape an m x n matrix into a new one with a different size r x c keeping its original data.\n\n        You are given an m x n matrix mat and two integers r and c representing the number of rows and the number of columns of the wanted reshaped matrix.\n        \n        The reshaped matrix should be filled with all the elements of the original matrix in the same row-traversing order as they were.\n        \n        If the reshape operation with given parameters is possible and legal, output the new reshaped matrix; Otherwise, output the original matrix.`,\n        codeOutput: \n        `var matrixReshape = function(mat, r, c) {\n            //Return the original array if not possible.\n            if(mat[0].length * mat.length !== r * c) return mat; \n            \n            //Flatten the incoming array to use numbers.\n            let numbers = mat.flat();\n            \n            //Create result array for new array.\n            let result = [];\n            \n            //Insert the numbers into new array with dimensions r, c.\n            for(let i = 0; i < r; i++) {\n                let thisRow = [];\n                for(let j = 0; j < c; j++) {\n                    //Using the flattened array, take the first element and place it into the next position of the result.\n                    thisRow.push(numbers.shift());\n                }\n                //Insert this row into the result array.\n                result.push(thisRow);\n            }\n            \n            return result;\n        };`,\n        code: function matrixReshape(mat, r, c) {\n            //Return the original array if not possible.\n            if(mat[0].length * mat.length !== r * c) return formatOutput(mat); \n            \n            //Flatten the incoming array to use numbers.\n            let numbers = mat.flat();\n            \n            //Create result array for new array.\n            let result = [];\n            \n            //Insert the numbers into new array with dimensions r, c.\n            for(let i = 0; i < r; i++) {\n                let thisRow = [];\n                for(let j = 0; j < c; j++) {\n                    //Using the flattened array, take the first element and place it into the next position of the result.\n                    thisRow.push(numbers.shift());\n                }\n                //Insert this row into the result array.\n                result.push(thisRow);\n            }\n            \n            //For this React version only, convert the output to a string for readability.\n            function formatOutput(matrix) {\n                let outputString = '';\n                for(let i = 0; i < matrix.length; i++) {\n                    outputString += '[';\n                    for(let j = 0; j < matrix[0].length; j++) {\n                        outputString += matrix[i][j];\n                        if(j !== matrix[i].length - 1) outputString += ',';\n                    }\n                    outputString += ']'\n                    if(i !== matrix.length - 1) outputString += ',';\n                }\n                return outputString;\n            }\n            \n            //return result;\n            return formatOutput(result);\n        },\n        arguments: {\n            descriptions: [\n                {\n                    text: \"Array of Equal-Sized Integer Arrays (Form of [1,2,3], [4,5,6]...)\",\n                    type: \"NumberArrayArray\"\n                },\n                {\n                    text: \"Integer for New Dimension 'r'\",\n                    type: \"Number\"\n                },\n                {\n                    text: \"Integer for New Dimension 'c'\",\n                    type: \"Number\"\n                }\n            ]\n        }\n    },\n    arrayMaxConsecutiveSum: {\n        name: 'arrayMaxConsecutiveSum',\n        instructions: `Given array of integers, find the maximal possible sum of some of its k consecutive elements.`,\n        codeOutput: \n        `function arrayMaxConsecutiveSum(inputArray, k) {\n            //Keep track of the max sum.\n            let maxSum = 0;\n            //Go through each character, before going out of bounds based on k.\n            for(let i = 0; i < inputArray.length - k + 1; i++) {\n                //If k is greater than 1, add the next two elements (otherwise, just make this total the element value itself)\n                let thisTotal = k > 1 ? inputArray[i] + inputArray[i + 1] : inputArray[i];\n                for(let j = i + 2; j < i + k; j++) {\n                    //If k is greater than 2, continue to add to the total within this range of k.\n                    thisTotal += inputArray[j];\n                }\n                //See if this total is greater than the max.\n                if(thisTotal > maxSum) maxSum = thisTotal;\n            }\n            return maxSum;\n        }`,\n        code: function arrayMaxConsecutiveSum(inputArray, k) {\n            //Keep track of the max sum.\n            let maxSum = 0;\n            //Go through each character, before going out of bounds based on k.\n            for(let i = 0; i < inputArray.length - k + 1; i++) {\n                //If k is greater than 1, add the next two elements (otherwise, just make this total the element value itself)\n                let thisTotal = k > 1 ? inputArray[i] + inputArray[i + 1] : inputArray[i];\n                for(let j = i + 2; j < i + k; j++) {\n                    //If k is greater than 2, continue to add to the total within this range of k.\n                    thisTotal += inputArray[j];\n                }\n                //See if this total is greater than the max.\n                if(thisTotal > maxSum) maxSum = thisTotal;\n            }\n            return maxSum;\n        },\n        arguments: {\n            descriptions: [\n                {\n                    text: \"Array of Integers (No Brackets []; Form of 1,2,3...)\",\n                    type: \"NumberArray\"\n                },\n                {\n                    text: \"Integer k\",\n                    type: \"Number\"\n                }\n            ]\n        }\n    },\n    maximumSum: {\n        name: 'maximumSum',\n        instructions: `You are given an array of integers a. A range sum query is defined by a pair of non-negative integers l and r (l <= r). The output to a range sum query on the given array a is the sum of all the elements of a that have indices from l to r, inclusive.\n\n        You have the array a and a list of range sum queries q. Find an algorithm that can rearrange the array a in such a way that the total sum of all of the query outputs is maximized, and return this total sum.`,\n        codeOutput: \n        `function maximumSum(a, q) {\n            //Find q most frequent index.\n            let qMap = {};\n            q.forEach(range => {\n                for(let i = range[0]; i <= range[1]; i++) {\n                    if(qMap[i]) {\n                        qMap[i]++;\n                    } else {\n                        qMap[i] = 1;\n                    }\n                }\n            });\n            //Use this map data to create an array to be sorted and iterated over.\n            let maxqVal = 0;\n            let maxqIndex = 0;\n            let qMapArray = [];\n            for(let index in qMap) {\n                qMapArray.push({\n                    \"index\": index,\n                    \"count\": qMap[index]\n                });\n                if(qMap[index] > maxqVal) {\n                    maxqVal = qMap[index];\n                    maxqIndex = index;\n                }\n            }   \n            \n            //Sort the starting array in order.\n            a.sort((a, b) => a - b);\n            \n            //Sort the array containing the index occurences.\n            qMapArray.sort((a, b) => b[\"count\"] - a[\"count\"]);\n            \n            //Next, sort the indexes in qMap so that one by one, the largest values in the array can be popped off and inserted at the next most frequent index.\n            let arrayToSum = new Array(a.length).fill(0);\n            \n            //Start filling in the array to be summed up with the sorted values for maximal sum.\n            while(qMapArray.length) {\n                let thisIndex = qMapArray.shift();\n                let nextLargestVal = a.pop();\n                arrayToSum[thisIndex[\"index\"]] = nextLargestVal;\n            }\n            \n            //Fill in any remaining values that may exist in the original array.\n            while(a.length) {\n                let nextLargestVal = a.pop();\n                for(let i = 0; i < arrayToSum.length; i++) {\n                    if(!arrayToSum[i]) arrayToSum[i] = nextLargestVal;\n                }\n            }\n            \n            //Loop through the sorted array and add up the ranges of sums.\n            let maxSum = 0;\n            q.forEach(range => {\n                for(let i = range[0]; i <= range[1]; i++) {\n                    maxSum += arrayToSum[i];\n                }\n            });  \n            \n            return maxSum;\n        }`,\n        code: function maximumSum(a, q) {\n            //Find q most frequent index.\n            let qMap = {};\n            q.forEach(range => {\n                for(let i = range[0]; i <= range[1]; i++) {\n                    if(qMap[i]) {\n                        qMap[i]++;\n                    } else {\n                        qMap[i] = 1;\n                    }\n                }\n            });\n            //Use this map data to create an array to be sorted and iterated over.\n            let maxqVal = 0;\n            let maxqIndex = 0;\n            let qMapArray = [];\n            for(let index in qMap) {\n                qMapArray.push({\n                    \"index\": index,\n                    \"count\": qMap[index]\n                });\n                if(qMap[index] > maxqVal) {\n                    maxqVal = qMap[index];\n                    maxqIndex = index;\n                }\n            }   \n            \n            //Sort the starting array in order.\n            a.sort((a, b) => a - b);\n            \n            //Sort the array containing the index occurences.\n            qMapArray.sort((a, b) => b[\"count\"] - a[\"count\"]);\n            \n            //Next, sort the indexes in qMap so that one by one, the largest values in the array can be popped off and inserted at the next most frequent index.\n            let arrayToSum = new Array(a.length).fill(0);\n            \n            //Start filling in the array to be summed up with the sorted values for maximal sum.\n            while(qMapArray.length) {\n                let thisIndex = qMapArray.shift();\n                let nextLargestVal = a.pop();\n                arrayToSum[thisIndex[\"index\"]] = nextLargestVal;\n            }\n            \n            //Fill in any remaining values that may exist in the original array.\n            while(a.length) {\n                let nextLargestVal = a.pop();\n                for(let i = 0; i < arrayToSum.length; i++) {\n                    if(!arrayToSum[i]) arrayToSum[i] = nextLargestVal;\n                }\n            }\n            \n            //Loop through the sorted array and add up the ranges of sums.\n            let maxSum = 0;\n            q.forEach(range => {\n                for(let i = range[0]; i <= range[1]; i++) {\n                    maxSum += arrayToSum[i];\n                }\n            });  \n            \n            return maxSum;\n        },\n        arguments: {\n            descriptions: [\n                {\n                    text: \"Array of Integers (No Brackets []; Form of 1,2,3...)\",\n                    type: \"NumberArray\"\n                },\n                {\n                    text: \"Array of Integer Arrays (Form of [1,2,3], [4,5,6]...)\",\n                    type: \"NumberArrayArray\"\n                }\n            ]\n        }\n    },\n    maxMultiple: {\n        name: 'maxMultiple',\n        instructions: `Given a divisor and a bound, find the largest integer N such that:\n\n        N is divisible by divisor.\n        N is less than or equal to bound.\n        N is greater than 0.\n        It is guaranteed that such a number exists.`,\n        codeOutput: \n        `function maxMultiple(divisor, bound) {\n            return Math.floor(bound / divisor) * divisor;\n        }`,\n        code: function maxMultiple(divisor, bound) {\n            return Math.floor(bound / divisor) * divisor;\n        },\n        arguments: {\n            descriptions: [\n                {\n                    text: \"Integer (Divisor)\",\n                    type: \"Number\"\n                },\n                {\n                    text: \"Integer (Bound)\",\n                    type: \"Number\"\n                }\n            ]\n        }\n    },\n    messageFromBinaryCode: {\n        name: 'messageFromBinaryCode',\n        instructions: `You are taking part in an Escape Room challenge designed specifically for programmers. In your efforts to find a clue, you've found a binary code written on the wall behind a vase, and realized that it must be an encrypted message. After some thought, your first guess is that each consecutive 8 bits of the code stand for the character with the corresponding extended ASCII code.\n\n        Assuming that your hunch is correct, decode the message.`,\n        codeOutput: \n        `function messageFromBinaryCode(code) {\n            //Extract the binary code in groups of 8 bits.\n            let letters = [];\n            for(let i = 0; i < code.length; i += 8) {\n                let thisLetter = \"\";\n                for(let j = i; j < i + 8; j++) {\n                    thisLetter += code[j];\n                }\n                letters.push(thisLetter);\n            }\n            //For each byte, find the binary value in decimal (reverse the string so that we can use the indexes from left to right).\n            let codes = [];\n            letters.forEach(letter => {\n                let thisLetter = letter.split(\"\").reverse().join(\"\");\n                console.log(thisLetter);\n                let thisCode = 0;\n                for(let i = 0; i < letter.length; i++) {\n                    if(thisLetter[i] === \"1\") thisCode += 2 ** i;\n                }\n                codes.push(thisCode);\n            });\n            \n            //Build the message using the decimal values.\n            let message = \"\";\n            codes.forEach(thisCode => {\n                message += String.fromCharCode(thisCode);\n            });\n            \n            return message;\n        }`,\n        code: function messageFromBinaryCode(code) {\n            //Extract the binary code in groups of 8 bits.\n            let letters = [];\n            for(let i = 0; i < code.length; i += 8) {\n                let thisLetter = \"\";\n                for(let j = i; j < i + 8; j++) {\n                    thisLetter += code[j];\n                }\n                letters.push(thisLetter);\n            }\n            //For each byte, find the binary value in decimal (reverse the string so that we can use the indexes from left to right).\n            let codes = [];\n            letters.forEach(letter => {\n                let thisLetter = letter.split(\"\").reverse().join(\"\");\n                console.log(thisLetter);\n                let thisCode = 0;\n                for(let i = 0; i < letter.length; i++) {\n                    if(thisLetter[i] === \"1\") thisCode += 2 ** i;\n                }\n                codes.push(thisCode);\n            });\n            \n            //Build the message using the decimal values.\n            let message = \"\";\n            codes.forEach(thisCode => {\n                message += String.fromCharCode(thisCode);\n            });\n            \n            return message;\n        },\n        arguments: {\n            descriptions: [\n                {\n                    text: \"Single String of Binary Code (Form of '0000111011010100...')\",\n                    type: \"String\"\n                }\n            ]\n        }\n    },\n    metroCard: {\n        name: 'metroCard',\n        instructions: `You just bought a public transit card that allows you to ride the Metro for a certain number of days.\n\n        Here is how it works: upon first receiving the card, the system allocates you a 31-day pass, which equals the number of days in January. The second time you pay for the card, your pass is extended by 28 days, i.e. the number of days in February (note that leap years are not considered), and so on. The 13th time you extend the pass, you get 31 days again.\n        \n        You just ran out of days on the card, and unfortunately you've forgotten how many times your pass has been extended so far. However, you do remember the number of days you were able to ride the Metro during this most recent month. Figure out the number of days by which your pass will now be extended, and return all the options as an array sorted in increasing order.`,\n        codeOutput: \n        `function metroCard(lastNumberOfDays) {\n            return lastNumberOfDays === 30 || lastNumberOfDays === 28 ? \n            [31] :\n            [28, 30, 31];\n        }`,\n        code: function metroCard(lastNumberOfDays) {\n            return lastNumberOfDays === 30 || lastNumberOfDays === 28 ? \n            [31] :\n            [28, 30, 31];\n        },\n        arguments: {\n            descriptions: [\n                {\n                    text: \"Integer (28, 30, or 31)\",\n                    type: \"Number\"\n                }\n            ]\n        }\n    },\n    minesweeper: {\n        name: 'minesweeper',\n        instructions: `In the popular Minesweeper game you have a board with some mines and those cells that don't contain a mine have a number in it that indicates the total number of mines in the neighboring cells. Starting off with some arrangement of mines we want to create a Minesweeper game setup.`,\n        codeOutput: \n        `function minesweeper(matrix) {\n            //start with an output array of the same size and same length as matrix with all 0's\n            let output = [];\n            for(let i = 0; i < matrix.length; i++) {\n                let thisRow = [];\n                for(let j = 0; j < matrix[i].length; j++) {\n                    thisRow.push(0);\n                }\n                output.push(thisRow);\n            }\n            //Find all 'true' values in each row of the matrix\n            for(let row = 0; row < matrix.length; row++) {\n                for(let col = 0; col < matrix[row].length; col++) {\n                    //If this value is true, initiate loop to go around it and add 1 to surrouding elements in the ouput array.\n                    if(matrix[row][col]) {\n                        console.log(\\`LOOPING THROUGH ELEMENTS AROUND \\${row},\\${col}\\`);\n                        //Loop through surrounding elements\n                        for(let row_prime = row - 1; row_prime < row + 2; row_prime++) {\n                            for(let col_prime = col - 1; col_prime < col + 2; col_prime++) {\n                                //Make sure this element is not out of bounds or equal to the element where we currently are\n                                if(row_prime > -1 && \n                                col_prime > -1 &&\n                                row_prime < matrix.length &&\n                                col_prime < matrix[row].length &&\n                                !(col_prime === col && row_prime === row)\n                                ) {\n                                    console.log(\\`Adding at location \\${row_prime},\\${col_prime}\\`);\n                                    //Add to this element in the output array.\n                                    output[row_prime][col_prime]++;\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n            return output;\n        }`,\n        code: function minesweeper(matrix) {\n            //start with an output array of the same size and same length as matrix with all 0's\n            let output = [];\n            for(let i = 0; i < matrix.length; i++) {\n                let thisRow = [];\n                for(let j = 0; j < matrix[i].length; j++) {\n                    thisRow.push(0);\n                }\n                output.push(thisRow);\n            }\n            //Find all 'true' values in each row of the matrix\n            for(let row = 0; row < matrix.length; row++) {\n                for(let col = 0; col < matrix[row].length; col++) {\n                    //If this value is true, initiate loop to go around it and add 1 to surrouding elements in the ouput array.\n                    if(matrix[row][col]) {\n                        console.log(`LOOPING THROUGH ELEMENTS AROUND ${row},${col}`);\n                        //Loop through surrounding elements\n                        for(let row_prime = row - 1; row_prime < row + 2; row_prime++) {\n                            for(let col_prime = col - 1; col_prime < col + 2; col_prime++) {\n                                //Make sure this element is not out of bounds or equal to the element where we currently are\n                                if(row_prime > -1 && \n                                col_prime > -1 &&\n                                row_prime < matrix.length &&\n                                col_prime < matrix[row].length &&\n                                !(col_prime === col && row_prime === row)\n                                ) {\n                                    console.log(`Adding at location ${row_prime},${col_prime}`);\n                                    //Add to this element in the output array.\n                                    output[row_prime][col_prime]++;\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n            return output;\n        },\n        arguments: {\n            descriptions: [\n                {\n                    text: \"Array of Equal-Length Boolean Arrays (Form of [true,false,true], [false,false,true]...)\",\n                    type: \"BooleanArrayArray\"\n                }\n            ]\n        }\n    },\n    minimalNumberOfCoins: {\n        name: 'minimalNumberOfCoins',\n        instructions: `You find yourself in Bananaland trying to buy a banana. You are super rich so you have an unlimited supply of banana-coins, but you are trying to use as few coins as possible.\n\n        The coin values available in Bananaland are stored in a sorted array coins. coins[0] = 1, and for each i (0 < i < coins.length) coins[i] is divisible by coins[i - 1]. Find the minimal number of banana-coins you'll have to spend to buy a banana given the banana's price.`,\n        codeOutput: \n        `function minimalNumberOfCoins(coins, price) {\n            let costLeft = price;\n            //Loop through every coin in the array.\n            let total = 0;\n            for(let coin = coins.length - 1; coin >= 0; coin--) {\n                //Find the number of this coin value that can be used, and then update the leftover price to be the remainder.\n                total += Math.floor(costLeft / coins[coin]);\n                costLeft %= coins[coin];\n                //If this total is equal to the price, return the total.\n                if(total === price) return total;\n            }\n            return total;\n        }`,\n        code: function minimalNumberOfCoins(coins, price) {\n            let costLeft = price;\n            //Loop through every coin in the array.\n            let total = 0;\n            for(let coin = coins.length - 1; coin >= 0; coin--) {\n                //Find the number of this coin value that can be used, and then update the leftover price to be the remainder.\n                total += Math.floor(costLeft / coins[coin]);\n                costLeft %= coins[coin];\n                //If this total is equal to the price, return the total.\n                if(total === price) return total;\n            }\n            return total;\n        },\n        arguments: {\n            descriptions: [\n                {\n                    text: \"Array of Integers (No Brackets []; Form of 1,2,3...)\",\n                    type: \"NumberArray\"\n                },\n                {\n                    text: \"Integer (Price)\",\n                    type: \"Number\"\n                }\n            ]\n        }\n    },\n    mirrorBits: {\n        name: 'mirrorBits',\n        instructions: `Reverse the order of the bits in a given integer.`,\n        codeOutput: \n        `function mirrorBits(a) {\n            //Convert this integer into binary.\n            let binary = a.toString(2).split(\"\").reverse().join(\"\");\n            //Convert the reversed binary back into an integer.\n            let output = parseInt(binary, 2);\n            return output;\n        }`,\n        code: function mirrorBits(a) {\n            //Convert this integer into binary.\n            let binary = a.toString(2).split(\"\").reverse().join(\"\");\n            //Convert the reversed binary back into an integer.\n            let output = parseInt(binary, 2);\n            return output;\n        },\n        arguments: {\n            descriptions: [\n                {\n                    text: \"Integer Input\",\n                    type: \"Number\"\n                }\n            ]\n        }\n    },\n    missedClasses: {\n        name: 'missedClasses',\n        instructions: `Your Math teacher takes education very seriously, and hates it when a class is missed or canceled for any reason. He even made up the following rule: if a class is missed because of a holiday, the teacher will compensate for it with a makeup class after school.\n\n        You're given an array, daysOfTheWeek, with the weekdays on which your teacher's classes are scheduled, and holidays, representing the dates of the holidays throughout the academic year (from 1st of September in year to 31st of May in year + 1). How many times will you be forced to stay after school for a makeup class because of holiday conflicts in the current academic year?\n        \n        For your convenience, here is the list of month lengths (from January to December, respectively):\n        \n        Month lengths: 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31.\n        Please note that in leap years February has 29 days.`,\n        codeOutput: \n        `function missedClasses(year, daysOfTheWeek, holidays) {\n            //Keep track of months.\n            let months = [\n                { name: \"January\", days: 31 },\n                { name: \"February\", days: 28 },\n                { name: \"March\", days: 31 },\n                { name: \"April\", days: 30 },\n                { name: \"May\", days: 31 },\n                { name: \"June\", days: 30 },\n                { name: \"July\", days: 31 },\n                { name: \"August\", days: 31 },\n                { name: \"September\", days: 30 },\n                { name: \"October\", days: 31 },\n                { name: \"November\", days: 30 },\n                { name: \"December\", days: 31 }\n            ];\n            //Find the day of the week that it will be at the beginning of a given month.\n                const findCurrentDay = inputDate => {\n                    //Find the number of days in years passed since 1872.\n                    let days = ((inputDate[1] - 1872) * 365);\n                    //Add in the total number of leap days that passed in years before.\n                    days += Math.ceil((inputDate[1] - 1872) / 4);\n                    //Remove extra leap day from 1900 or 2100.\n                    if(inputDate[1] > 1900) days--;\n                    if(inputDate[1] > 2100) days--;\n                    //Add in one more day if this year is a leap year, AND if leap day already passed, excluding 2100 (which isn't a leap year)\n                    let isLeap = false;\n                    if(inputDate[1] % 4 === 0 && inputDate[0] > 2 && inputDate[1] !== 2100 && inputDate[1] !== 1900) {\n                        days++;\n                        isLeap = true;\n                    };\n                    \n                    //Add in the number of days that have passed so far before this month this year (leap day already included if this is a leap year).\n                    for(let i = 0; i < inputDate[0] - 1; i++) {\n                        days += months[i].days;\n                    }\n                    \n                    //Finally, add in the number of days passed this month.\n                    days += (inputDate[2] - 1);\n                    \n                    //Return the number of the current day of the week from the input string (if 0 - Monday, 6 - Sunday, etc.)\n                    return days % 7;\n                };\n            \n            //Keep track of the number of days that will be missed.\n            let missedClasses = 0;\n            \n            //For each holiday, see if the day of the week matches one of the days in the days of the week array. If so, add to the count of missed classes.\n            holidays.forEach(holiday => {\n                //Format this holiday.\n                let thisDate = holiday.split(\"-\").map(str => Number(str));\n                //Check if this date lands on one of the class days.\n                daysOfTheWeek.forEach(day => {\n                    //Pass this date into the function, making sure we pass in the next year if the dates are for the winter/spring sessions.\n                    if(findCurrentDay([thisDate[0], thisDate[0] > 8 ? year : year + 1, thisDate[1]]) === day - 1) missedClasses++;\n                });\n            });\n            \n            return missedClasses;\n        }`,\n        code: function missedClasses(year, daysOfTheWeek, holidays) {\n            //Keep track of months.\n            let months = [\n                { name: \"January\", days: 31 },\n                { name: \"February\", days: 28 },\n                { name: \"March\", days: 31 },\n                { name: \"April\", days: 30 },\n                { name: \"May\", days: 31 },\n                { name: \"June\", days: 30 },\n                { name: \"July\", days: 31 },\n                { name: \"August\", days: 31 },\n                { name: \"September\", days: 30 },\n                { name: \"October\", days: 31 },\n                { name: \"November\", days: 30 },\n                { name: \"December\", days: 31 }\n            ];\n            //Find the day of the week that it will be at the beginning of a given month.\n                const findCurrentDay = inputDate => {\n                    //Find the number of days in years passed since 1872.\n                    let days = ((inputDate[1] - 1872) * 365);\n                    //Add in the total number of leap days that passed in years before.\n                    days += Math.ceil((inputDate[1] - 1872) / 4);\n                    //Remove extra leap day from 1900 or 2100.\n                    if(inputDate[1] > 1900) days--;\n                    if(inputDate[1] > 2100) days--;\n                    //Add in one more day if this year is a leap year, AND if leap day already passed, excluding 2100 (which isn't a leap year)\n                    let isLeap = false;\n                    if(inputDate[1] % 4 === 0 && inputDate[0] > 2 && inputDate[1] !== 2100 && inputDate[1] !== 1900) {\n                        days++;\n                        isLeap = true;\n                    };\n                    \n                    //Add in the number of days that have passed so far before this month this year (leap day already included if this is a leap year).\n                    for(let i = 0; i < inputDate[0] - 1; i++) {\n                        days += months[i].days;\n                    }\n                    \n                    //Finally, add in the number of days passed this month.\n                    days += (inputDate[2] - 1);\n                    \n                    //Return the number of the current day of the week from the input string (if 0 - Monday, 6 - Sunday, etc.)\n                    return days % 7;\n                };\n            \n            //Keep track of the number of days that will be missed.\n            let missedClasses = 0;\n            \n            //For each holiday, see if the day of the week matches one of the days in the days of the week array. If so, add to the count of missed classes.\n            holidays.forEach(holiday => {\n                //Format this holiday.\n                let thisDate = holiday.split(\"-\").map(str => Number(str));\n                //Check if this date lands on one of the class days.\n                daysOfTheWeek.forEach(day => {\n                    //Pass this date into the function, making sure we pass in the next year if the dates are for the winter/spring sessions.\n                    if(findCurrentDay([thisDate[0], thisDate[0] > 8 ? year : year + 1, thisDate[1]]) === day - 1) missedClasses++;\n                });\n            });\n            \n            return missedClasses;\n        },\n        arguments: {\n            descriptions: [\n                {\n                    text: \"Integer (Year)\",\n                    type: \"Number\"\n                },\n                {\n                    text: \"Array of Integers for Days of the Week (No Brackets []; Form of 1,2,3...)\",\n                    type: \"NumberArray\"\n                },\n                {\n                    text: \"Array of Strings for Date-Day (No Brackets []; Form of 11-04,02-22...)\",\n                    type: \"StringArray\"\n                }\n            ]\n        }\n    },\n    mostFrequentDigitSum: {\n        name: 'mostFrequentDigitSum',\n        instructions: `A step(x) operation works like this: it changes a number x into x - s(x), where s(x) is the sum of x's digits. You like applying functions to numbers, so given the number n, you decide to build a decreasing sequence of numbers: n, step(n), step(step(n)), etc., with 0 as the last element.\n\n        Building a single sequence isn't enough for you, so you replace all elements of the sequence with the sums of their digits (s(x)). Now you're curious as to which number appears in the new sequence most often. If there are several answers, return the maximal one.`,\n        codeOutput: \n        `function mostFrequentDigitSum(n) {\n            let sequenceNumbers = {};\n            let currentNumber = n;\n            //While there are still numbers left in the sequence:\n            while(currentNumber > 0) {\n                //Get the sum of digits.\n                let currentSequenceNumber = Number(String(currentNumber).split(\"\").reduce((a, b) => Number(a) + Number(b), 0));\n                //Using this sum, add this to the object map.\n                if(sequenceNumbers[currentSequenceNumber]) {\n                    sequenceNumbers[currentSequenceNumber]++;\n                } else {\n                    sequenceNumbers[currentSequenceNumber] = 1;\n                }\n                currentNumber -= currentSequenceNumber;\n            }\n            let mostFrequent = 0;\n            for(let number in sequenceNumbers) {\n                //Initially, assign the most frequent to the first number in the sequence map.\n                if(mostFrequent === 0) {\n                    mostFrequent = number;\n                }\n                //See if this number occurs more than the last saved number.\n                if(sequenceNumbers[number] > sequenceNumbers[mostFrequent]) {\n                    mostFrequent = number;\n                    //If the number of occurrences are the same yet this key is larger, replace the current most frequent with the larger key.\n                } else if(sequenceNumbers[number] === sequenceNumbers[mostFrequent] && number > mostFrequent) {\n                    mostFrequent = number;\n                }\n            }\n           \n            return Number(mostFrequent);\n        }`,\n        code: function mostFrequentDigitSum(n) {\n            let sequenceNumbers = {};\n            let currentNumber = n;\n            //While there are still numbers left in the sequence:\n            while(currentNumber > 0) {\n                //Get the sum of digits.\n                let currentSequenceNumber = Number(String(currentNumber).split(\"\").reduce((a, b) => Number(a) + Number(b), 0));\n                //Using this sum, add this to the object map.\n                if(sequenceNumbers[currentSequenceNumber]) {\n                    sequenceNumbers[currentSequenceNumber]++;\n                } else {\n                    sequenceNumbers[currentSequenceNumber] = 1;\n                }\n                currentNumber -= currentSequenceNumber;\n            }\n            let mostFrequent = 0;\n            for(let number in sequenceNumbers) {\n                //Initially, assign the most frequent to the first number in the sequence map.\n                if(mostFrequent === 0) {\n                    mostFrequent = number;\n                }\n                //See if this number occurs more than the last saved number.\n                if(sequenceNumbers[number] > sequenceNumbers[mostFrequent]) {\n                    mostFrequent = number;\n                    //If the number of occurrences are the same yet this key is larger, replace the current most frequent with the larger key.\n                } else if(sequenceNumbers[number] === sequenceNumbers[mostFrequent] && number > mostFrequent) {\n                    mostFrequent = number;\n                }\n            }\n           \n            return Number(mostFrequent);\n        },\n        arguments: {\n            descriptions: [\n                {\n                    text: \"Input Integer\",\n                    type: \"Number\"\n                }\n            ]\n        }\n    },\n    newNumeralSystem: {\n        name: 'newNumeralSystem',\n        instructions: `Your Informatics teacher at school likes coming up with new ways to help you understand the material. When you started studying numeral systems, he introduced his own numeral system, which he's convinced will help clarify things. His numeral system has base 26, and its digits are represented by English capital letters - A for 0, B for 1, and so on.\n\n        The teacher assigned you the following numeral system exercise: given a one-digit number, you should find all unordered pairs of one-digit numbers whose values add up to the number.`,\n        codeOutput: \n        `function newNumeralSystem(number) {\n            let pairs = [];\n            //Save the char code of this 'number'\n            let largeCode = number.charCodeAt(0);\n            //Using the letter A as the base for the smaller code, start constructing addition expressions until the two codes meet.\n            for(let i = 65; i <= largeCode; i++) {\n                pairs.push(\\`\\${String.fromCharCode(i)} + \\${String.fromCharCode(largeCode)}\\`);\n                largeCode--;\n            }\n            return pairs;\n        }`,\n        code: function newNumeralSystem(number) {\n            let pairs = [];\n            //Save the char code of this 'number'\n            let largeCode = number.charCodeAt(0);\n            //Using the letter A as the base for the smaller code, start constructing addition expressions until the two codes meet.\n            for(let i = 65; i <= largeCode; i++) {\n                pairs.push(`${String.fromCharCode(i)} + ${String.fromCharCode(largeCode)}`);\n                largeCode--;\n            }\n            return pairs;\n        },\n        arguments: {\n            descriptions: [\n                {\n                    text: \"Single Character Input (A-G)\",\n                    type: \"String\"\n                }\n            ]\n        }\n    },\n    newYearCelebrations: {\n        name: 'newYearCelebrations',\n        instructions: `You're a pretty busy billionaire, and you often fly your personal Private Jet to remote places. Usually travel doesn't bother you, but this time you are unlucky: it's New Year's Eve, and since you have to fly halfway around the world, you'll probably have to celebrate New Year's Day in mid-air!\n\n        Your course lies west of your current location and crosses several time zones. The pilot told you the exact schedule: it is known that you will take off at takeOffTime, and in minutes[i] after takeoff you will cross the ith border between time zones. After crossing each border you will have to set your wrist watch one hour earlier (every second matters to you, so you can't let your watch show incorrect time). It is guaranteed that you won't cross the IDL (i.e. after crossing each time zone border your current time will be set one hour back).\n        \n        You've been thinking about this situation and realized that it might be a good opportunity to celebrate New Year's Day more than once, i.e. each time your wrist watch shows 00:00. Assuming that you set your watch immediately after the border is crossed, how many times will you be able to celebrate this New Year's Day with a nice bottle of champagne? Note that the answer should include celebrations both in mid-air and on the ground (it doesn't matter if the plane landed in the last time zone before the midnight or not, you'll not let the last opportunity to celebrate New Year slip through your fingers).`,\n        codeOutput: \n        `function newYearCelebrations(takeOffTime, minutes) {\n            let celebrations = 0;\n            //Convert takeoff time to minutes\n            let takeOffMinutes = takeOffTime.split(\":\").map(str => Number(str));\n            takeOffMinutes = (takeOffMinutes[0] * 60) + takeOffMinutes[1];\n            //If the clock is already midnight, set to a full 24-hour set of minutes.\n            if(takeOffMinutes === 0) takeOffMinutes = 1440;\n            \n            //Convert minutes into individual increments\n            let minuteIncrements = minutes.map((mins, index) => {\n                if(index === 0) return mins;\n                return mins - minutes[index - 1];\n            });\n                \n            //Loop through each of the increments. \n            for(let i = 0; i < minuteIncrements.length; i++) {\n                //Add this time increment. If midnight passes during this time, celebrate.\n                if(takeOffMinutes < 1440 && takeOffMinutes + minuteIncrements[i] >= 1440 ||\n                takeOffMinutes <= 1440 && takeOffMinutes + minuteIncrements[i] > 1440) celebrations++;\n                takeOffMinutes += minuteIncrements[i];\n                \n                //Go back one hour at the end of the cycle.\n                takeOffMinutes -= 60;\n            }\n            \n            //Finally, if the plane landed and it is before midnight, celebrate one more time.\n            if(takeOffMinutes <= 1440) celebrations++;\n            return celebrations;\n        }`,\n        code: function newYearCelebrations(takeOffTime, minutes) {\n            let celebrations = 0;\n            //Convert takeoff time to minutes\n            let takeOffMinutes = takeOffTime.split(\":\").map(str => Number(str));\n            takeOffMinutes = (takeOffMinutes[0] * 60) + takeOffMinutes[1];\n            //If the clock is already midnight, set to a full 24-hour set of minutes.\n            if(takeOffMinutes === 0) takeOffMinutes = 1440;\n            \n            //Convert minutes into individual increments\n            let minuteIncrements = minutes.map((mins, index) => {\n                if(index === 0) return mins;\n                return mins - minutes[index - 1];\n            });\n                \n            //Loop through each of the increments. \n            for(let i = 0; i < minuteIncrements.length; i++) {\n                //Add this time increment. If midnight passes during this time, celebrate.\n                if(takeOffMinutes < 1440 && takeOffMinutes + minuteIncrements[i] >= 1440 ||\n                takeOffMinutes <= 1440 && takeOffMinutes + minuteIncrements[i] > 1440) celebrations++;\n                takeOffMinutes += minuteIncrements[i];\n                \n                //Go back one hour at the end of the cycle.\n                takeOffMinutes -= 60;\n            }\n            \n            //Finally, if the plane landed and it is before midnight, celebrate one more time.\n            if(takeOffMinutes <= 1440) celebrations++;\n            return celebrations;\n        },\n        arguments: {\n            descriptions: [\n                {\n                    text: \"24-Hour Input String (Hour:Minute string in the form of 23:05)\",\n                    type: \"String\"\n                },\n                {\n                    text: \"Array of Integers (No Brackets []; Form of 1,2,3...)\",\n                    type: \"NumberArray\"\n                }\n            ]\n        }\n    },\n    noIfsNoButs: {\n        name: 'noIfsNoButs',\n        instructions: `Write a function that accepts two parameters and says whether a is smaller than, bigger than, or equal to b. No 'if' or ? can be used`,\n        codeOutput: \n        `let noIfsNoButs = (a, b) => {\n            let larger = Math.max(a,b);\n            let smaller = Math.min(a,b);\n            switch(larger) {\n                case smaller:\n                    return \\`\\${a} is equal to \\${b}\\`;\n                case a:\n                    return \\`\\${a} is greater than \\${b}\\`;\n                case b:\n                    return \\`\\${a} is smaller than \\${b}\\`;\n            }\n        }`,\n        code: function noIfsNoButs(a, b) {\n            let larger = Math.max(a,b);\n            let smaller = Math.min(a,b);\n            switch(larger) {\n                case smaller:\n                    return `${a} is equal to ${b}`;\n                case a:\n                    return `${a} is greater than ${b}`;\n                case b:\n                    return `${a} is smaller than ${b}`;\n            }\n        },\n        arguments: {\n            descriptions: [\n                {\n                    text: \"Integer a\",\n                    type: \"Number\"\n                },\n                {\n                    text: \"Integer b\",\n                    type: \"Number\"\n                }\n            ]\n        }\n    },\n    nthNumber: {\n        name: 'nthNumber',\n        instructions: `You are given a string s of characters that contains at least n numbers (here, a number is defined as a consecutive series of digits, where any character immediately to the left and right of the series are not digits). The numbers may contain leading zeros, but it is guaranteed that each number has at least one non-zero digit in it.\n\n        Your task is to find the nth number and return it as a string without leading zeros.`,\n        codeOutput: \n        `function nthNumber(s, n) {\n            /*\n            Using the RegExp constructor, create a regular expression that matches numbers in the input string (using the global flag).\n        \n            For the inner group:\n            [1-9]+ Matches one or more non-zero digits. This means only numbers beginning in non-zero numbers will be captured.\n            [0-9]* Matches any digit following the first (there can be zero or more).\n            Those two categories are grouped together () into a number.\n        \n            For the outer group:\n            . matches any character except line break.s\n            * matches zero or more.\n            ? matches as few characters as possible. \n        \n            {n} will make the first result of the exec() call the target nth element we are looking for.\n        \n            Finally, when re.exec(s)[1] is called, element 1 of the returned array will contain the number string in the format that is wanted.\n            */\n            var re = new RegExp(\\`(([1-9]+[0-9]*).*?){\\${n}}\\`, 'g');\n            return re.exec(s)[1];\n        }`,\n        code: function nthNumber(s, n) {\n            /*\n            Using the RegExp constructor, create a regular expression that matches numbers in the input string (using the global flag).\n        \n            For the inner group:\n            [1-9]+ Matches one or more non-zero digits. This means only numbers beginning in non-zero numbers will be captured.\n            [0-9]* Matches any digit following the first (there can be zero or more).\n            Those two categories are grouped together () into a number.\n        \n            For the outer group:\n            . matches any character except line break.s\n            * matches zero or more.\n            ? matches as few characters as possible. \n        \n            {n} will make the first result of the exec() call the target nth element we are looking for.\n        \n            Finally, when re.exec(s)[1] is called, element 1 of the returned array will contain the number string in the format that is wanted.\n            */\n            var re = new RegExp(`(([1-9]+[0-9]*).*?){${n}}`, 'g');\n            return re.exec(s)[1];\n        },\n        arguments: {\n            descriptions: [\n                {\n                    text: \"String With Mix of Numbers and Other Characters (Example: 8one 003number 201numbers li-000233le number444)\",\n                    type: \"String\"\n                },\n                {\n                    text: \"Integer n\",\n                    type: \"Number\"\n                }\n            ]\n        }\n    },\n    numberOfClans: {\n        name: 'numberOfClans',\n        instructions: `Let's call two integers A and B friends if each integer from the array divisors is either a divisor of both A and B or neither A nor B. If two integers are friends, they are said to be in the same clan. How many clans are the integers from 1 to k, inclusive, broken into?`,\n        codeOutput: \n        `function numberOfClans(divisors, k) {\n            //Loop through every number 1-k. \n            let factorCombos = {};\n            for(let i = 1; i <= k; i++) {\n                //For each of them, find out all numbers from divisors that are factors.\n                let factors = {};\n                for(let j = 0; j < divisors.length; j++) {\n                    if(i % divisors[j] === 0 && !factors[divisors[j]]) {\n                        factors[divisors[j]] = true;\n                    }\n                }\n                //Combine all factors \n                let factorString = \"\";\n                for(let factor in factors) {\n                    factorString += factor + \" \";\n                }\n                factorString = factorString.length > 0 ? factorString.trim() : \"none\";\n                //Add this combination of factors to the factorCombos map.\n                if(factorCombos[factorString]) {\n                    factorCombos[factorString]++;\n                } else {\n                    factorCombos[factorString] = 1;\n                }\n            }\n            //Return total numbers of different combinations\n            return Object.keys(factorCombos).length;\n        }`,\n        code: function numberOfClans(divisors, k) {\n            //Loop through every number 1-k. \n            let factorCombos = {};\n            for(let i = 1; i <= k; i++) {\n                //For each of them, find out all numbers from divisors that are factors.\n                let factors = {};\n                for(let j = 0; j < divisors.length; j++) {\n                    if(i % divisors[j] === 0 && !factors[divisors[j]]) {\n                        factors[divisors[j]] = true;\n                    }\n                }\n                //Combine all factors \n                let factorString = \"\";\n                for(let factor in factors) {\n                    factorString += factor + \" \";\n                }\n                factorString = factorString.length > 0 ? factorString.trim() : \"none\";\n                //Add this combination of factors to the factorCombos map.\n                if(factorCombos[factorString]) {\n                    factorCombos[factorString]++;\n                } else {\n                    factorCombos[factorString] = 1;\n                }\n            }\n            //Return total numbers of different combinations\n            return Object.keys(factorCombos).length;\n        },\n        arguments: {\n            descriptions: [\n                {\n                    text: \"Array of Integers (No Brackets []; Form of 1,2,3...)\",\n                    type: \"NumberArray\"\n                },\n                {\n                    text: \"Integer k\",\n                    type: \"Number\"\n                }\n            ]\n        }\n    },\n    numbersGrouping: {\n        name: 'numbersGrouping',\n        instructions: `You are given an array of integers that you want distribute between several groups. The first group should contain numbers from 1 to 104, the second should contain those from 104 + 1 to 2 * 104, ..., the 100th one should contain numbers from 99 * 104 + 1 to 106 and so on.\n\n        All the numbers will then be written down in groups to the text file in such a way that:\n        \n        the groups go one after another;\n        each non-empty group has a header which occupies one line;\n        each number in a group occupies one line.\n        Calculate how many lines the resulting text file will have.`,\n        codeOutput: \n        `function numbersGrouping(a) {\n            //Find how many numbers are in each group.\n            let groupMap = {};\n            a.forEach(number => {\n                //Find the group number this number is part of, and use it as key.\n                let groupNumber = Math.ceil(number / 10000);\n                if(groupMap[groupNumber]) {\n                    groupMap[groupNumber]++;\n                } else {\n                    groupMap[groupNumber] = 1;\n                }\n            });\n            \n            let total = 0;\n            for(let group in groupMap) {\n                //Add the number of numbers in this group.\n                total += groupMap[group];\n                //Add the heading.\n                total++;\n            }\n        \n            return total;\n        }`,\n        code: function numbersGrouping(a) {\n            //Find how many numbers are in each group.\n            let groupMap = {};\n            a.forEach(number => {\n                //Find the group number this number is part of, and use it as key.\n                let groupNumber = Math.ceil(number / 10000);\n                if(groupMap[groupNumber]) {\n                    groupMap[groupNumber]++;\n                } else {\n                    groupMap[groupNumber] = 1;\n                }\n            });\n            \n            let total = 0;\n            for(let group in groupMap) {\n                //Add the number of numbers in this group.\n                total += groupMap[group];\n                //Add the heading.\n                total++;\n            }\n        \n            return total;\n        },\n        arguments: {\n            descriptions: [\n                {\n                    text: \"Array of Integers (No Brackets []; Form of 1,2,3...)\",\n                    type: \"NumberArray\"\n                }\n            ]\n        }\n    },\n    numJewelsInStones: {\n        name: `numJewelsInStones`,\n        instructions: `You're given strings jewels representing the types of stones that are jewels, and stones representing the stones you have. Each character in stones is a type of stone you have. You want to know how many of the stones you have are also jewels.\n\n        Letters are case sensitive, so \"a\" is considered a different type of stone from \"A\".`,\n        codeOutput: \n        `var numJewelsInStones = function(jewels, stones) {\n            //Create object map of all types of jewels.\n            let jewelsMap = {};\n            jewels.split(\"\").forEach(jewel => {\n                if(!jewelsMap[jewel]) {\n                    jewelsMap[jewel] = 1;\n                }\n            });\n            \n            //Count the total number of jewels inside stones.\n            let count = 0;\n            stones.split(\"\").forEach(stone => {\n                if(jewelsMap[stone]) count++;\n            });\n            \n            return count;\n        };`,\n        code: function numJewelsInStones(jewels, stones) {\n            //Create object map of all types of jewels.\n            let jewelsMap = {};\n            jewels.split(\"\").forEach(jewel => {\n                if(!jewelsMap[jewel]) {\n                    jewelsMap[jewel] = 1;\n                }\n            });\n            \n            //Count the total number of jewels inside stones.\n            let count = 0;\n            stones.split(\"\").forEach(stone => {\n                if(jewelsMap[stone]) count++;\n            });\n            \n            return count;\n        },\n        arguments: {\n            descriptions: [\n                {\n                    text: \"String to Represent Jewels\",\n                    type: \"String\"\n                },\n                {\n                    text: \"String to Represent Stones\",\n                    type: \"String\"\n                }\n            ]\n        }\n    }\n};\n\nexport default challenges_k_n;\n\n/*\n\nTemplate:\n\nname: {\n    name: ``,\n    instructions: ``,\n    codeOutput: \n    ``,\n    code: ,\n    arguments: {\n        descriptions: [\n            {\n                text: \"\",\n                type: \"\"\n            }\n        ]\n    }\n}\n\nType List:\nNumber\nString\nNumber Array \nString Array\nNumber Array Array\nString Array Array \nBooleanArrayArray\n\n*/","//Include global BigInt (as comment) in order to prevent no-undef in this environment.\n/* global BigInt */\n\nconst challenges_o_r = {\n    pagesNumberingWithInk: {\n        name: 'pagesNumberingWithInk',\n        instructions: `You work in a company that prints and publishes books. You are responsible for designing the page numbering mechanism in the printer. You know how many digits a printer can print with the leftover ink. Now you want to write a function to determine what the last page of the book is that you can number given the current page and numberOfDigits left. A page is considered numbered if it has the full number printed on it (e.g. if we are working with page 102 but have ink only for two digits then this page will not be considered numbered).\n\n        It's guaranteed that you can number the current page, and that you can't number the last one in the book.`,\n        codeOutput: \n        `function pagesNumberingWithInk(current, numberOfDigits) {\n            //Keep track of digits left and the current page.\n            let digitsLeft = numberOfDigits;\n            let currentPage = current;\n            //As long as we have enough digits left, remove the necessary number of digits and go to the next page.\n            while(digitsLeft >= String(currentPage).length) {\n                digitsLeft -= String(currentPage).length;\n                currentPage++;\n            }\n            //Since there will be an extra page accounted for, decrement by 1 before returning each time.\n            return --currentPage;\n        }`,\n        code: function pagesNumberingWithInk(current, numberOfDigits) {\n            //Keep track of digits left and the current page.\n            let digitsLeft = numberOfDigits;\n            let currentPage = current;\n            //As long as we have enough digits left, remove the necessary number of digits and go to the next page.\n            while(digitsLeft >= String(currentPage).length) {\n                digitsLeft -= String(currentPage).length;\n                currentPage++;\n            }\n            //Since there will be an extra page accounted for, decrement by 1 before returning each time.\n            return --currentPage;\n        },\n        arguments: {\n            descriptions: [\n                {\n                    text: \"Integer (Current Page)\",\n                    type: \"Number\"\n                },\n                {\n                    text: \"Integer (Number of Digits Left)\",\n                    type: \"Number\"\n                }\n            ]\n        }\n    },\n    pairOfShoes: {\n        name: 'pairOfShoes',\n        instructions: `Yesterday you found some shoes in the back of your closet. Each shoe is described by two values:\n\n        type indicates if it's a left or a right shoe;\n        size is the size of the shoe.\n        Your task is to check whether it is possible to pair the shoes you found in such a way that each pair consists of a right and a left shoe of an equal size.`,\n        codeOutput: \n        `function pairOfShoes(shoes) {\n            //Store key/value maps of how many of each size there are as well as the 'total' in all the left/right fields([0])\n            let uniqueVals = {};\n            let shoeSides = {};\n            //Going through each shoe, tally within total of this size and total for right/left\n            shoes.forEach(shoe => {\n                if(uniqueVals[shoe[1]]) {\n                    uniqueVals[shoe[1]]++;\n                    shoeSides[shoe[1]] += shoe[0];\n                } else {\n                    uniqueVals[shoe[1]] = 1;\n                    shoeSides[shoe[1]] = shoe[0];\n                }\n            });\n            //If the total number of shoes of each size divided by the total left/right count for the same size, then there is a pair for each shoe.\n            for(let size in uniqueVals) {\n                if(uniqueVals[size] / 2 !== shoeSides[size]) return false;\n            }\n            return true;\n        }`,\n        code: function pairOfShoes(shoes) {\n            //Store key/value maps of how many of each size there are as well as the 'total' in all the left/right fields([0])\n            let uniqueVals = {};\n            let shoeSides = {};\n            //Going through each shoe, tally within total of this size and total for right/left\n            shoes.forEach(shoe => {\n                if(uniqueVals[shoe[1]]) {\n                    uniqueVals[shoe[1]]++;\n                    shoeSides[shoe[1]] += shoe[0];\n                } else {\n                    uniqueVals[shoe[1]] = 1;\n                    shoeSides[shoe[1]] = shoe[0];\n                }\n            });\n            //If the total number of shoes of each size divided by the total left/right count for the same size, then there is a pair for each shoe.\n            for(let size in uniqueVals) {\n                if(uniqueVals[size] / 2 !== shoeSides[size]) return false;\n            }\n            return true;\n        },\n        arguments: {\n            descriptions: [\n                {\n                    text: \"Array of Integer Arrays; Left Element Is 0 or 1; Right Element Is Positive Integer (Form of [0,21], [1,23]...)\",\n                    type: \"NumberArrayArray\"\n                }\n            ]\n        }\n    },\n    palindromeRearranging: {\n        name: 'palindromeRearranging',\n        instructions: `Given a string, find out if its characters can be rearranged to form a palindrome.`,\n        codeOutput: \n        `function palindromeRearranging(inputString) {\n            //Create a character map in an object for the string characters.\n            let charMap = {};\n            for(let i = 0; i < inputString.length; i++) {\n                !charMap[inputString[i]] ? charMap[inputString[i]] = 1 : charMap[inputString[i]]++;\n            }\n            \n            //Check through each character in the map object. In order to be arranged into a palindrome, only one set of characters can be odd (the center letter).\n            let oddsLeft = 1;\n            for(let letter in charMap) {\n                if(charMap[letter] % 2 !== 0) {\n                    oddsLeft--;\n                }\n            }\n            \n            //If there is 0-1 odd set of characters, we can make it into a palindrome.\n            if(oddsLeft > -1) return true;\n            \n            return false;\n        }`,\n        code: function palindromeRearranging(inputString) {\n            //Create a character map in an object for the string characters.\n            let charMap = {};\n            for(let i = 0; i < inputString.length; i++) {\n                !charMap[inputString[i]] ? charMap[inputString[i]] = 1 : charMap[inputString[i]]++;\n            }\n            \n            //Check through each character in the map object. In order to be arranged into a palindrome, only one set of characters can be odd (the center letter).\n            let oddsLeft = 1;\n            for(let letter in charMap) {\n                if(charMap[letter] % 2 !== 0) {\n                    oddsLeft--;\n                }\n            }\n            \n            //If there is 0-1 odd set of characters, we can make it into a palindrome.\n            if(oddsLeft > -1) return true;\n            \n            return false;\n        },\n        arguments: {\n            descriptions: [\n                {\n                    text: \"Input String\",\n                    type: \"String\"\n                }\n            ]\n        }\n    },\n    pascalsTriangle: {\n        name: `pascalsTriangle`,\n        instructions: `Given an integer numRows, return the first numRows of Pascal's triangle.`,\n        codeOutput: \n        `var pascalsTriangle = function(numRows) {\n            let result = [[1]];\n            for(let i = 1; i < numRows; i++) {\n                //Start this row (only will run if generating more than first row)\n                let thisRow = [];\n                for(let j = 0; j <= result[result.length - 1].length - 2; j++) {\n                    //Add next two elements of last array in the result array.\n                    thisRow.push(result[result.length - 1][j] + result[result.length - 1][j + 1]);\n                }\n                //Push 1 to the beginning and end of the row.\n                thisRow.unshift(1);\n                thisRow.push(1);\n                //Push this row to the result.\n                result.push(thisRow);\n            }\n            return result;\n        };`,\n        code: function pascalsTriangle(numRows) {\n            let result = [[1]];\n            for(let i = 1; i < numRows; i++) {\n                //Start this row (only will run if generating more than first row)\n                let thisRow = [];\n                for(let j = 0; j <= result[result.length - 1].length - 2; j++) {\n                    //Add next two elements of last array in the result array.\n                    thisRow.push(result[result.length - 1][j] + result[result.length - 1][j + 1]);\n                }\n                //Push 1 to the beginning and end of the row.\n                thisRow.unshift(1);\n                thisRow.push(1);\n                //Push this row to the result.\n                result.push(thisRow);\n            }\n            return result;\n        },\n        arguments: {\n            descriptions: [\n                {\n                    text: \"Integer Number (of Rows)\",\n                    type: \"Number\"\n                }\n            ]\n        }\n    },\n    pascalsTriangle2: {\n        name: `pascalsTriangle2`,\n        instructions: `Given an integer rowIndex, return the rowIndexth (0-indexed) row of the Pascal's triangle.`,\n        codeOutput: \n        `var pascalsTriangle2 = function(rowIndex) {\n            let result = [[1]];\n            for(let i = 1; i <= rowIndex; i++) {\n                //Start this row (only will run if generating more than first row)\n                let thisRow = [];\n                for(let j = 0; j <= result[result.length - 1].length - 2; j++) {\n                    //Add next two elements of last array in the result array.\n                    thisRow.push(result[result.length - 1][j] + result[result.length - 1][j + 1]);\n                }\n                //Push 1 to the beginning and end of the row.\n                thisRow.unshift(1);\n                thisRow.push(1);\n                //Push this row to the result.\n                result.push(thisRow);\n            }\n            return result[rowIndex];\n        };`,\n        code: function pascalsTriangle2(rowIndex) {\n            let result = [[1]];\n            for(let i = 1; i <= rowIndex; i++) {\n                //Start this row (only will run if generating more than first row)\n                let thisRow = [];\n                for(let j = 0; j <= result[result.length - 1].length - 2; j++) {\n                    //Add next two elements of last array in the result array.\n                    thisRow.push(result[result.length - 1][j] + result[result.length - 1][j + 1]);\n                }\n                //Push 1 to the beginning and end of the row.\n                thisRow.unshift(1);\n                thisRow.push(1);\n                //Push this row to the result.\n                result.push(thisRow);\n            }\n            return result[rowIndex];\n        },\n        arguments: {\n            descriptions: [\n                {\n                    text: \"Whole Number Integer (0 or Greater)\",\n                    type: \"Number\"\n                }\n            ]\n        }\n    },\n    phoneCall: {\n        name: 'phoneCall',\n        instructions: `Some phone usage rate may be described as follows:\n\n        first minute of a call costs min1 cents,\n        each minute from the 2nd up to 10th (inclusive) costs min2_10 cents\n        each minute after 10th costs min11 cents.\n        You have s cents on your account before the call. What is the duration of the longest call (in minutes rounded down to the nearest integer) you can have?`,\n        codeOutput: \n        `function phoneCall(min1, min2_10, min11, s) {    \n            let centsLeft = s;\n            totalMinutes = 0;\n            \n            //Purchase first minute.\n            if(centsLeft - min1 >= 0) {\n                totalMinutes++;\n                centsLeft -= min1;\n            }\n            //Purchase minutes 2-10.\n            while(totalMinutes < 10 && centsLeft - min2_10 >= 0) {\n                totalMinutes++;\n                centsLeft -= min2_10;\n            }\n            //Purchase minutes past 10th.\n            while(totalMinutes >= 10 && centsLeft - min11 >= 0) {\n                totalMinutes++;\n                centsLeft -= min11;\n            }\n            \n            return totalMinutes;\n        }`,\n        code: function phoneCall(min1, min2_10, min11, s) {    \n            let centsLeft = s;\n            let totalMinutes = 0;\n            \n            //Purchase first minute.\n            if(centsLeft - min1 >= 0) {\n                totalMinutes++;\n                centsLeft -= min1;\n            }\n            //Purchase minutes 2-10.\n            while(totalMinutes < 10 && centsLeft - min2_10 >= 0) {\n                totalMinutes++;\n                centsLeft -= min2_10;\n            }\n            //Purchase minutes past 10th.\n            while(totalMinutes >= 10 && centsLeft - min11 >= 0) {\n                totalMinutes++;\n                centsLeft -= min11;\n            }\n            \n            return totalMinutes;\n        },\n        arguments: {\n            descriptions: [\n                {\n                    text: \"Integer (min1)\",\n                    type: \"Number\"\n                },\n                {\n                    text: \"Integer (min2_10)\",\n                    type: \"Number\"\n                },\n                {\n                    text: \"Integer (min11)\",\n                    type: \"Number\"\n                },\n                {\n                    text: \"Integer (s)\",\n                    type: \"Number\"\n                }\n            ]\n        }\n    },\n    pivotIndex: {\n        name: `pivotIndex`,\n        instructions: `Given an array of integers nums, calculate the pivot index of this array.\n\n        The pivot index is the index where the sum of all the numbers strictly to the left of the index is equal to the sum of all the numbers strictly to the index's right.\n        \n        If the index is on the left edge of the array, then the left sum is 0 because there are no elements to the left. This also applies to the right edge of the array.\n        \n        Return the leftmost pivot index. If no such index exists, return -1.`,\n        codeOutput: \n        `var pivotIndex = function(nums) {\n            //Loop through every possible index.\n            for(let i = 0; i < nums.length; i++) {\n                //Split the array into two parts (not including current index i), and sum up the values.\n                let leftSum = nums.slice(0, i).reduce((a, b) => a += b, 0);\n                let rightSum = nums.slice(i + 1).reduce((a, b) => a += b, 0);\n                //If these sums are the same, return the index number.\n                if(leftSum === rightSum) return i;\n            }\n            return -1;\n        };`,\n        code: function pivotIndex(nums) {\n            //Loop through every possible index.\n            for(let i = 0; i < nums.length; i++) {\n                //Split the array into two parts (not including current index i), and sum up the values.\n                let leftSum = nums.slice(0, i).reduce((a, b) => a += b, 0);\n                let rightSum = nums.slice(i + 1).reduce((a, b) => a += b, 0);\n                //If these sums are the same, return the index number.\n                if(leftSum === rightSum) return i;\n            }\n            return -1;\n        },\n        arguments: {\n            descriptions: [\n                {\n                    text: \"Array of Integers (e.g. 1,7,3,6,5,6)\",\n                    type: \"NumberArray\"\n                }\n            ]\n        }\n    },\n    plusOne: {\n        name: `plusOne`,\n        instructions: `You are given a large integer represented as an integer array digits, where each digits[i] is the ith digit of the integer. The digits are ordered from most significant to least significant in left-to-right order. The large integer does not contain any leading 0's.\n        Increment the large integer by one and return the resulting array of digits.`,\n        codeOutput: \n        `var plusOne = function(digits) {\n            //Use BigInt constructor to prevent overflow and innacuracy. \n            let num = BigInt(digits.join(''));\n            //Increment the value and return as a new array.\n            num++;\n            return Array.from(num.toString()).map(Number);\n        };`,\n        code: function plusOne(digits) {\n            //Use BigInt constructor to prevent overflow and innacuracy. \n            let num = BigInt(digits.join(''));\n            //Increment the value and return as a new array.\n            num++;\n            return Array.from(num.toString()).map(Number);\n        },\n        arguments: {\n            descriptions: [\n                {\n                    text: \"Array of Single-Digit Integers (No Brackets []; Form of 1,2,3...)\",\n                    type: \"NumberArray\"\n                }\n            ]\n        }\n    },\n    polygonPerimeter: {\n        name: 'polygonPerimeter',\n        instructions: `You have a rectangular white board with some black cells. The black cells create a connected black figure, i.e. it is possible to get from any black cell to any other one through connected adjacent (sharing a common side) black cells.\n\n        Find the perimeter of the black figure assuming that a single cell has unit length.\n        \n        It's guaranteed that there is at least one black cell on the table.`,\n        codeOutput: \n        `function polygonPerimeter(matrix) {\n            let perimeter = 0;\n            //Loop through every square.\n            matrix.forEach((row, rowIndex) => {\n                row.forEach((square, squareIndex) => {\n                    //If this value is true:\n                    if(square) {\n                        //Look to all sides. If that location is not a valid square, add to perimeter.\n                        if(!row[squareIndex - 1]) perimeter++;\n                        if(!row[squareIndex + 1]) perimeter++;\n                        if(!matrix[rowIndex + 1] || !matrix[rowIndex + 1][squareIndex]) perimeter++;\n                        if(!matrix[rowIndex - 1] || !matrix[rowIndex - 1][squareIndex]) perimeter++;\n                    }\n                });\n            });\n            return perimeter;\n        }`,\n        code: function polygonPerimeter(matrix) {\n            let perimeter = 0;\n            //Loop through every square.\n            matrix.forEach((row, rowIndex) => {\n                row.forEach((square, squareIndex) => {\n                    //If this value is true:\n                    if(square) {\n                        //Look to all sides. If that location is not a valid square, add to perimeter.\n                        if(!row[squareIndex - 1]) perimeter++;\n                        if(!row[squareIndex + 1]) perimeter++;\n                        if(!matrix[rowIndex + 1] || !matrix[rowIndex + 1][squareIndex]) perimeter++;\n                        if(!matrix[rowIndex - 1] || !matrix[rowIndex - 1][squareIndex]) perimeter++;\n                    }\n                });\n            });\n            return perimeter;\n        },\n        arguments: {\n            descriptions: [\n                {\n                    text: \"Array of Boolean Arrays (Form of [false,true,true], [true,true,false]...)\",\n                    type: \"BooleanArrayArray\"\n                }\n            ]\n        }\n    },\n    properNounCorrection: {\n        name: 'properNounCorrection',\n        instructions: `Proper nouns always begin with a capital letter, followed by small letters. Correct a given proper noun so that it fits this statement.`,\n        codeOutput: \n        `function properNounCorrection(noun) {\n            return noun[0].toUpperCase() + noun.slice(1).toLowerCase();\n        }`,\n        code: function properNounCorrection(noun) {\n            return noun[0].toUpperCase() + noun.slice(1).toLowerCase();\n        },\n        arguments: {\n            descriptions: [\n                {\n                    text: \"Single Noun\",\n                    type: \"String\"\n                }\n            ]\n        }\n    },\n    rangeBitCount: {\n        name: 'rangeBitCount',\n        instructions: `You are given two numbers a and b where 0 ≤ a ≤ b. Imagine you construct an array of all the integers from a to b inclusive. You need to count the number of 1s in the binary representations of all the numbers in the array.`,\n        codeOutput: \n        `function rangeBitCount(a, b) {\n            //Create the range of numbers in binary.\n            let binary = [];\n            for(let i = a; i <= b; i++) {\n                binary.push(i.toString(2));\n            }\n            //Go through each binary representation and add up the number of \"1\"s.\n            let total = 0;\n            for(let i = 0; i < binary.length; i++) {\n                let thisNumber = String(binary[i])\n                for(let j = 0; j < binary[i].length; j++) {\n                    if(thisNumber[j] === \"1\") total++;\n                }\n            }\n            return total;\n        }`,\n        code: function rangeBitCount(a, b) {\n            //Create the range of numbers in binary.\n            let binary = [];\n            for(let i = a; i <= b; i++) {\n                binary.push(i.toString(2));\n            }\n            //Go through each binary representation and add up the number of \"1\"s.\n            let total = 0;\n            for(let i = 0; i < binary.length; i++) {\n                let thisNumber = String(binary[i])\n                for(let j = 0; j < binary[i].length; j++) {\n                    if(thisNumber[j] === \"1\") total++;\n                }\n            }\n            return total;\n        },\n        arguments: {\n            descriptions: [\n                {\n                    text: \"Non-Negative Integer a\",\n                    type: \"Number\"\n                },\n                {\n                    text: \"Non-Negative Integer b (Greater Than or Equal To a)\",\n                    type: \"Number\"\n                }\n            ]\n        }\n    },\n    reachNextLevel: {\n        name: 'reachNextLevel',\n        instructions: `You are playing an RPG game. Currently your experience points (XP) total is equal to experience. To reach the next level your XP should be at least at threshold. If you kill the monster in front of you, you will gain more experience points in the amount of the reward.\n\n        Given values experience, threshold and reward, check if you reach the next level after killing the monster.`,\n        codeOutput: \n        `function reachNextLevel(experience, threshold, reward) {\n            if(experience + reward >= threshold) return true;\n            return false;\n        }`,\n        code: function reachNextLevel(experience, threshold, reward) {\n            if(experience + reward >= threshold) return true;\n            return false;\n        },\n        arguments: {\n            descriptions: [\n                {\n                    text: \"Integer (experience)\",\n                    type: \"Number\"\n                },\n                {\n                    text: \"Integer (threshold)\",\n                    type: \"Number\"\n                },\n                {\n                    text: \"Integer (reward)\",\n                    type: \"Number\"\n                }\n            ]\n        }\n    },\n    rectangleRotation: {\n        name: 'rectangleRotation',\n        instructions: `A rectangle with sides equal to even integers a and b is drawn on the Cartesian plane. Its center (the intersection point of its diagonals) coincides with the point (0, 0), but the sides of the rectangle are not parallel to the axes; instead, they are forming 45 degree angles with the axes.\n\n        How many points with integer coordinates are located inside the given rectangle (including on its sides)?`,\n        codeOutput: \n        `function rectangleRotation(a, b) {\n            //Get number of diagonal units along both rectangle axes (halve the resuls);\n            let xSide_unis = (a / Math.sqrt(2)) / 2;\n            let ySide_units = (b / Math.sqrt(2)) / 2;\n            \n            //Get the number of points along both axes of the outer rectangle of points.\n            let outerRectLen = 2 * Math.floor(xSide_unis) + 1;\n            let outerRectWidth = 2 * Math.floor(ySide_units) + 1;\n            \n            //Get the number of points along both axes of the inner rectange of points.\n            let innerRectLen = 2 * Math.floor(xSide_unis) + (xSide_unis % 1 < 0.5 ? 0 : 2);\n            let innerRectWidth = 2 * Math.floor(ySide_units) + (ySide_units % 1 < 0.5 ? 0 : 2);\n            \n            //Return the total number of points inside the whole rectangle.\n            return outerRectLen * outerRectWidth + innerRectLen * innerRectWidth;\n        }`,\n        code: function rectangleRotation(a, b) {\n            //Get number of diagonal units along both rectangle axes (halve the resuls);\n            let xSide_unis = (a / Math.sqrt(2)) / 2;\n            let ySide_units = (b / Math.sqrt(2)) / 2;\n            \n            //Get the number of points along both axes of the outer rectangle of points.\n            let outerRectLen = 2 * Math.floor(xSide_unis) + 1;\n            let outerRectWidth = 2 * Math.floor(ySide_units) + 1;\n            \n            //Get the number of points along both axes of the inner rectange of points.\n            let innerRectLen = 2 * Math.floor(xSide_unis) + (xSide_unis % 1 < 0.5 ? 0 : 2);\n            let innerRectWidth = 2 * Math.floor(ySide_units) + (ySide_units % 1 < 0.5 ? 0 : 2);\n            \n            //Return the total number of points inside the whole rectangle.\n            return outerRectLen * outerRectWidth + innerRectLen * innerRectWidth;\n        },\n        arguments: {\n            descriptions: [\n                {\n                    text: \"Integer a\",\n                    type: \"Number\"\n                },\n                {\n                    text: \"Integer b\",\n                    type: \"Number\"\n                }\n            ]\n        }\n    },\n    reflectString: {\n        name: 'reflectString',\n        instructions: `Define an alphabet reflection as follows: a turns into z, b turns into y, c turns into x, ..., n turns into m, m turns into n, ..., z turns into a.\n\n        Define a string reflection as the result of applying the alphabet reflection to each of its characters.\n        \n        Reflect the given string.`,\n        codeOutput: \n        `function reflectString(inputString) {\n            return inputString\n            .split(\"\")\n            .map(character => {\n                if(character.charCodeAt(0) < 110) {\n                    return String.fromCharCode(122 - (character.charCodeAt(0) - 97));\n                } else {\n                    return String.fromCharCode(97 + (122 - character.charCodeAt(0)));\n                }\n            })\n            .join(\"\");\n        } `,\n        code: function reflectString(inputString) {\n            return inputString\n            .split(\"\")\n            .map(character => {\n                if(character.charCodeAt(0) < 110) {\n                    return String.fromCharCode(122 - (character.charCodeAt(0) - 97));\n                } else {\n                    return String.fromCharCode(97 + (122 - character.charCodeAt(0)));\n                }\n            })\n            .join(\"\");\n        } ,\n        arguments: {\n            descriptions: [\n                {\n                    text: \"Word (String of Lowercase Letters)\",\n                    type: \"String\"\n                }\n            ]\n        }\n    },\n    regularMonths: {\n        name: 'regularMonths',\n        instructions: `In an effort to be more innovative, your boss introduced a strange new tradition: the first day of every month you're allowed to work from home. You like this rule when the day falls on a Monday, because any excuse to skip rush hour traffic is great!\n\n        You and your colleagues have started calling these months regular months. Since you're a fan of working from home, you decide to find out how far away the nearest regular month is, given that the currMonth has just started.\n        \n        For your convenience, here is a list of month lengths (from January to December, respectively):\n        \n        Month lengths: 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31.\n        Please, note that in leap years February has 29 days.`,\n        codeOutput: \n        `function regularMonths(currMonth) {\n            //Format the current month into two numbers.\n            let currentDate = currMonth.split(\"-\").map(str => Number(str));\n            \n            //Keep track of months\n            let months = [\n                { name: \"January\", days: 31 },\n                { name: \"February\", days: 28 },\n                { name: \"March\", days: 31 },\n                { name: \"April\", days: 30 },\n                { name: \"May\", days: 31 },\n                { name: \"June\", days: 30 },\n                { name: \"July\", days: 31 },\n                { name: \"August\", days: 31 },\n                { name: \"September\", days: 30 },\n                { name: \"October\", days: 31 },\n                { name: \"November\", days: 30 },\n                { name: \"December\", days: 31 }\n            ];\n        \n            //Find the day of the week of the current month.\n            const findCurrentDay = inputDate => {\n                //Find the number of days in years passed since 1968.\n                let days = ((inputDate[1] - 1968) * 365);\n                //Add in the total number of leap days that passed in years before.\n                days += Math.ceil((inputDate[1] - 1968) / 4);\n                //Add in one more day if this year is a leap year, AND if leap day already passed, excluding 2100 (which isn't a leap year)\n                let isLeap = false;\n                if(inputDate[1] % 4 === 0 && inputDate[0] > 2 && inputDate[1] !== 2100) {\n                    days++;\n                    isLeap = true;\n                };\n                \n                //Add in the number of days that have passed so far before this month this year (leap day already included if this is a leap year).\n                for(let i = 0; i < inputDate[0] - 1; i++) {\n                    days += months[i].days;\n                }\n                \n                //Return the number of the current day of the week from the input string (if 0 - Monday, 6 - Sunday, etc.)\n                return days % 7;\n            };\n            \n            //Get the 'offset' for the current day of the week of the input day. This will be used when counting the number of days until the next Monday.\n            let currentDay = findCurrentDay(currentDate);\n            \n            //Keep track of the 'current month' we are looking at, starting with the next month.\n            let currentMonth = currentDate[0];\n            \n            //Keep track of the 'current year' we are looking at, starting with the current year, unless we move on to next year.\n            let currentYear = currentDate[1];\n            \n            //Keep moving one month into the future, counting the number of days passed, starting at 0 if Monday, 1 if Tuesday, and so un until 6 if Sunday.\n            let daysPassed = currentDay;\n            do {\n                //Add to the days passed\n                daysPassed += months[currentMonth - 1].days;\n                //Add an extra day if this is a leap year and we just added February\n                if(currentYear % 4 === 0 && currentYear !== 2100 && currentMonth === 2) daysPassed++;\n                \n                //Update the current month and current year.\n                currentMonth = currentMonth === 12 ? \n                1 :\n                currentMonth + 1;\n                \n                currentYear = currentMonth === 1 ? \n                currentYear + 1 :\n                currentYear;\n                //Continue this loop until we reach a total number of days passed that divides by 7, which means Monday has been reached.\n            } while(daysPassed % 7);\n            \n            //Return the resulting date when the day will be Monday, but format the month appropriately.\n            return \\`\\${currentMonth < 10 ? \\`0\\${currentMonth}\\` : currentMonth}-\\${currentYear}\\`\n        }`,\n        code: function regularMonths(currMonth) {\n            //Format the current month into two numbers.\n            let currentDate = currMonth.split(\"-\").map(str => Number(str));\n            \n            //Keep track of months\n            let months = [\n                { name: \"January\", days: 31 },\n                { name: \"February\", days: 28 },\n                { name: \"March\", days: 31 },\n                { name: \"April\", days: 30 },\n                { name: \"May\", days: 31 },\n                { name: \"June\", days: 30 },\n                { name: \"July\", days: 31 },\n                { name: \"August\", days: 31 },\n                { name: \"September\", days: 30 },\n                { name: \"October\", days: 31 },\n                { name: \"November\", days: 30 },\n                { name: \"December\", days: 31 }\n            ];\n        \n            //Find the day of the week of the current month.\n            const findCurrentDay = inputDate => {\n                //Find the number of days in years passed since 1968.\n                let days = ((inputDate[1] - 1968) * 365);\n                //Add in the total number of leap days that passed in years before.\n                days += Math.ceil((inputDate[1] - 1968) / 4);\n                //Add in one more day if this year is a leap year, AND if leap day already passed, excluding 2100 (which isn't a leap year)\n                let isLeap = false;\n                if(inputDate[1] % 4 === 0 && inputDate[0] > 2 && inputDate[1] !== 2100) {\n                    days++;\n                    isLeap = true;\n                };\n                \n                //Add in the number of days that have passed so far before this month this year (leap day already included if this is a leap year).\n                for(let i = 0; i < inputDate[0] - 1; i++) {\n                    days += months[i].days;\n                }\n                \n                //Return the number of the current day of the week from the input string (if 0 - Monday, 6 - Sunday, etc.)\n                return days % 7;\n            };\n            \n            //Get the 'offset' for the current day of the week of the input day. This will be used when counting the number of days until the next Monday.\n            let currentDay = findCurrentDay(currentDate);\n            \n            //Keep track of the 'current month' we are looking at, starting with the next month.\n            let currentMonth = currentDate[0];\n            \n            //Keep track of the 'current year' we are looking at, starting with the current year, unless we move on to next year.\n            let currentYear = currentDate[1];\n            \n            //Keep moving one month into the future, counting the number of days passed, starting at 0 if Monday, 1 if Tuesday, and so un until 6 if Sunday.\n            let daysPassed = currentDay;\n            do {\n                //Add to the days passed\n                daysPassed += months[currentMonth - 1].days;\n                //Add an extra day if this is a leap year and we just added February\n                if(currentYear % 4 === 0 && currentYear !== 2100 && currentMonth === 2) daysPassed++;\n                \n                //Update the current month and current year.\n                currentMonth = currentMonth === 12 ? \n                1 :\n                currentMonth + 1;\n                \n                currentYear = currentMonth === 1 ? \n                currentYear + 1 :\n                currentYear;\n                //Continue this loop until we reach a total number of days passed that divides by 7, which means Monday has been reached.\n            } while(daysPassed % 7);\n            \n            //Return the resulting date when the day will be Monday, but format the month appropriately.\n            return `${currentMonth < 10 ? `0${currentMonth}` : currentMonth}-${currentYear}`\n        },\n        arguments: {\n            descriptions: [\n                {\n                    text: \"Input Date String (Form of 02-2016)\",\n                    type: \"String\"\n                }\n            ]\n        }\n    },\n    removeArrayPart: {\n        name: 'removeArrayPart',\n        instructions: `Remove a part of a given array between given 0-based indexes l and r (inclusive).`,\n        codeOutput: \n        `function removeArrayPart(inputArray, l, r) {\n            return inputArray.slice(0, l).concat(inputArray.slice(r + 1));\n        }`,\n        code: function removeArrayPart(inputArray, l, r) {\n            return inputArray.slice(0, l).concat(inputArray.slice(r + 1));\n        },\n        arguments: {\n            descriptions: [\n                {\n                    text: \"Array of Integers (No Brackets []; Form of 1,2,3...)\",\n                    type: \"NumberArray\"\n                },\n                {\n                    text: \"Integer l\",\n                    type: \"Number\"\n                },\n                {\n                    text: \"Integer r\",\n                    type: \"Number\"\n                }\n            ]\n        }\n    },\n    removeDuplicates: {\n        name: `removeDuplicates`,\n        instructions: `Remove array duplicates in-place.`,\n        codeOutput: \n        `var removeDuplicates = function(nums) {   \n            let i = 0;\n            //As long as the end of the array is not reached, remove one element if the next is a duplicate.\n            while(i < nums.length - 1) {\n                if(nums[i] === nums[i + 1]) {\n                    nums.splice(i, 1);\n                } else {\n                    i++;\n                }\n            }\n            return nums;\n        }`,\n        code: function removeDuplicates(nums) {   \n            let i = 0;\n            //As long as the end of the array is not reached, remove one element if the next is a duplicate.\n            while(i < nums.length - 1) {\n                if(nums[i] === nums[i + 1]) {\n                    nums.splice(i, 1);\n                } else {\n                    i++;\n                }\n            }\n            return nums;\n        },\n        arguments: {\n            descriptions: [\n                {\n                    text: \"Array of Integers (Form of 1,2,3...)\",\n                    type: \"NumberArray\"\n                }\n            ]\n        }\n    },\n    replaceAllDigitsRegExp: {\n        name: 'replaceAllDigitsRegExp',\n        instructions: `Implement a function that replaces each digit in the given string with a '#' character.`,\n        codeOutput: \n        `function replaceAllDigitsRegExp(input) {\n            //Perform a global replace on all digits between 0-9.\n            return input.replaceAll(/[0-9]/g, \"#\");\n        }`,\n        code: function replaceAllDigitsRegExp(input) {\n            //Perform a global replace on all digits between 0-9.\n            return input.replaceAll(/[0-9]/g, \"#\");\n        },\n        arguments: {\n            descriptions: [\n                {\n                    text: \"String Input\",\n                    type: \"String\"\n                }\n            ]\n        }\n    },\n    replaceMiddle: {\n        name: 'replaceMiddle',\n        instructions: `We define the middle of the array arr as follows:\n\n        if arr contains an odd number of elements, its middle is the element whose index number is the same when counting from the beginning of the array and from its end;\n        if arr contains an even number of elements, its middle is the sum of the two elements whose index numbers when counting from the beginning and from the end of the array differ by one.\n        Given array arr, your task is to find its middle, and, if it consists of two elements, replace those elements with the value of middle. Return the resulting array as the answer.`,\n        codeOutput: \n        `function replaceMiddle(arr) {\n            return arr.length % 2 ?\n            arr :\n            arr.slice(0, Math.floor(arr.length / 2) - 1)\n            .concat(arr[Math.floor(arr.length / 2) - 1] + arr[Math.floor(arr.length / 2)])\n            .concat(arr.slice(Math.floor(arr.length / 2) + 1));\n        }`,\n        code: function replaceMiddle(arr) {\n            return arr.length % 2 ?\n            arr :\n            arr.slice(0, Math.floor(arr.length / 2) - 1)\n            .concat(arr[Math.floor(arr.length / 2) - 1] + arr[Math.floor(arr.length / 2)])\n            .concat(arr.slice(Math.floor(arr.length / 2) + 1));\n        },\n        arguments: {\n            descriptions: [\n                {\n                    text: \"Array of Integers (No Brackets []; Form of 1,2,3...)\",\n                    type: \"NumberArray\"\n                }\n            ]\n        }\n    },\n    reverseInParentheses: {\n        name: 'reverseInParentheses',\n        instructions: `Write a function that reverses characters in (possibly nested) parentheses in the input string.\n\n        Input strings will always be well-formed with matching ()s.`,\n        codeOutput: \n        `function reverseInParentheses(inputString) {\n            //split the string into an array\n            let stringArray = inputString.split(\"\");\n            //This will hold the final array to be turned back to a string\n            let resultArray = [];\n            //Loop through each of the array items (each character)\n            for(let i = 0; i < stringArray.length; i++) {\n                //If the current character is not a closed parenthesis\n                if(stringArray[i] !== \")\") {\n                    //Push it into the result array\n                    resultArray.push(stringArray[i]);\n                } else {\n                    //Otherwise, create a temp array that will be the reverse of what is in result array.\n                    let tempArray = reverseArrayString(resultArray);\n                    //Take out the characters starting at the beginning and ending at the last index of (, and save that back to the result array.\n                    resultArray = resultArray.splice(0, resultArray.lastIndexOf(\"(\"));          //\n                    resultArray = resultArray.concat(tempArray);\n                }\n            }\n            return resultArray.join(\"\");\n        }\n        \n        function reverseArrayString(array) {\n            let array2 = [];\n            for(let i = array.length; i >= 0; i--) {\n                if(array[i] !== \"(\") {\n                    array2.push(array[i]);\n                } else {\n                    break;\n                }\n            }\n            return array2;\n        }`,\n        code: function reverseInParentheses(inputString) {\n            //split the string into an array\n            let stringArray = inputString.split(\"\");\n            //This will hold the final array to be turned back to a string\n            let resultArray = [];\n            //Loop through each of the array items (each character)\n            for(let i = 0; i < stringArray.length; i++) {\n                //If the current character is not a closed parenthesis\n                if(stringArray[i] !== \")\") {\n                    //Push it into the result array\n                    resultArray.push(stringArray[i]);\n                } else {\n                    //Otherwise, create a temp array that will be the reverse of what is in result array.\n                    let tempArray = reverseArrayString(resultArray);\n                    //Take out the characters starting at the beginning and ending at the last index of (, and save that back to the result array.\n                    resultArray = resultArray.splice(0, resultArray.lastIndexOf(\"(\"));          //\n                    resultArray = resultArray.concat(tempArray);\n                }\n            }\n            return resultArray.join(\"\");\n\n            function reverseArrayString(array) {\n                let array2 = [];\n                for(let i = array.length; i >= 0; i--) {\n                    if(array[i] !== \"(\") {\n                        array2.push(array[i]);\n                    } else {\n                        break;\n                    }\n                }\n                return array2;\n            }\n        },\n        arguments: {\n            descriptions: [\n                {\n                    text: \"Input String With Properly Nested Parentheses\",\n                    type: \"String\"\n                }\n            ]\n        }\n    },\n    reverseOnDiagonals: {\n        name: 'reverseOnDiagonals',\n        instructions: `The longest diagonals of a square matrix are defined as follows:\n\n        the first longest diagonal goes from the top left corner to the bottom right one;\n        the second longest diagonal goes from the top right corner to the bottom left one.\n        Given a square matrix, your task is to reverse the order of elements on both of its longest diagonals.`,\n        codeOutput: \n        `function reverseOnDiagonals(matrix) {\n            matrix.forEach((row, index) => {\n                //Swap first diagonals\n                if(index < Math.floor(matrix.length / 2)) {\n                    [row[index], matrix[matrix.length - 1 - index][matrix.length - 1 - index]] = [matrix[matrix.length - 1 - index][matrix.length - 1 - index], row[index]];\n                } else {\n                    //Swap second diagonals\n                    [row[matrix.length - 1 - index], matrix[matrix.length - 1 - index][0 + index]] = [matrix[matrix.length - 1 - index][0 + index], row[matrix.length - 1 - index]];\n                }\n            });\n            return matrix;\n        }`,\n        code: function reverseOnDiagonals(matrix) {\n            matrix.forEach((row, index) => {\n                //Swap first diagonals\n                if(index < Math.floor(matrix.length / 2)) {\n                    [row[index], matrix[matrix.length - 1 - index][matrix.length - 1 - index]] = [matrix[matrix.length - 1 - index][matrix.length - 1 - index], row[index]];\n                } else {\n                    //Swap second diagonals\n                    [row[matrix.length - 1 - index], matrix[matrix.length - 1 - index][0 + index]] = [matrix[matrix.length - 1 - index][0 + index], row[matrix.length - 1 - index]];\n                }\n            });\n            return matrix;\n        },\n        arguments: {\n            descriptions: [\n                {\n                    text: \"Square Matrix - Array of Integer Arrays (Form of [1,2,3], [4,5,6], [7,8,9])\",\n                    type: \"NumberArrayArray\"\n                }\n            ]\n        }\n    },\n    reverseString: {\n        name: `reverseString`,\n        instructions: `Write a function that reverses a string. The input string is given as an array of characters s.\n\n        You must do this by modifying the input array in-place with O(1) extra memory.`,\n        codeOutput: \n        `var reverseString = function(s) {\n            //Create pointers\n            let left = 0; \n            let right = s.length - 1;\n            \n            //Using the beginning and end pointers, iterate down to the center of the array that represents the string, and swap values.\n            while(left <= right) {\n                //Swap the values.\n                [s[left], s[right]] = [s[right], s[left]];\n                \n                //Update the pointer values.\n                left++;\n                right--;\n            }\n            \n            return s;\n        };`,\n        code: function reverseString(s) {\n            //Create pointers\n            let left = 0; \n            let right = s.length - 1;\n            \n            //Using the beginning and end pointers, iterate down to the center of the array that represents the string, and swap values.\n            while(left <= right) {\n                //Swap the values.\n                [s[left], s[right]] = [s[right], s[left]];\n                \n                //Update the pointer values.\n                left++;\n                right--;\n            }\n            \n            return s;\n        },\n        arguments: {\n            descriptions: [\n                {\n                    text: \"Array of Characters (e.g. h,e,l,l,o)\",\n                    type: \"StringArray\"\n                }\n            ]\n        }\n    },\n    reverseVowels: {\n        name: `reverseVowels`,\n        instructions: `Given a string s, reverse only all the vowels in the string and return it.\n\n        The vowels are 'a', 'e', 'i', 'o', and 'u', and they can appear in both cases.`,\n        codeOutput: \n        `var reverseVowels = function(s) {\n            let vowels = ['a','e','i','o','u'];\n            //Check each character in string and if vowel, save in an array.\n            let stringVowels = s.split(\"\").filter(char => {\n                if(vowels.includes(char.toLowerCase())) return char;\n            });\n            //Iterate through string. If character is vowel, replace it with the LAST element in the array of vowels from the string. \n            return s.split(\"\").map(char => {\n                if(vowels.includes(char.toLowerCase())) return stringVowels.pop();\n                return char;\n            }).join(\"\");\n        };`,\n        code: function reverseVowels(s) {\n            let vowels = ['a','e','i','o','u'];\n            //Check each character in string and if vowel, save in an array.\n            let stringVowels = s.split(\"\").filter(char => {\n                if(vowels.includes(char.toLowerCase())) return char;\n            });\n            //Iterate through string. If character is vowel, replace it with the LAST element in the array of vowels from the string. \n            return s.split(\"\").map(char => {\n                if(vowels.includes(char.toLowerCase())) return stringVowels.pop();\n                return char;\n            }).join(\"\");\n        },\n        arguments: {\n            descriptions: [\n                {\n                    text: \"String of Characters\",\n                    type: \"String\"\n                }\n            ]\n        }\n    },\n    romanToInt: {\n        name: `romanToInt`,\n        instructions: `Roman numerals are usually written largest to smallest from left to right. However, the numeral for four is not IIII. Instead, the number four is written as IV. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as IX. There are six instances where subtraction is used:\n        I can be placed before V (5) and X (10) to make 4 and 9. \n        X can be placed before L (50) and C (100) to make 40 and 90. \n        C can be placed before D (500) and M (1000) to make 400 and 900.\n        Given a roman numeral, convert it to an integer.`,\n        codeOutput: \n        `var romanToInt = function(s) {\n            //IMPORTANT: Works up to 3,999\n            \n            //Keep track of number to be output:\n            let output = [];\n            \n            //Get current number (for loop), based on what it is, run particular function\n            for(let i = 0; i < s.length; i++) {\n                //Determine which function to run \n                switch(s[i]) {\n                    case 'M':\n                        i = thousands(i);\n                        break;\n                    case 'C':\n                    case 'D':\n                        i = hundreds(i);\n                        break;\n                    case 'X':\n                    case 'L':\n                        i = tens(i);\n                        break;\n                    case 'I':\n                    case 'V':\n                        i = ones(i);\n                        break;\n                    default:\n                        break;\n                }\n            }\n            \n            //Return the appropriate number.\n            console.log(output);\n            return output.reduce((a, b) => a + b, 0);\n            \n            //Helper functions\n            function thousands(startingIndex) {\n                //See if this is 1, 2, or 3 thousand.\n                let num = s[startingIndex + 2] === 'M' && s[startingIndex + 1] === 'M' ?\n                    3000 :\n                    s[startingIndex + 1] === 'M' ?\n                    2000 :\n                    1000;\n                \n                output.push(num);\n                \n                //Return the appropraite value of i\n                return num === 3000 ? \n                    startingIndex + 2 :\n                    num === 2000 ?\n                    startingIndex + 1 :\n                    startingIndex;\n            }\n            \n            function hundreds(startingIndex) {\n                //See which hundred this is.\n                let num = \"\";\n                if(s[startingIndex] === 'C') {\n                    //See if this is 1, 2, 3, 4, or 9 hundred.\n                    num = s[startingIndex + 2] === 'C' && s[startingIndex + 1] === 'C' ?\n                        300 :\n                        s[startingIndex + 1] === 'C' ?\n                        200 :\n                        s[startingIndex + 1] === 'D' ?\n                        400 :\n                        s[startingIndex + 1] === 'M' ?\n                        900 :\n                        100;\n                } else if(s[startingIndex] === 'D') {\n                    //See if this is 5, 6, 7, or 8 hundred.\n                    num = s[startingIndex + 3] === 'C' && s[startingIndex + 2] === 'C' && s[startingIndex + 1] === 'C' ?\n                        800 :\n                        s[startingIndex + 2] === 'C' && s[startingIndex + 1] === 'C' ?\n                        700 :\n                        s[startingIndex + 1] === 'C' ?\n                        600 :\n                        500; \n                }\n                \n                output.push(num);\n                \n                //Return the appropriate value of i\n                return num === 800 ?\n                    startingIndex + 3 :\n                    num === 300 || num === 700 ?\n                    startingIndex + 2 :\n                    num === 900 || num === 600 || num === 400 || num === 200 ?\n                    startingIndex + 1 :\n                    startingIndex;\n            } \n            \n            function tens(startingIndex) {\n                //See what ten this is\n                let num = \"\";\n                if(s[startingIndex] === 'X') {\n                    num = s[startingIndex + 2] === 'X' && s[startingIndex + 1] === 'X'?\n                        30 :\n                        s[startingIndex + 1] === 'X' ?\n                        20 :\n                        s[startingIndex + 1] === 'L' ?\n                        40 :\n                        s[startingIndex + 1] === 'C' ?\n                        90 :\n                        10;\n                } else if(s[startingIndex] === 'L') {\n                    num = s[startingIndex + 3] === 'X' && s[startingIndex + 2] === 'X' && s[startingIndex + 1] === 'X'?\n                        80 :\n                        s[startingIndex + 2] === 'X' && s[startingIndex + 1] === 'X' ?\n                        70 :\n                        s[startingIndex + 1] === 'X' ?\n                        60 :\n                        50; \n                }\n                \n                output.push(num);\n                \n                //Return the appropriate value of i\n                return num === 80 ?\n                    startingIndex + 3 :\n                    num === 30 || num === 70 ?\n                    startingIndex + 2 :\n                    num === 90 || num === 60 || num === 40 || num === 20 ?\n                    startingIndex + 1 :\n                    startingIndex;\n            } \n            \n            function ones(startingIndex) {\n                //See what one this is\n                let num = \"\";\n                if(s[startingIndex] === 'I') {\n                    num = s[startingIndex + 2] === 'I' ?\n                        3 :\n                        s[startingIndex + 1] === 'I' ?\n                        2 :\n                        s[startingIndex + 1] === 'V' ?\n                        4 :\n                        s[startingIndex + 1] === 'X' ?\n                        9 :\n                        1;\n                } else if(s[startingIndex] === 'V') {\n                    num = s[startingIndex + 3] === 'I' ?\n                        8 :\n                        s[startingIndex + 2] === 'I' ?\n                        7 :\n                        s[startingIndex + 1] === 'I' ?\n                        6 :\n                        5; \n                }\n                \n                output.push(num);\n                \n                //Return the appropriate value of i\n                return num === 8 ?\n                    startingIndex + 3 :\n                    num === 3 || num === 7 ?\n                    startingIndex + 2 :\n                    num === 9 || num === 6 || num === 4 || num === 2 ?\n                    startingIndex + 1 :\n                    startingIndex;\n            }\n        };`,\n        code: function romanToInt(s) {\n            //IMPORTANT: Works up to 3,999\n            \n            //Keep track of number to be output:\n            let output = [];\n            \n            //Get current number (for loop), based on what it is, run particular function\n            for(let i = 0; i < s.length; i++) {\n                //Determine which function to run \n                switch(s[i]) {\n                    case 'M':\n                        i = thousands(i);\n                        break;\n                    case 'C':\n                    case 'D':\n                        i = hundreds(i);\n                        break;\n                    case 'X':\n                    case 'L':\n                        i = tens(i);\n                        break;\n                    case 'I':\n                    case 'V':\n                        i = ones(i);\n                        break;\n                    default:\n                        break;\n                }\n            }\n            \n            //Return the appropriate number.\n            console.log(output);\n            return output.reduce((a, b) => a + b, 0);\n            \n            //Helper functions\n            function thousands(startingIndex) {\n                //See if this is 1, 2, or 3 thousand.\n                let num = s[startingIndex + 2] === 'M' && s[startingIndex + 1] === 'M' ?\n                    3000 :\n                    s[startingIndex + 1] === 'M' ?\n                    2000 :\n                    1000;\n                \n                output.push(num);\n                \n                //Return the appropraite value of i\n                return num === 3000 ? \n                    startingIndex + 2 :\n                    num === 2000 ?\n                    startingIndex + 1 :\n                    startingIndex;\n            }\n            \n            function hundreds(startingIndex) {\n                //See which hundred this is.\n                let num = \"\";\n                if(s[startingIndex] === 'C') {\n                    //See if this is 1, 2, 3, 4, or 9 hundred.\n                    num = s[startingIndex + 2] === 'C' && s[startingIndex + 1] === 'C' ?\n                        300 :\n                        s[startingIndex + 1] === 'C' ?\n                        200 :\n                        s[startingIndex + 1] === 'D' ?\n                        400 :\n                        s[startingIndex + 1] === 'M' ?\n                        900 :\n                        100;\n                } else if(s[startingIndex] === 'D') {\n                    //See if this is 5, 6, 7, or 8 hundred.\n                    num = s[startingIndex + 3] === 'C' && s[startingIndex + 2] === 'C' && s[startingIndex + 1] === 'C' ?\n                        800 :\n                        s[startingIndex + 2] === 'C' && s[startingIndex + 1] === 'C' ?\n                        700 :\n                        s[startingIndex + 1] === 'C' ?\n                        600 :\n                        500; \n                }\n                \n                output.push(num);\n                \n                //Return the appropriate value of i\n                return num === 800 ?\n                    startingIndex + 3 :\n                    num === 300 || num === 700 ?\n                    startingIndex + 2 :\n                    num === 900 || num === 600 || num === 400 || num === 200 ?\n                    startingIndex + 1 :\n                    startingIndex;\n            } \n            \n            function tens(startingIndex) {\n                //See what ten this is\n                let num = \"\";\n                if(s[startingIndex] === 'X') {\n                    num = s[startingIndex + 2] === 'X' && s[startingIndex + 1] === 'X'?\n                        30 :\n                        s[startingIndex + 1] === 'X' ?\n                        20 :\n                        s[startingIndex + 1] === 'L' ?\n                        40 :\n                        s[startingIndex + 1] === 'C' ?\n                        90 :\n                        10;\n                } else if(s[startingIndex] === 'L') {\n                    num = s[startingIndex + 3] === 'X' && s[startingIndex + 2] === 'X' && s[startingIndex + 1] === 'X'?\n                        80 :\n                        s[startingIndex + 2] === 'X' && s[startingIndex + 1] === 'X' ?\n                        70 :\n                        s[startingIndex + 1] === 'X' ?\n                        60 :\n                        50; \n                }\n                \n                output.push(num);\n                \n                //Return the appropriate value of i\n                return num === 80 ?\n                    startingIndex + 3 :\n                    num === 30 || num === 70 ?\n                    startingIndex + 2 :\n                    num === 90 || num === 60 || num === 40 || num === 20 ?\n                    startingIndex + 1 :\n                    startingIndex;\n            } \n            \n            function ones(startingIndex) {\n                //See what one this is\n                let num = \"\";\n                if(s[startingIndex] === 'I') {\n                    num = s[startingIndex + 2] === 'I' ?\n                        3 :\n                        s[startingIndex + 1] === 'I' ?\n                        2 :\n                        s[startingIndex + 1] === 'V' ?\n                        4 :\n                        s[startingIndex + 1] === 'X' ?\n                        9 :\n                        1;\n                } else if(s[startingIndex] === 'V') {\n                    num = s[startingIndex + 3] === 'I' ?\n                        8 :\n                        s[startingIndex + 2] === 'I' ?\n                        7 :\n                        s[startingIndex + 1] === 'I' ?\n                        6 :\n                        5; \n                }\n                \n                output.push(num);\n                \n                //Return the appropriate value of i\n                return num === 8 ?\n                    startingIndex + 3 :\n                    num === 3 || num === 7 ?\n                    startingIndex + 2 :\n                    num === 9 || num === 6 || num === 4 || num === 2 ?\n                    startingIndex + 1 :\n                    startingIndex;\n            }\n        },\n        arguments: {\n            descriptions: [\n                {\n                    text: \"Roman Integer String (Form of XIV, etc. - Up to 3,999)\",\n                    type: \"String\"\n                }\n            ]\n        }\n    },\n    rotateString: {\n        name: `rotateString`,\n        instructions: `Given two strings s and goal, return true if and only if s can become goal after some number of shifts on s.\n\n        A shift on s consists of moving the leftmost character of s to the rightmost position.\n        \n        For example, if s = \"abcde\", then it will be \"bcdea\" after one shift.`,\n        codeOutput: \n        `var rotateString = function(s, goal) {\n            if((s + s).includes(goal) && goal.length >= s.length) return true;\n            return false;\n        };`,\n        code: function rotateString(s, goal) {\n            if((s + s).includes(goal) && goal.length >= s.length) return true;\n            return false;\n        },\n        arguments: {\n            descriptions: [\n                {\n                    text: \"String to Check\",\n                    type: \"String\"\n                },\n                {\n                    text: \"String to Check Against (Goal)\",\n                    type: \"String\"\n                }\n            ]\n        }\n    },\n    rounders: {\n        name: 'rounders',\n        instructions: `We want to turn the given integer into a number that has only one non-zero digit using a tail rounding approach. This means that at each step we take the last non 0 digit of the number and round it to 0 or to 10. If it's less than 5 we round it to 0 if it's larger than or equal to 5 we round it to 10 (rounding to 10 means increasing the next significant digit by 1). The process stops immediately once there is only one non-zero digit left.`,\n        codeOutput: \n        `function rounders(n) {\n            //Keep track of current number and get the number of loops based on integer length.\n            let currentNumber = n;\n            let numRounds = String(n).length - 1;\n            \n            //For each iteration, use each value of i to generate the power of ten we are using.\n            for(let i = 0; i < numRounds; i++) {\n                let powerOfTen = 10 ** (i + 1);\n                //We have to divide by a power of ten to make this number non-whole to round and update.\n                currentNumber = Math.round(currentNumber / powerOfTen) * powerOfTen;\n            }\n            \n            return currentNumber;\n        }`,\n        code: function rounders(n) {\n            //Keep track of current number and get the number of loops based on integer length.\n            let currentNumber = n;\n            let numRounds = String(n).length - 1;\n            \n            //For each iteration, use each value of i to generate the power of ten we are using.\n            for(let i = 0; i < numRounds; i++) {\n                let powerOfTen = 10 ** (i + 1);\n                //We have to divide by a power of ten to make this number non-whole to round and update.\n                currentNumber = Math.round(currentNumber / powerOfTen) * powerOfTen;\n            }\n            \n            return currentNumber;\n        },\n        arguments: {\n            descriptions: [\n                {\n                    text: \"Integer Input\",\n                    type: \"Integer\"\n                }\n            ]\n        }\n    },\n    rowsRearranging: {\n        name: 'rowsRearranging',\n        instructions: `Given a rectangular matrix of integers, check if it is possible to rearrange its rows in such a way that all its columns become strictly increasing sequences (read from top to bottom).`,\n        codeOutput: \n        `function rowsRearranging(matrix) {\n            //Sort array rows by total sum of each row.\n            matrix.sort((a, b) => {\n                return b.reduce((i, j) => i += j, 0) - a.reduce((i, j) => i += j, 0);\n            });\n                \n            //Loop through each row and ensure that they are strictly increasing.\n            for(let i = 0; i < matrix.length - 1; i++) {\n                //For each row, loop through each number and compare that index to the one below.\n                for(let j = 0; j < matrix[i].length; j++) {\n                    if(!(matrix[i][j] > matrix[i + 1][j])) return false;\n                }\n            }\n            \n            return true;\n        }`,\n        code: function rowsRearranging(matrix) {\n            //Sort array rows by total sum of each row.\n            matrix.sort((a, b) => {\n                return b.reduce((i, j) => i += j, 0) - a.reduce((i, j) => i += j, 0);\n            });\n                \n            //Loop through each row and ensure that they are strictly increasing.\n            for(let i = 0; i < matrix.length - 1; i++) {\n                //For each row, loop through each number and compare that index to the one below.\n                for(let j = 0; j < matrix[i].length; j++) {\n                    if(!(matrix[i][j] > matrix[i + 1][j])) return false;\n                }\n            }\n            \n            return true;\n        },\n        arguments: {\n            descriptions: [\n                {\n                    text: \"Square Matrix - Array of Integer Arrays (Form of [1,2,3], [4,5,6], [7,8,9])\",\n                    type: \"NumberArrayArray\"\n                }\n            ]\n        }\n    },\n    runnersMeetings: {\n        name: 'runnersMeetings',\n        instructions: `Some people run along a straight line in the same direction. They start simultaneously at pairwise distinct positions and run with constant speed (which may differ from person to person).\n\n        If two or more people are at the same point at some moment we call that a meeting. The number of people gathered at the same point is called meeting cardinality.\n        \n        For the given starting positions and speeds of runners find the maximum meeting cardinality assuming that people run infinitely long. If there will be no meetings, return -1 instead.`,\n        codeOutput: \n        `function runnersMeetings(startPosition, speed) {\n            let intersections = {};\n            //Void helper function to see if two lines(people) will cross.\n            const findIntersection = (speed1, speed2, start1, start2) => {\n                //If the slopes are the same, return (this would result in x,y keys of +/- Infinity)\n                if(speed1 - speed2 === 0) return;\n                //Use y=mx+b to solve for x and y (set runners equal to each other, solve for x, then for y)\n                let xVal = (start2 - start1) / (speed1 - speed2);\n                let yVal = (speed1 * xVal) + start1;\n                //If there is an intersection already marked, check to see if each runner is in the intersection's array already (to exclude duplicates)\n                if(intersections[\\`\\${xVal},\\${yVal}\\`]) {\n                    if(!intersections[\\`\\${xVal},\\${yVal}\\`].includes(\\`\\${start1},\\${speed1}\\`)) {\n                        intersections[\\`\\${xVal},\\${yVal}\\`].push(\\`\\${start1},\\${speed1}\\`);\n                    }\n                    if(!intersections[\\`\\${xVal},\\${yVal}\\`].includes(\\`\\${start2},\\${speed2}\\`)) {\n                        intersections[\\`\\${xVal},\\${yVal}\\`].push(\\`\\${start2},\\${speed2}\\`);\n                    }\n                    //Otherwise, put both runners in the new array for this intersection.\n                } else {\n                    intersections[\\`\\${xVal},\\${yVal}\\`] = [\\`\\${start1},\\${speed1}\\`, \\`\\${start2},\\${speed2}\\`];\n                }\n            };\n            //Count number of meetings for each element using the helper function, except for when both indexes refer to the same runner.\n            for(let i = 0; i < startPosition.length; i++) {\n                for(let j = 0; j < startPosition.length; j++) {\n                    if(i === j) continue;\n                    findIntersection(speed[i], speed[j], startPosition[i], startPosition[j]);\n                }\n            }\n            \n            //If there are keys in the interseections object, return the array with the max intersecting runners.\n            return Object.keys(intersections).length === 0 ? -1 : \n            Math.max(...Object.values(intersections).map(intersection => {\n                return intersection.length;\n            }));\n        }`,\n        code: function runnersMeetings(startPosition, speed) {\n            let intersections = {};\n            //Void helper function to see if two lines(people) will cross.\n            const findIntersection = (speed1, speed2, start1, start2) => {\n                //If the slopes are the same, return (this would result in x,y keys of +/- Infinity)\n                if(speed1 - speed2 === 0) return;\n                //Use y=mx+b to solve for x and y (set runners equal to each other, solve for x, then for y)\n                let xVal = (start2 - start1) / (speed1 - speed2);\n                let yVal = (speed1 * xVal) + start1;\n                //If there is an intersection already marked, check to see if each runner is in the intersection's array already (to exclude duplicates)\n                if(intersections[`${xVal},${yVal}`]) {\n                    if(!intersections[`${xVal},${yVal}`].includes(`${start1},${speed1}`)) {\n                        intersections[`${xVal},${yVal}`].push(`${start1},${speed1}`);\n                    }\n                    if(!intersections[`${xVal},${yVal}`].includes(`${start2},${speed2}`)) {\n                        intersections[`${xVal},${yVal}`].push(`${start2},${speed2}`);\n                    }\n                    //Otherwise, put both runners in the new array for this intersection.\n                } else {\n                    intersections[`${xVal},${yVal}`] = [`${start1},${speed1}`, `${start2},${speed2}`];\n                }\n            };\n            //Count number of meetings for each element using the helper function, except for when both indexes refer to the same runner.\n            for(let i = 0; i < startPosition.length; i++) {\n                for(let j = 0; j < startPosition.length; j++) {\n                    if(i === j) continue;\n                    findIntersection(speed[i], speed[j], startPosition[i], startPosition[j]);\n                }\n            }\n            \n            //If there are keys in the interseections object, return the array with the max intersecting runners.\n            return Object.keys(intersections).length === 0 ? -1 : \n            Math.max(...Object.values(intersections).map(intersection => {\n                return intersection.length;\n            }));\n        },\n        arguments: {\n            descriptions: [\n                {\n                    text: \"Array of Integers (No Brackets []; Form of 1,2,3...)\",\n                    type: \"NumberArray\"\n                },\n                {\n                    text: \"Array of Integers of Same Length (No Brackets []; Form of 1,2,3...)\",\n                    type: \"NumberArray\"\n                }\n            ]\n        }\n    }\n};\n\nexport default challenges_o_r;\n\n/*\n\nTemplate:\n\nname: {\n    name: ``,\n    instructions: ``,\n    codeOutput: \n    ``,\n    code: ,\n    arguments: {\n        descriptions: [\n            {\n                text: \"\",\n                type: \"\"\n            }\n        ]\n    }\n}\n\nType List:\nNumber\nString\nNumber Array \nString Array\nNumber Array Array\nString Array Array \nBooleanArrayArray\n\n*/","//Include global BigInt (as comment) in order to prevent no-undef in this environment.\n/* global BigInt */\n\nconst challenges_s = {\n    searchInsert: {\n        name: `searchInsert`,\n        instructions: `Given a sorted array of distinct integers and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.\n        You must write an algorithm with O(log n) runtime complexity.`,\n        codeOutput: \n        `var searchInsert = function(nums, target) {\n            if(nums.includes(target)) return nums.indexOf(target);\n            //If target is not already part of nums, put it in the array, sort it, and return the index.\n            nums.push(target);\n            nums.sort((a,b) => a - b);\n            return nums.indexOf(target)\n        };`,\n        code: function searchInsert(nums, target) {\n            if(nums.includes(target)) return nums.indexOf(target);\n            //If target is not already part of nums, put it in the array, sort it, and return the index.\n            nums.push(target);\n            nums.sort((a,b) => a - b);\n            return nums.indexOf(target)\n        },\n        arguments: {\n            descriptions: [\n                {\n                    text: \"Array of Sorted Distinct Integers (e.g. 1,2,5,7,10)\",\n                    type: \"NumberArray\"\n                },\n                {\n                    text: \"Single Integer for Target\",\n                    type: \"Number\"\n                }\n            ]\n        }\n    },\n    seatsInTheater: {\n        name: 'seatsInTheater',\n        instructions: `Given the total number of rows and columns in the theater (nRows and nCols, respectively), and the row and column you're sitting in, return the number of people who sit strictly behind you and in your column or to the left, assuming all seats are occupied.`,\n        codeOutput: \n        `function seatsInTheater(nCols, nRows, col, row) {\n            //Since we are including this column in the area, add it back into the equation.\n            return (nCols - col + 1) * (nRows - row);\n        }`,\n        code: function seatsInTheater(nCols, nRows, col, row) {\n            //Since we are including this column in the area, add it back into the equation.\n            return (nCols - col + 1) * (nRows - row);\n        },\n        arguments: {\n            descriptions: [\n                {\n                    text: \"Integer (Total Cols)\",\n                    type: \"Number\"\n                },\n                {\n                    text: \"Integer (Total Rows)\",\n                    type: \"Number\"\n                },\n                {\n                    text: \"Integer (Current Col)\",\n                    type: \"Number\"\n                },\n                {\n                    text: \"Integer (Current Row)\",\n                    type: \"Number\"\n                }\n            ]\n        }\n    },\n    secondRightmostZeroBit: {\n        name: 'secondRightmostZeroBit',\n        instructions: `Presented with the integer n, find the 0-based position of the second rightmost zero bit in its binary representation (it is guaranteed that such a bit exists), counting from right to left.\n\n        Return the value of 2position_of_the_found_bit.`,\n        codeOutput: \n        `function secondRightmostZeroBit(n) {\n            //Return 2 to the power of the following expression:\n            //Take the reversed binary string representation of this integer\n            //Remove the first part of the string with the first 0 and count its length\n            //Add that length to the position of the first zero in the second part of the string,\n            //where we find the index of the first 0 in the second half (therefore the second 0)\n            return 2 ** (n.toString(2)\n                  .split(\"\")\n                  .reverse()\n                  .join(\"\")\n                  .substring(0, n.toString(2).split(\"\").reverse().join(\"\").indexOf(\"0\") + 1)\n                  .length +\n              \n                  n.toString(2)\n                  .split(\"\")\n                  .reverse()\n                  .join(\"\")\n                  .substring(n.toString(2).split(\"\").reverse().join(\"\").indexOf(\"0\") + 1)\n                  .indexOf(\"0\"));\n        }`,\n        code: function secondRightmostZeroBit(n) {\n            //Return 2 to the power of the following expression:\n            //Take the reversed binary string representation of this integer\n            //Remove the first part of the string with the first 0 and count its length\n            //Add that length to the position of the first zero in the second part of the string,\n            //where we find the index of the first 0 in the second half (therefore the second 0)\n            return 2 ** (n.toString(2)\n                  .split(\"\")\n                  .reverse()\n                  .join(\"\")\n                  .substring(0, n.toString(2).split(\"\").reverse().join(\"\").indexOf(\"0\") + 1)\n                  .length +\n              \n                  n.toString(2)\n                  .split(\"\")\n                  .reverse()\n                  .join(\"\")\n                  .substring(n.toString(2).split(\"\").reverse().join(\"\").indexOf(\"0\") + 1)\n                  .indexOf(\"0\"));\n        },\n        arguments: {\n            descriptions: [\n                {\n                    text: \"Integer\",\n                    type: \"Number\"\n                }\n            ]\n        }\n    },\n    selfDividingNumbers: {\n        name: `selfDividingNumbers`,\n        instructions: `A self-dividing number is a number that is divisible by every digit it contains.\n\n        For example, 128 is a self-dividing number because 128 % 1 == 0, 128 % 2 == 0, and 128 % 8 == 0.\n        A self-dividing number is not allowed to contain the digit zero.\n        \n        Given two integers left and right, return a list of all the self-dividing numbers in the range [left, right].`,\n        codeOutput: \n        `var selfDividingNumbers = function(left, right) {\n            //Find all self-dividing numbers in the range.\n            let numbers = [];\n            for(let i = left; i <= right; i++) {\n                //Check if this number is self-dividing.\n                let thisNumber = i;\n                let isSelfDividing = true;\n                \n                //Keep stripping last digit off current number and see if it divides this iteration i.\n                while(thisNumber > 0 && isSelfDividing) {\n                    //Update the current number to get the next digit.\n                    let divisor = thisNumber % 10;\n                    thisNumber = Math.floor(thisNumber / 10);\n                    \n                    //If the number doesn't divide by thisNumber (or if zero), end this loop.\n                    if(divisor === 0 || i % divisor) isSelfDividing = false;\n                }\n                \n                //If this line runs, this number is a self-dividing number.\n                if(isSelfDividing) numbers.push(i);\n            }\n            return numbers;\n        };`,\n        code: function selfDividingNumbers(left, right) {\n            //Find all self-dividing numbers in the range.\n            let numbers = [];\n            for(let i = left; i <= right; i++) {\n                //Check if this number is self-dividing.\n                let thisNumber = i;\n                let isSelfDividing = true;\n                \n                //Keep stripping last digit off current number and see if it divides this iteration i.\n                while(thisNumber > 0 && isSelfDividing) {\n                    //Update the current number to get the next digit.\n                    let divisor = thisNumber % 10;\n                    thisNumber = Math.floor(thisNumber / 10);\n                    \n                    //If the number doesn't divide by thisNumber (or if zero), end this loop.\n                    if(divisor === 0 || i % divisor) isSelfDividing = false;\n                }\n                \n                //If this line runs, this number is a self-dividing number.\n                if(isSelfDividing) numbers.push(i);\n            }\n            return numbers;\n        },\n        arguments: {\n            descriptions: [\n                {\n                    text: \"Whole Positive Number (Left Range)\",\n                    type: \"Number\"\n                },\n                {\n                    text: \"Whole Positive Number (Right Range)\",\n                    type: \"Number\"\n                }\n            ]\n        }\n    },\n    shapeArea: {\n        name: 'shapeArea',\n        instructions: `Below we will define an n-interesting polygon. Your task is to find the area of a polygon for a given n.\n\n        A 1-interesting polygon is just a square with a side of length 1. An n-interesting polygon is obtained by taking the n - 1-interesting polygon and appending 1-interesting polygons to its rim, side by side. You can see the 1-, 2-, 3- and 4-interesting polygons in the picture below.`,\n        codeOutput: \n        `function shapeArea(n) {\n            let area = 1; \n            \n            for(i = 1; i < n; i++) {\n                area += (4 * i); \n            }\n            \n            return area; \n        }`,\n        code: function shapeArea(n) {\n            let area = 1; \n            \n            for(let i = 1; i < n; i++) {\n                area += (4 * i); \n            }\n            \n            return area; \n        },\n        arguments: {\n            descriptions: [\n                {\n                    text: \"Integer n\",\n                    type: \"Number\"\n                }\n            ]\n        }\n    },\n    shuffledArray: {\n        name: 'shuffledArray',\n        instructions: `A noob programmer was given two simple tasks: sum and sort the elements of the given array\n        a = [a1, a2, ..., an]. He started with summing and did it easily, but decided to store the sum he found in some random position of the original array which was a bad idea. Now he needs to cope with the second task, sorting the original array a, and it's giving him trouble since he modified it.\n        \n        Given the array shuffled, consisting of elements a1, a2, ..., an, a1 + a2 + ... + an in random order, return the sorted array of original elements a1, a2, ..., an.`,\n        codeOutput: \n        `function shuffledArray(shuffled) {\n            //Store the index where the sum is located.\n            let sumIndex = 0;\n            //Find the sum of all elements, with the correct sum included.\n            let shuffledSum = shuffled.reduce((a, b) => a += b, 0);\n            for(let i = 0; i < shuffled.length; i++) {\n                //Loop through each element, taking the number away from the shuffled sum, seeing if it is the sum.\n                if(shuffledSum - shuffled[i] === shuffled[i]) {\n                    //Store the correct sum\n                    sumIndex = i;\n                    break;\n                }\n            }\n            //Remove the sum from the shuffled array.\n            shuffled.splice(sumIndex, 1)\n            //Return the sorted array.\n            return shuffled.sort((a, b) => a - b);\n        }`,\n        code: function shuffledArray(shuffled) {\n            //Store the index where the sum is located.\n            let sumIndex = 0;\n            //Find the sum of all elements, with the correct sum included.\n            let shuffledSum = shuffled.reduce((a, b) => a += b, 0);\n            for(let i = 0; i < shuffled.length; i++) {\n                //Loop through each element, taking the number away from the shuffled sum, seeing if it is the sum.\n                if(shuffledSum - shuffled[i] === shuffled[i]) {\n                    //Store the correct sum\n                    sumIndex = i;\n                    break;\n                }\n            }\n            //Remove the sum from the shuffled array.\n            shuffled.splice(sumIndex, 1)\n            //Return the sorted array.\n            return shuffled.sort((a, b) => a - b);\n        },\n        arguments: {\n            descriptions: [\n                {\n                    text: \"Integer Array Including Sum of All Other Elements (No Brackets; Example: 1,12,3,6,2)\",\n                    type: \"NumberArray\"\n                }\n            ]\n        }\n    },\n    singleNumber: {\n        name: `singleNumber`,\n        instructions: `Given a non-empty array of integers nums, every element appears twice except for one. Find that single one.`,\n        codeOutput: \n        `var singleNumber = function(nums) {\n            let numMap = {};\n            nums.forEach(num => {\n                if(numMap[num]) {\n                    numMap[num]++\n                } else {\n                    numMap[num] = 1;\n                }\n            });\n            for(let num in numMap) {\n                if(numMap[num] === 1) return num;    \n            }\n        };`,\n        code: function singleNumber(nums) {\n            let numMap = {};\n            nums.forEach(num => {\n                if(numMap[num]) {\n                    numMap[num]++\n                } else {\n                    numMap[num] = 1;\n                }\n            });\n            for(let num in numMap) {\n                if(numMap[num] === 1) return num;    \n            }\n        },\n        arguments: {\n            descriptions: [\n                {\n                    text: \"Array of Integers (All numbers appear twice except one; e.g. 1,1,2,2,3)\",\n                    type: \"NumberArray\"\n                }\n            ]\n        }\n    },\n    sortByHeight: {\n        name: 'sortByHeight',\n        instructions: `Some people are standing in a row in a park. There are trees between them which cannot be moved. Your task is to rearrange the people by their heights in a non-descending order without moving the trees. People can be very tall!`,\n        codeOutput: \n        `function sortByHeight(a) {\n            //Extract non -1 values\n            let values = a.filter(value => value !== -1).sort((a, b) => a - b);\n            //Loop through array, placing sorted values into place.\n            return a.map(value => {\n                //If this value is not -1, insert the next value in the sorted portions of the array.\n                if(value !== -1) return values.shift();\n                return value;\n            });\n        }`,\n        code: function sortByHeight(a) {\n            //Extract non -1 values\n            let values = a.filter(value => value !== -1).sort((a, b) => a - b);\n            //Loop through array, placing sorted values into place.\n            return a.map(value => {\n                //If this value is not -1, insert the next value in the sorted portions of the array.\n                if(value !== -1) return values.shift();\n                return value;\n            });\n        },\n        arguments: {\n            descriptions: [\n                {\n                    text: \"Array of Integers Mixed With -1 Values (No Brackets; Example: -1,150,190,170,-1,-1,160,180)\",\n                    type: \"NumberArray\"\n                }\n            ]\n        }\n    },\n    sortByLength: {\n        name: 'sortByLength',\n        instructions: `Given an array of strings, sort them in the order of increasing lengths. If two strings have the same length, their relative order must be the same as in the initial array.`,\n        codeOutput: \n        `function sortByLength(inputArray) {\n            //Create a mapping of all lengths and strings with that length (in order).\n            let lengthMap = {};\n            inputArray.forEach(string => {\n                //See if an array for this length exists. If so, push to it. Otherwise, create it.\n                if(lengthMap[string.length]) {\n                    lengthMap[string.length].push(string);\n                } else {\n                    lengthMap[string.length] = [string];\n                }\n            });\n            //For every length, spread out the array values in a new array to be returned.\n            let sorted = [];\n            for(let length in lengthMap) {\n                sorted.push(...lengthMap[length]);\n            }\n            return sorted;\n        }`,\n        code: function sortByLength(inputArray) {\n            //Create a mapping of all lengths and strings with that length (in order).\n            let lengthMap = {};\n            inputArray.forEach(string => {\n                //See if an array for this length exists. If so, push to it. Otherwise, create it.\n                if(lengthMap[string.length]) {\n                    lengthMap[string.length].push(string);\n                } else {\n                    lengthMap[string.length] = [string];\n                }\n            });\n            //For every length, spread out the array values in a new array to be returned.\n            let sorted = [];\n            for(let length in lengthMap) {\n                sorted.push(...lengthMap[length]);\n            }\n            return sorted;\n        },\n        arguments: {\n            descriptions: [\n                {\n                    text: \"Array of Strings (No Brackets; Form of hello,string,hi...)\",\n                    type: \"StringArray\"\n                }\n            ]\n        }\n    },\n    spiralNumbers: {\n        name: 'spiralNumbers',\n        instructions: `Construct a square matrix with a size N × N containing integers from 1 to N * N in a spiral order, starting from top-left and in clockwise direction.`,\n        codeOutput: \n        `function spiralNumbers(n) {\n            //Create initial matrix.\n            let matrix = [];\n            for(let i = 0; i < n; i++) {\n                matrix.push([]);\n                for(let j = 0; j < n; j++) {\n                    matrix[i].push(0);\n                }\n            }\n            \n            //Fill in the spiral square-by-square.\n            //Keep track of the bounds of the current square and current number.\n            let min = 0;\n            let max = n - 1;\n            let count = 1;\n            \n            //For each 'square'\n            while(min <= max) {\n                //Fill top row\n                for(let i = min; i <= max; i++) {\n                    if(matrix[min]) {\n                        matrix[min][i] = count;\n                        count++;\n                    } \n                }\n                //Fill right col \n                for(let i = min + 1; i <= max; i++) {\n                    if(matrix[i]) {\n                        matrix[i][max] = count;\n                        count++;\n                    }\n                }\n                //Fill bottom row backwards\n                for(let i = max - 1; i >= min; i--) {\n                    if(matrix[max]) {\n                        matrix[max][i] = count;\n                        count++;\n                    }\n                }\n                //Fill left col backwards\n                for(let i = max - 1; i > min; i--) {\n                    if(matrix[i]) {\n                        matrix[i][min] = count;\n                        count++;\n                    }\n                }\n            \n                //Make the dimensions of the square smaller.\n                min++;\n                max--;\n            }\n            \n            return matrix;\n        }`,\n        code: function spiralNumbers(n) {\n            //Create initial matrix.\n            let matrix = [];\n            for(let i = 0; i < n; i++) {\n                matrix.push([]);\n                for(let j = 0; j < n; j++) {\n                    matrix[i].push(0);\n                }\n            }\n            \n            //Fill in the spiral square-by-square.\n            //Keep track of the bounds of the current square and current number.\n            let min = 0;\n            let max = n - 1;\n            let count = 1;\n            \n            //For each 'square'\n            while(min <= max) {\n                //Fill top row\n                for(let i = min; i <= max; i++) {\n                    if(matrix[min]) {\n                        matrix[min][i] = count;\n                        count++;\n                    } \n                }\n                //Fill right col \n                for(let i = min + 1; i <= max; i++) {\n                    if(matrix[i]) {\n                        matrix[i][max] = count;\n                        count++;\n                    }\n                }\n                //Fill bottom row backwards\n                for(let i = max - 1; i >= min; i--) {\n                    if(matrix[max]) {\n                        matrix[max][i] = count;\n                        count++;\n                    }\n                }\n                //Fill left col backwards\n                for(let i = max - 1; i > min; i--) {\n                    if(matrix[i]) {\n                        matrix[i][min] = count;\n                        count++;\n                    }\n                }\n            \n                //Make the dimensions of the square smaller.\n                min++;\n                max--;\n            }\n            \n            return matrix;\n        },\n        arguments: {\n            descriptions: [\n                {\n                    text: \"Integer n\",\n                    type: \"Number\"\n                }\n            ]\n        }\n    },\n    squareDigitsSequence: {\n        name: 'squareDigitsSequence',\n        instructions: `Consider a sequence of numbers a0, a1, ..., an, in which an element is equal to the sum of squared digits of the previous element. The sequence ends once an element that has already been in the sequence appears again.\n\n        Given the first element a0, find the length of the sequence.`,\n        codeOutput: \n        `function squareDigitsSequence(a0) {\n            //Keep track of total.\n            let count = 0;\n            //Starting value is also the current.\n            let current = a0;\n            //Keep track of numbers in the sequence (used to check for repeats)\n            let found = [];\n            //As long as the new 'current' value is not already in the array, keep generating numbers (always do the first one).\n            do {\n                //Save the current value.\n                found.push(current);\n                //Add to the count.\n                count++;\n                //Split the current value into squared digits and add (this is the new current).\n                current = String(current).split(\"\").reduce((total, thisDigit) => {\n                    return total += (Number(thisDigit * Number(thisDigit)));\n                }, 0);\n            } while(!found.find(value => value === current));\n            //Return the total count (plus the last iteration).\n            return count + 1;\n        }`,\n        code: function squareDigitsSequence(a0) {\n            //Keep track of total.\n            let count = 0;\n            //Starting value is also the current.\n            let current = a0;\n            //Keep track of numbers in the sequence (used to check for repeats)\n            let found = [];\n            //As long as the new 'current' value is not already in the array, keep generating numbers (always do the first one).\n            do {\n                //Save the current value.\n                found.push(current);\n                //Add to the count.\n                count++;\n                //Split the current value into squared digits and add (this is the new current).\n                current = String(current).split(\"\").reduce((total, thisDigit) => {\n                    return total += (Number(thisDigit * Number(thisDigit)));\n                }, 0);\n            } while(!found.find(value => value === current));\n            //Return the total count (plus the last iteration).\n            return count + 1;\n        },\n        arguments: {\n            descriptions: [\n                {\n                    text: \"Integer a0\",\n                    type: \"Number\"\n                }\n            ]\n        }\n    },\n    starRotation: {\n        name: 'starRotation',\n        instructions: `Consider a (2k+1) × (2k+1) square subarray of an integer integers matrix. Let's call the union of the square's two longest diagonals, middle column and middle row a star. Given the coordinates of the star's center in the matrix and its width, rotate it 45 · t degrees clockwise preserving position of all matrix elements that do not belong to the star.`,\n        codeOutput: \n        `function starRotation(matrix, width, center, t) {\n            //Get rid of uncessary rotations, since every 8 rotations the elements are back in the same place.\n            let totalRotations = t % 8;\n            \n            //Helper function to rotate square elements\n            const rotateElements = squareElements => {\n                //Create new array for rotation (excludes middle value at index 4) in the order of the square going clockwise.\n                const arrayToRotate = [\n                    ...squareElements.slice(0,3), \n                    squareElements[5],\n                    ...squareElements.slice(6).reverse(),\n                    squareElements[3]\n                ];\n                \n                //Reverse the elements a specific number of times\n                for(let i = 0; i < totalRotations; i++) {\n                    let lastElement = arrayToRotate.pop();\n                    arrayToRotate.unshift(lastElement);\n                }\n                        \n                //Return the array rearranged back into row/col order.\n                return [\n                    ...arrayToRotate.slice(0, 3),\n                    arrayToRotate[7],\n                    squareElements[4],\n                    arrayToRotate[3],\n                    ...arrayToRotate.slice(4, 7).reverse()\n                ];\n            };\n            \n            //Find the initial 'starting point' for the square (upper-left corner indexes)\n            let start_i = center[0] - Math.floor(width / 2);\n            let start_j = center[1] - Math.floor(width / 2);\n            \n            //Start with the initial width of the largest (outer) square.\n            let currentSquareWidth = width;\n            \n            //Loop through each 'outer square' of the star\n            while(currentSquareWidth > 2) {\n                //Extract the values of this square and rotate (return array of new order)\n                let elements = [];\n                \n                //Loop over each 'row' of the square.\n                for(let i_offset = start_i; i_offset - start_i < currentSquareWidth; i_offset += Math.floor(currentSquareWidth / 2)) {\n                    //Loop over each 'col' of the square.\n                    for(let j_offset = start_j; j_offset - start_j < currentSquareWidth; j_offset += Math.floor(currentSquareWidth / 2)) {\n                        //Place this element into the array to be rotated.\n                        elements.push(matrix[i_offset][j_offset]);\n                    }\n                }\n                \n                //Create array to pull rotated values from.\n                let rotatedSquare = rotateElements(elements);\n                \n                //Fill in these elements with the new values\n                //Loop over each 'row' of the square.\n                for(let i_offset = start_i; i_offset - start_i < currentSquareWidth; i_offset += Math.floor(currentSquareWidth / 2)) {\n                    //Loop over each 'col' of the square.\n                    for(let j_offset = start_j; j_offset - start_j < currentSquareWidth; j_offset += Math.floor(currentSquareWidth / 2)) {     \n                        //Use the newly filled rotated square array to incrementally place elements into their spots.\n                        matrix[i_offset][j_offset] = rotatedSquare.shift();\n                    }\n                }\n                    \n                //After finishing with this square, update values of start_i and start_j and width.\n                start_i++;\n                start_j++;\n                currentSquareWidth -= 2;\n            }\n            \n            //Return the array, with updated elements in place.\n            return matrix;\n        }`,\n        code: function starRotation(matrix, width, center, t) {\n            //Get rid of uncessary rotations, since every 8 rotations the elements are back in the same place.\n            let totalRotations = t % 8;\n            \n            //Helper function to rotate square elements\n            const rotateElements = squareElements => {\n                //Create new array for rotation (excludes middle value at index 4) in the order of the square going clockwise.\n                const arrayToRotate = [\n                    ...squareElements.slice(0,3), \n                    squareElements[5],\n                    ...squareElements.slice(6).reverse(),\n                    squareElements[3]\n                ];\n                \n                //Reverse the elements a specific number of times\n                for(let i = 0; i < totalRotations; i++) {\n                    let lastElement = arrayToRotate.pop();\n                    arrayToRotate.unshift(lastElement);\n                }\n                        \n                //Return the array rearranged back into row/col order.\n                return [\n                    ...arrayToRotate.slice(0, 3),\n                    arrayToRotate[7],\n                    squareElements[4],\n                    arrayToRotate[3],\n                    ...arrayToRotate.slice(4, 7).reverse()\n                ];\n            };\n            \n            //Find the initial 'starting point' for the square (upper-left corner indexes)\n            let start_i = center[0] - Math.floor(width / 2);\n            let start_j = center[1] - Math.floor(width / 2);\n            \n            //Start with the initial width of the largest (outer) square.\n            let currentSquareWidth = width;\n            \n            //Loop through each 'outer square' of the star\n            while(currentSquareWidth > 2) {\n                //Extract the values of this square and rotate (return array of new order)\n                let elements = [];\n                \n                //Loop over each 'row' of the square.\n                for(let i_offset = start_i; i_offset - start_i < currentSquareWidth; i_offset += Math.floor(currentSquareWidth / 2)) {\n                    //Loop over each 'col' of the square.\n                    for(let j_offset = start_j; j_offset - start_j < currentSquareWidth; j_offset += Math.floor(currentSquareWidth / 2)) {\n                        //Place this element into the array to be rotated.\n                        elements.push(matrix[i_offset][j_offset]);\n                    }\n                }\n                \n                //Create array to pull rotated values from.\n                let rotatedSquare = rotateElements(elements);\n                \n                //Fill in these elements with the new values\n                //Loop over each 'row' of the square.\n                for(let i_offset = start_i; i_offset - start_i < currentSquareWidth; i_offset += Math.floor(currentSquareWidth / 2)) {\n                    //Loop over each 'col' of the square.\n                    for(let j_offset = start_j; j_offset - start_j < currentSquareWidth; j_offset += Math.floor(currentSquareWidth / 2)) {     \n                        //Use the newly filled rotated square array to incrementally place elements into their spots.\n                        matrix[i_offset][j_offset] = rotatedSquare.shift();\n                    }\n                }\n                    \n                //After finishing with this square, update values of start_i and start_j and width.\n                start_i++;\n                start_j++;\n                currentSquareWidth -= 2;\n            }\n            \n            //Return the array, with updated elements in place.\n            return matrix;\n        },\n        arguments: {\n            descriptions: [\n                {\n                    text: \"Matrix of Integers (Example to Copy: [1,0,0,2,0,0,3], [0,1,0,2,0,3,0], [0,0,1,2,3,0,0], [8,8,8,9,4,4,4], [0,0,7,6,5,0,0], [0,7,0,6,0,5,0], [7,0,0,6,0,0,5])\",\n                    type: \"NumberArrayArray\"\n                },\n                {\n                    text: \"Width (Integer)\",\n                    type: \"Number\"\n                },\n                {\n                    text: \"2-Digit Array Without Brackets (Example: 3,3)\",\n                    type: \"NumberArray\"\n                },\n                {\n                    text: \"Integer t\",\n                    type: \"Number\"\n                }\n            ]\n        }\n    },\n    stolenLunch: {\n        name: 'stolenLunch',\n        instructions: `When you recently visited your little nephew, he told you a sad story: there's a bully at school who steals his lunch every day, and locks it away in his locker. He also leaves a note with a strange, coded message. Your nephew gave you one of the notes in hope that you can decipher it for him. And you did: it looks like all the digits in it are replaced with letters and vice versa. Digit 0 is replaced with 'a', 1 is replaced with 'b' and so on, with digit 9 replaced by 'j'.\n\n        The note is different every day, so you decide to write a function that will decipher it for your nephew on an ongoing basis.`,\n        codeOutput: \n        `function stolenLunch(note) {\n            return note.split(\"\")\n            .map(character => {\n                //Convert numbers to letters (check for spaces to avoid space becoming 'a')\n                if(Number(character) >= 0 && Number(character) <= 9 && character !== \" \") {\n                    return String.fromCharCode(97 + Number(character));\n                    //Convert letters to numbers, using char code differences\n                } else if(character.charCodeAt(0) >= 97 && character.charCodeAt(0) <= 106) {\n                    return character.charCodeAt(0) - 97;\n                } else {\n                    //Otherwise, return the character as normal\n                    return character;\n                }\n            })\n            .join(\"\");\n        }`,\n        code: function stolenLunch(note) {\n            return note.split(\"\")\n            .map(character => {\n                //Convert numbers to letters (check for spaces to avoid space becoming 'a')\n                if(Number(character) >= 0 && Number(character) <= 9 && character !== \" \") {\n                    return String.fromCharCode(97 + Number(character));\n                    //Convert letters to numbers, using char code differences\n                } else if(character.charCodeAt(0) >= 97 && character.charCodeAt(0) <= 106) {\n                    return character.charCodeAt(0) - 97;\n                } else {\n                    //Otherwise, return the character as normal\n                    return character;\n                }\n            })\n            .join(\"\");\n        },\n        arguments: {\n            descriptions: [\n                {\n                    text: \"String message with letters a-j replaced by 0-9, respectively\",\n                    type: \"String\"\n                }\n            ]\n        }\n    },\n    stringsConstruction: {\n        name: 'stringsConstruction',\n        instructions: `Given two strings a and b, both consisting only of lowercase English letters, your task is to calculate how many strings equal to a can be constructed using only letters from the string b? Each letter can be used only once and in one string only.`,\n        codeOutput: \n        `function stringsConstruction(a, b) {\n            //Create character map for string b.\n            let charMap = {};\n            for(let i = 0; i < b.length; i++) {\n                if(charMap[b[i]]) {\n                    charMap[b[i]]++\n                } else {\n                    charMap[b[i]] = 1;\n                }\n            }\n            //Keep track of number of strings created.\n            let count = 0;\n            //Start at index 0 (keep track of index we are currently at in building an instance of string a)\n            let thisIndex = 0;\n            //Build the string.\n            let currentString = \"\";\n            //As long as the desired character of string a is left in the character map of string b\n            while(charMap[a[thisIndex]]) {\n                //Add to the string.\n                currentString += a[thisIndex];\n                //See if we have reached the desired string. If so, increase count and reset the building string.\n                if(currentString === a) {\n                    count++;\n                    currentString = \"\";\n                }\n                //Removed the used character from the character map and update the index we are at (update the loop).\n                charMap[a[thisIndex]]--;\n                thisIndex = thisIndex === a.length - 1 ? 0 : thisIndex + 1;\n            }\n            \n            return count;\n        }`,\n        code: function stringsConstruction(a, b) {\n            //Create character map for string b.\n            let charMap = {};\n            for(let i = 0; i < b.length; i++) {\n                if(charMap[b[i]]) {\n                    charMap[b[i]]++\n                } else {\n                    charMap[b[i]] = 1;\n                }\n            }\n            //Keep track of number of strings created.\n            let count = 0;\n            //Start at index 0 (keep track of index we are currently at in building an instance of string a)\n            let thisIndex = 0;\n            //Build the string.\n            let currentString = \"\";\n            //As long as the desired character of string a is left in the character map of string b\n            while(charMap[a[thisIndex]]) {\n                //Add to the string.\n                currentString += a[thisIndex];\n                //See if we have reached the desired string. If so, increase count and reset the building string.\n                if(currentString === a) {\n                    count++;\n                    currentString = \"\";\n                }\n                //Removed the used character from the character map and update the index we are at (update the loop).\n                charMap[a[thisIndex]]--;\n                thisIndex = thisIndex === a.length - 1 ? 0 : thisIndex + 1;\n            }\n            \n            return count;\n        },\n        arguments: {\n            descriptions: [\n                {\n                    text: \"String a (Lowercase Letters)\",\n                    type: \"String\"\n                },\n                {\n                    text: \"String b (Lowercase Letters)\",\n                    type: \"String\"\n                }\n            ]\n        }\n    },\n    stringsCrossover: {\n        name: 'stringsCrossover',\n        instructions: `Define crossover operation over two equal-length strings A and B as follows:\n\n        the result of that operation is a string of the same length as the input strings\n        result[i] is either A[i] or B[i], chosen at random\n        Given array of strings inputArray and a string result, find for how many pairs of strings from inputArray the result of the crossover operation over them may be equal to result.\n        \n        Note that (A, B) and (B, A) are the same pair. Also note that the pair cannot include the same element of the array twice (however, if there are two equal elements in the array, they can form a pair).`,\n        codeOutput: \n        `function stringsCrossover(inputArray, result) {\n            let count = 0;\n            //Loop through each string element.\n            for(let i = 0; i < inputArray.length; i++) {\n                //For each string element, loop through all other strings.\n                for(let j = 0; j < inputArray.length; j++) {\n                    //Skip this iteration of j if the two strings being compared are the same.\n                    if(i === j) continue;\n                    //Compare each of the characters in these two strings in a loop\n                    let valid = true;\n                    for(let k = 0; k < inputArray[i].length; k++) {\n                        //Check if either character being compared is equal to this index of the result string.\n                        //If neither of the characters equal the target character, this combination doesn't work.\n                        if(!(inputArray[i][k] === result[k]) && !(inputArray[j][k] === result[k])) {\n                            //At any point, if this doesn't work, mark this as false. \n                            valid = false;\n                        }\n                    }\n                    //If this is a true match, add one to the overall count and continue.\n                    if(valid) {\n                        count++;\n                    }        \n                }\n            }\n            //Return the number of pairs, but halved since we don't count diplicates in a different order.\n            return count / 2;\n        }`,\n        code: function stringsCrossover(inputArray, result) {\n            let count = 0;\n            //Loop through each string element.\n            for(let i = 0; i < inputArray.length; i++) {\n                //For each string element, loop through all other strings.\n                for(let j = 0; j < inputArray.length; j++) {\n                    //Skip this iteration of j if the two strings being compared are the same.\n                    if(i === j) continue;\n                    //Compare each of the characters in these two strings in a loop\n                    let valid = true;\n                    for(let k = 0; k < inputArray[i].length; k++) {\n                        //Check if either character being compared is equal to this index of the result string.\n                        //If neither of the characters equal the target character, this combination doesn't work.\n                        if(!(inputArray[i][k] === result[k]) && !(inputArray[j][k] === result[k])) {\n                            //At any point, if this doesn't work, mark this as false. \n                            valid = false;\n                        }\n                    }\n                    //If this is a true match, add one to the overall count and continue.\n                    if(valid) {\n                        count++;\n                    }        \n                }\n            }\n            //Return the number of pairs, but halved since we don't count diplicates in a different order.\n            return count / 2;\n        },\n        arguments: {\n            descriptions: [\n                {\n                    text: \"Array of Equal-Length Strings (Form of abc,aaa,aba...)\",\n                    type: \"StringArray\"\n                },\n                {\n                    text: \"String of Equal Length to Array Strings\",\n                    type: \"String\"\n                }\n            ]\n        }\n    },\n    stringsRearrangement: {\n        name: 'stringsRearrangement',\n        instructions: `Given an array of equal-length strings, you'd like to know if it's possible to rearrange the order of the elements in such a way that each consecutive pair of strings differ by exactly one character. Return true if it's possible, and false if not.`,\n        codeOutput: \n        `function stringsRearrangement(inputArray) {\n            //Create a helper function to find all permutations of these strings.\n            const createPermutations = inputArray => {\n                let permutations = [];\n                \n                const permutation = (inputArr, m = []) => {\n                    //When this is first called, 'm' is an empty array.\n                    if(inputArr.length === 0) {\n                        //Once the array is empty, we know we are ready to 'unwind' recursion.\n                        permutations.push(m);\n                    } else {\n                        //Loop through every string element in the array.\n                        for(let i = 0; i < inputArr.length; i++) {\n                            //Take a copy of the current array\n                            let currentArray = inputArr.slice();\n                            //Take out an element from the array and save it.\n                            let nextElement = currentArray.splice(i, 1);\n                            permutation(currentArray.slice(), m.concat(nextElement));\n                        }\n                    }\n                }\n                permutation(inputArray);\n                \n                return permutations;\n            };\n            \n            let allPermutations = createPermutations(inputArray);\n            \n            //Go through each permutation and check if any change by exactly one character each iteration\n            \n            for(let i = 0; i < allPermutations.length; i++) {\n                //Loop through every string in this permutation\n                for(let j = 0; j < allPermutations[i].length - 1; j++) {\n                    //Compare the characters in the string at this index (j) to the characters in the string at the next index (j + 1), and keep track of how many differences there are.\n                    let differences = 0;\n                    for(let k = 0; k < allPermutations[i][j].length; k++) {\n                        if(allPermutations[i][j][k] !== allPermutations[i][j + 1][k]) {\n                            differences++;\n                        }\n                    }\n                    console.log(differences);\n                    if(differences !== 1) {\n                        break;\n                    } \n                    \n                    //If we have reached the end of this permutation with only one difference between each string, we found a working set.\n                    if(j === allPermutations[i].length - 2) {\n                        return true;\n                    }\n                }\n            }\n           return false;\n        }`,\n        code: function stringsRearrangement(inputArray) {\n            //Create a helper function to find all permutations of these strings.\n            const createPermutations = inputArray => {\n                let permutations = [];\n                \n                const permutation = (inputArr, m = []) => {\n                    //When this is first called, 'm' is an empty array.\n                    if(inputArr.length === 0) {\n                        //Once the array is empty, we know we are ready to 'unwind' recursion.\n                        permutations.push(m);\n                    } else {\n                        //Loop through every string element in the array.\n                        for(let i = 0; i < inputArr.length; i++) {\n                            //Take a copy of the current array\n                            let currentArray = inputArr.slice();\n                            //Take out an element from the array and save it.\n                            let nextElement = currentArray.splice(i, 1);\n                            permutation(currentArray.slice(), m.concat(nextElement));\n                        }\n                    }\n                }\n                permutation(inputArray);\n                \n                return permutations;\n            };\n            \n            let allPermutations = createPermutations(inputArray);\n            \n            //Go through each permutation and check if any change by exactly one character each iteration\n            \n            for(let i = 0; i < allPermutations.length; i++) {\n                //Loop through every string in this permutation\n                for(let j = 0; j < allPermutations[i].length - 1; j++) {\n                    //Compare the characters in the string at this index (j) to the characters in the string at the next index (j + 1), and keep track of how many differences there are.\n                    let differences = 0;\n                    for(let k = 0; k < allPermutations[i][j].length; k++) {\n                        if(allPermutations[i][j][k] !== allPermutations[i][j + 1][k]) {\n                            differences++;\n                        }\n                    }\n                    console.log(differences);\n                    if(differences !== 1) {\n                        break;\n                    } \n                    \n                    //If we have reached the end of this permutation with only one difference between each string, we found a working set.\n                    if(j === allPermutations[i].length - 2) {\n                        return true;\n                    }\n                }\n            }\n           return false;\n        },\n        arguments: {\n            descriptions: [\n                {\n                    text: \"Array of Equal Length Strings (Form of this,that,more...)\",\n                    type: \"StringArray\"\n                }\n            ]\n        }\n    },\n    strStr: {\n        name: `strStr`,\n        instructions: `Implement strStr().\n        Return the index of the first occurrence of needle in haystack, or -1 if needle is not part of haystack.\n        Clarification:\n        What should we return when needle is an empty string? This is a great question to ask during an interview.\n        For the purpose of this problem, we will return 0 when needle is an empty string. This is consistent to C's strstr() and Java's indexOf().`,\n        codeOutput: \n        `var strStr = function(haystack, needle) {\n            return !needle.length ?\n                0 :\n                haystack.includes(needle) ?\n                haystack.indexOf(needle) :\n                -1;\n        };`,\n        code: function strStr(haystack, needle) {\n            return !needle.length ?\n                0 :\n                haystack.includes(needle) ?\n                haystack.indexOf(needle) :\n                -1;\n        },\n        arguments: {\n            descriptions: [\n                {\n                    text: \"String to represent 'haystack'\",\n                    type: \"String\"\n                },\n                {\n                    text: \"String to represent 'needle'\",\n                    type: \"String\"\n                }\n            ]\n        }\n    },\n    sudoku: {\n        name: 'sudoku',\n        instructions: `Sudoku is a number-placement puzzle. The objective is to fill a 9 × 9 grid with digits so that each column, each row, and each of the nine 3 × 3 sub-grids that compose the grid contains all of the digits from 1 to 9.\n\n        This algorithm should check if the given grid of numbers represents a correct solution to Sudoku.`,\n        codeOutput: \n        `function sudoku(grid) {\n            let valid = true;\n            //Test the rows.\n            for(let i = 0; i < grid.length; i++) {\n                let existingNums = {};\n                for(let j = 0; j < grid[i].length; j++) {\n                    //If we find a repeating number in this row, return false.\n                    if(existingNums[grid[i][j]]) {\n                        valid = false;\n                    }\n                    existingNums[grid[i][j]] = true;\n                }\n            }\n            //Test the columns\n            for(let j = 0; j < grid.length; j++) {\n                let existingNums = {};\n                for(let i = 0; i < grid.length; i++) {\n                    //If we find a repeating number in this column, return false;\n                    if(existingNums[grid[i][j]]) {\n                        valid = false;\n                    }\n                    existingNums[grid[i][j]] = true;\n                }\n            }\n            //Test the squares\n            for(let i = 0; i < grid.length; i += 3) {\n                for(let j = 0; j < grid[i].length; j += 3) {\n                    let existingNums = {};\n                    //For each square, start iteration through the individual numbers\n                    for(let i_prime = i; i_prime < i + 3; i_prime++) {\n                        for(let j_prime = j; j_prime < j + 3; j_prime++) {\n                            //If we find a repeating number in this column, return false;\n                            if(existingNums[grid[i_prime][j_prime]]) {\n                                valid = false;\n                            }\n                            existingNums[grid[i_prime][j_prime]] = true;\n                        }\n                    }\n                }\n            }\n            \n            return valid;\n        }`,\n        code: function sudoku(grid) {\n            let valid = true;\n            //Test the rows.\n            for(let i = 0; i < grid.length; i++) {\n                let existingNums = {};\n                for(let j = 0; j < grid[i].length; j++) {\n                    //If we find a repeating number in this row, return false.\n                    if(existingNums[grid[i][j]]) {\n                        valid = false;\n                    }\n                    existingNums[grid[i][j]] = true;\n                }\n            }\n            //Test the columns\n            for(let j = 0; j < grid.length; j++) {\n                let existingNums = {};\n                for(let i = 0; i < grid.length; i++) {\n                    //If we find a repeating number in this column, return false;\n                    if(existingNums[grid[i][j]]) {\n                        valid = false;\n                    }\n                    existingNums[grid[i][j]] = true;\n                }\n            }\n            //Test the squares\n            for(let i = 0; i < grid.length; i += 3) {\n                for(let j = 0; j < grid[i].length; j += 3) {\n                    let existingNums = {};\n                    //For each square, start iteration through the individual numbers\n                    for(let i_prime = i; i_prime < i + 3; i_prime++) {\n                        for(let j_prime = j; j_prime < j + 3; j_prime++) {\n                            //If we find a repeating number in this column, return false;\n                            if(existingNums[grid[i_prime][j_prime]]) {\n                                valid = false;\n                            }\n                            existingNums[grid[i_prime][j_prime]] = true;\n                        }\n                    }\n                }\n            }\n            \n            return valid;\n        },\n        arguments: {\n            descriptions: [\n                {\n                    text: \"Sudoku Board Represented by Array of Integer Arrays (Example: [1,3,2,5,4,6,9,8,7], [4,6,5,8,7,9,3,2,1], [7,9,8,2,1,3,6,5,4], [9,2,1,4,3,5,8,7,6], [3,5,4,7,6,8,2,1,9], [6,8,7,1,9,2,5,4,3], [5,7,6,9,8,1,4,3,2], [2,4,3,6,5,7,1,9,8], [8,1,9,3,2,4,7,6,5])\",\n                    type: \"NumberArrayArray\"\n                }\n            ]\n        }\n    },\n    sumUpNumbers: {\n        name: 'sumUpNumbers',\n        instructions: `CodeMaster has just returned from shopping. He scanned the check of the items he bought and gave the resulting string to Ratiorg to figure out the total number of purchased items. Since Ratiorg is a bot he is definitely going to automate it, so he needs a program that sums up all the numbers which appear in the given input.\n\n        Help Ratiorg by writing a function that returns the sum of numbers that appear in the given inputString.`,\n        codeOutput: \n        `function sumUpNumbers(inputString) {\n            //Remove unwanted characters from the string so only spaces and numbers remain.\n            let stringToTrim = inputString;\n            for(let i = 0; i < inputString.length; i++) {\n                if(!(inputString.charCodeAt(i) > 47 && inputString.charCodeAt(i) < 58)) {\n                    stringToTrim = stringToTrim.replace(stringToTrim[i], \" \")\n                }\n            }\n            \n            //Remove the spaces (non-numbers), parse strings into numbers, and return array of only prices.\n            let parsedNumbers = stringToTrim.split(\" \").filter(number => {\n                if(!isNaN(number)) return parseInt(number) + 0;\n            }).map(number => parseInt(number));\n            \n            //Go through each price (if the array contains any prices) and add to the total.\n            let total = 0;\n            if(parsedNumbers.length) {\n                total = parsedNumbers.reduce((accumulator, current) => {\n                    return accumulator += current;\n                });\n            }\n            \n            return total;\n        }`,\n        code: function sumUpNumbers(inputString) {\n            //Remove unwanted characters from the string so only spaces and numbers remain.\n            let stringToTrim = inputString;\n            for(let i = 0; i < inputString.length; i++) {\n                if(!(inputString.charCodeAt(i) > 47 && inputString.charCodeAt(i) < 58)) {\n                    stringToTrim = stringToTrim.replace(stringToTrim[i], \" \")\n                }\n            }\n            \n            //Remove the spaces (non-numbers), parse strings into numbers, and return array of only prices.\n            let parsedNumbers = stringToTrim.split(\" \").filter(number => {\n                if(!isNaN(number)) return parseInt(number) + 0;\n            }).map(number => parseInt(number));\n            \n            //Go through each price (if the array contains any prices) and add to the total.\n            let total = 0;\n            if(parsedNumbers.length) {\n                total = parsedNumbers.reduce((accumulator, current) => {\n                    return accumulator += current;\n                });\n            }\n            \n            return total;\n        },\n        arguments: {\n            descriptions: [\n                {\n                    text: \"String With Numbers and Other Characters\",\n                    type: \"String\"\n                }\n            ]\n        }\n    },\n    swapAdjacentBits: {\n        name: 'swapAdjacentBits',\n        instructions: `You're given an arbitrary 32-bit integer n. Take its binary representation, split bits into it in pairs (bit number 0 and 1, bit number 2 and 3, etc.) and swap bits in each pair. Then return the result as a decimal number.`,\n        codeOutput: \n        `function swapAdjacentBits(n) {\n            //Check edge cases\n            return n === 0 ?\n            0 :\n            n === 1 ? \n            2 :\n            //If this number in binary form has an odd number of digits, add a 0 in front to make pairs.\n            n.toString(2).length % 2 === 1 ?\n            Number(\n              (\"0\" + n.toString(2))\n              //Split into individual arrays.\n              .split(\"\")\n              //Swap the pairs\n              .map((thisBit, index, array) => {\n                  if(index % 2 === 0 && index < array.length) {\n                      return [array[index], array[index + 1]] = [array[index + 1], array[index]];\n                  }\n              })\n              //Get rid of null values\n              .filter(thisElement => {\n                  if(Array.isArray(thisElement)) {\n                      let digits = \"\";\n                      thisElement.forEach(digit => {\n                          digits += digit;\n                      });\n                      return digits;\n                  } \n              })\n              //Put the pairs back together\n              .map(pair => {\n                  let thisPair = \"\";\n                  pair.forEach(digit => {\n                      thisPair += digit;\n                  });\n                  return thisPair;\n              })\n              //Make into a new array that is reversed and each element a single digit\n              .join(\"\")\n              .split(\"\")\n              .reverse()\n              //Add up each power of two value to get output after swap.\n              .reduce((currentTotal, currentDigit, index, array) => {\n                  currentTotal = parseInt(currentTotal);\n                  let currentValue = Number(currentDigit);\n                  return currentValue === 1 ? parseInt(currentTotal += (2 ** (index))) : parseInt(currentTotal);\n              })\n            )\n            //If the binary form has an even number of digits, do the same but without the extra 0\n              :\n            Number(\n              n.toString(2)\n              .split(\"\")\n              .map((thisBit, index, array) => {\n                  if(index % 2 === 0 && index < array.length) {\n                      return [array[index], array[index + 1]] = [array[index + 1], array[index]];\n                  }\n              })\n              .filter(thisElement => {\n                  if(Array.isArray(thisElement)) {\n                      let digits = \"\";\n                      thisElement.forEach(digit => {\n                          digits += digit;\n                      });\n                      return digits;\n                  } \n              })\n              .map(pair => {\n                  let thisPair = \"\";\n                  pair.forEach(digit => {\n                      thisPair += digit;\n                  });\n                  return thisPair;\n              })\n              .join(\"\")\n              .split(\"\")\n              .reverse()\n              .reduce((currentTotal, currentDigit, index, array) => {\n                  currentTotal = parseInt(currentTotal);\n                  console.log(currentTotal);\n                  let currentValue = Number(currentDigit);\n                  //console.log(array[index - 1]);\n                  return currentValue === 1 ? parseInt(currentTotal += (2 ** (index))) : parseInt(currentTotal);\n              })\n            );\n        }`,\n        code: function swapAdjacentBits(n) {\n            //Check edge cases\n            return n === 0 ?\n            0 :\n            n === 1 ? \n            2 :\n            //If this number in binary form has an odd number of digits, add a 0 in front to make pairs.\n            n.toString(2).length % 2 === 1 ?\n            Number(\n              (\"0\" + n.toString(2))\n              //Split into individual arrays.\n              .split(\"\")\n              //Swap the pairs\n              .map((thisBit, index, array) => {\n                  if(index % 2 === 0 && index < array.length) {\n                      return [array[index], array[index + 1]] = [array[index + 1], array[index]];\n                  }\n              })\n              //Get rid of null values\n              .filter(thisElement => {\n                  if(Array.isArray(thisElement)) {\n                      let digits = \"\";\n                      thisElement.forEach(digit => {\n                          digits += digit;\n                      });\n                      return digits;\n                  } \n              })\n              //Put the pairs back together\n              .map(pair => {\n                  let thisPair = \"\";\n                  pair.forEach(digit => {\n                      thisPair += digit;\n                  });\n                  return thisPair;\n              })\n              //Make into a new array that is reversed and each element a single digit\n              .join(\"\")\n              .split(\"\")\n              .reverse()\n              //Add up each power of two value to get output after swap.\n              .reduce((currentTotal, currentDigit, index, array) => {\n                  currentTotal = parseInt(currentTotal);\n                  let currentValue = Number(currentDigit);\n                  return currentValue === 1 ? parseInt(currentTotal += (2 ** (index))) : parseInt(currentTotal);\n              })\n            )\n            //If the binary form has an even number of digits, do the same but without the extra 0\n              :\n            Number(\n              n.toString(2)\n              .split(\"\")\n              .map((thisBit, index, array) => {\n                  if(index % 2 === 0 && index < array.length) {\n                      return [array[index], array[index + 1]] = [array[index + 1], array[index]];\n                  }\n              })\n              .filter(thisElement => {\n                  if(Array.isArray(thisElement)) {\n                      let digits = \"\";\n                      thisElement.forEach(digit => {\n                          digits += digit;\n                      });\n                      return digits;\n                  } \n              })\n              .map(pair => {\n                  let thisPair = \"\";\n                  pair.forEach(digit => {\n                      thisPair += digit;\n                  });\n                  return thisPair;\n              })\n              .join(\"\")\n              .split(\"\")\n              .reverse()\n              .reduce((currentTotal, currentDigit, index, array) => {\n                  currentTotal = parseInt(currentTotal);\n                  console.log(currentTotal);\n                  let currentValue = Number(currentDigit);\n                  //console.log(array[index - 1]);\n                  return currentValue === 1 ? parseInt(currentTotal += (2 ** (index))) : parseInt(currentTotal);\n              })\n            );\n        },\n        arguments: {\n            descriptions: [\n                {\n                    text: \"Integer n\",\n                    type: \"Number\"\n                }\n            ]\n        }\n    },\n    swapAdjacentWords: {\n        name: 'swapAdjacentWords',\n        instructions: `Implement the missing code, denoted by ellipses. You may not modify the pre-existing code.\n        You are given a string consisting of words separated by whitespace characters, where the words consist only of English letters. Your task is to swap pairs of consecutive words and return the result.`,\n        codeOutput: \n        `function swapAdjacentWords(s) {\n            //Capture the entire string with .*\n            return s.replace(/.*/g, (string) => {\n                //Split the words into an array.\n                let words = string.split(\" \");\n                //Loop through each pair available (igornes any odd final word).\n                for(let i = 0; i < words.length - 1; i += 2) {\n                    //Replace this element in the current pair with its next.\n                    [words[i], words[i + 1]] = [words[i + 1], words[i]];\n                }\n                //return the sentence joined together after swaps.\n                return words.join(\" \");\n            });\n        }`,\n        code: function swapAdjacentWords(s) {\n            //Capture the entire string with .*\n            return s.replace(/.*/g, (string) => {\n                //Split the words into an array.\n                let words = string.split(\" \");\n                //Loop through each pair available (igornes any odd final word).\n                for(let i = 0; i < words.length - 1; i += 2) {\n                    //Replace this element in the current pair with its next.\n                    [words[i], words[i + 1]] = [words[i + 1], words[i]];\n                }\n                //return the sentence joined together after swaps.\n                return words.join(\" \");\n            });\n        },\n        arguments: {\n            descriptions: [\n                {\n                    text: \"String With Spaces\",\n                    type: \"String\"\n                }\n            ]\n        }\n    },\n    swapDiagonals: {\n        name: 'swapDiagonals',\n        instructions: `The longest diagonals of a square matrix are defined as follows:\n\n        the first longest diagonal goes from the top left corner to the bottom right one;\n        the second longest diagonal goes from the top right corner to the bottom left one.\n        Given a square matrix, your task is to swap its longest diagonals by exchanging their elements at the corresponding positions.`,\n        codeOutput: \n        `function swapDiagonals(matrix) {\n            matrix.forEach((row, index) => {\n                //Traverse each row, swapping corresponding elements until diagonals are reversed.\n                [row[0 + index], row[matrix.length - 1 - index]] = [row[matrix.length - 1 - index], row[0 + index]];\n            });\n            return matrix;\n        }`,\n        code: function swapDiagonals(matrix) {\n            matrix.forEach((row, index) => {\n                //Traverse each row, swapping corresponding elements until diagonals are reversed.\n                [row[0 + index], row[matrix.length - 1 - index]] = [row[matrix.length - 1 - index], row[0 + index]];\n            });\n            return matrix;\n        },\n        arguments: {\n            descriptions: [\n                {\n                    text: \"Array of Equal-Length Integer Arrays (Example: [1,2,3], [4,5,6], [7,8,9])\",\n                    type: \"NumberArrayArray\"\n                }\n            ]\n        }\n    },\n    switchLights: {\n        name: 'switchLights',\n        instructions: `N candles are placed in a row, some of them are initially lit. For each candle from the 1st to the Nth the following algorithm is applied: if the observed candle is lit then states of this candle and all candles before it are changed to the opposite. Which candles will remain lit after applying the algorithm to all candles in the order they are placed in the line?`,\n        codeOutput: \n        `function switchLights(a) {\n            for(let i = 0; i < a.length; i++) {\n                //If this element is lit(1), loop through all elements up to this point and change to opposite.\n                if(a[i] === 1) {\n                    for(let j = 0; j <= i; j++) {\n                        a[j] = a[j] === 1 ? 0 : 1;\n                    }\n                }\n            }\n            return a;\n        }`,\n        code: function switchLights(a) {\n            for(let i = 0; i < a.length; i++) {\n                //If this element is lit(1), loop through all elements up to this point and change to opposite.\n                if(a[i] === 1) {\n                    for(let j = 0; j <= i; j++) {\n                        a[j] = a[j] === 1 ? 0 : 1;\n                    }\n                }\n            }\n            return a;\n        },\n        arguments: {\n            descriptions: [\n                {\n                    text: \"Array of Integers With 1s and 0s (Example: 1,0,1,0,1)\",\n                    type: \"NumberArray\"\n                }\n            ]\n        }\n    }\n};\n\nexport default challenges_s;\n\n/*\n\nTemplate:\n\nname: {\n    name: ``,\n    instructions: ``,\n    codeOutput: \n    ``,\n    code: ,\n    arguments: {\n        descriptions: [\n            {\n                text: \"\",\n                type: \"\"\n            }\n        ]\n    }\n}\n\nType List:\nNumber\nString\nNumber Array \nString Array\nNumber Array Array\nString Array Array \nBooleanArrayArray\n\n*/","//Include global BigInt (as comment) in order to prevent no-undef in this environment.\n/* global BigInt */\n\nconst challenges_t_z = {\n    isTandemRepeat: {\n        name: 'isTandemRepeat',\n        instructions: `Determine whether the given string can be obtained by one concatenation of some string to itself.`,\n        codeOutput: \n        `function isTandemRepeat(inputString) {\n            let sub = \"\";\n            //Up until half of the string is reached, see if the current substring concatenated to itself equals the input.\n            for(let i = 0; i < inputString.length / 2; i++) {\n                sub += inputString[i];\n                if(sub + sub === inputString) return true;\n            }\n            return false;\n        }`,\n        code: function isTandemRepeat(inputString) {\n            let sub = \"\";\n            //Up until half of the string is reached, see if the current substring concatenated to itself equals the input.\n            for(let i = 0; i < inputString.length / 2; i++) {\n                sub += inputString[i];\n                if(sub + sub === inputString) return true;\n            }\n            return false;\n        },\n        arguments: {\n            descriptions: [\n                {\n                    text: \"String Input\",\n                    type: \"String\"\n                }\n            ]\n        }\n    },\n    tennisSet: {\n        name: 'tennisSet',\n        instructions: `In tennis, the winner of a set is based on how many games each player wins. The first player to win 6 games is declared the winner unless their opponent had already won 5 games, in which case the set continues until one of the players has won 7 games.\n\n        Given two integers score1 and score2, your task is to determine if it is possible for a tennis set to be finished with a final score of score1 : score2.`,\n        codeOutput: \n        `function tennisSet(score1, score2) {\n            //If either score is over 7, we know this score is not possible.\n            return score1 === 7 && score2 === 7 ?\n            false :\n            //If both scores are 0 or either is over 7, return false.\n            score1 === 0 && score2 === 0 ?\n            false :\n            score1 > 7 || score2 > 7 ? \n            false : \n            //Otherwise, check if either score is 7.\n            score1 === 7 || score2 === 7 ?\n            //If so, make sure the other score is either 5 or 6.\n            Math.abs(score1 - score2) >= 3 ? \n            //As long as the other score is 5 or 6, return true.\n            false :\n            true : \n            //If neither score is 7, see if one is 6.\n            score1 === 6 || score2 === 6 ?\n            //If so, make sure the other score is not 5.\n            Math.abs(score1 - score2) < 2 ?\n            //If the other score is 5, return false.\n            false : \n            true :\n            //If both scores are less than 6, there cannot be a winner.\n            score1 < 6 && score2 < 6 ?\n            false :\n            true;\n        }`,\n        code: function tennisSet(score1, score2) {\n            //If either score is over 7, we know this score is not possible.\n            return score1 === 7 && score2 === 7 ?\n            false :\n            //If both scores are 0 or either is over 7, return false.\n            score1 === 0 && score2 === 0 ?\n            false :\n            score1 > 7 || score2 > 7 ? \n            false : \n            //Otherwise, check if either score is 7.\n            score1 === 7 || score2 === 7 ?\n            //If so, make sure the other score is either 5 or 6.\n            Math.abs(score1 - score2) >= 3 ? \n            //As long as the other score is 5 or 6, return true.\n            false :\n            true : \n            //If neither score is 7, see if one is 6.\n            score1 === 6 || score2 === 6 ?\n            //If so, make sure the other score is not 5.\n            Math.abs(score1 - score2) < 2 ?\n            //If the other score is 5, return false.\n            false : \n            true :\n            //If both scores are less than 6, there cannot be a winner.\n            score1 < 6 && score2 < 6 ?\n            false :\n            true;\n        },\n        arguments: {\n            descriptions: [\n                {\n                    text: \"Integer score1\",\n                    type: \"Number\"\n                },\n                {\n                    text: \"Integer score2\",\n                    type: \"Number\"\n                }\n            ]\n        }\n    },\n    threeSplit: {\n        name: 'threeSplit',\n        instructions: `You have a long strip of paper with integers written on it in a single line from left to right. You wish to cut the paper into exactly three pieces such that each piece contains at least one integer and the sum of the integers in each piece is the same. You cannot cut through a number, i.e. each initial number will unambiguously belong to one of the pieces after cutting. How many ways can you do it?\n\n        It is guaranteed that the sum of all elements in the array is divisible by 3.`,\n        codeOutput: \n        `function threeSplit(a) {\n            //Get the total sum that each piece of the array should be.\n            let sum = a.reduce((a,b) => a += b, 0) / 3;\n            let combinations = 0;\n            let firstPiece = 0;\n            //Loop through each number in the array, starting at the first.\n            for (let i = 0; i < a.length; i++) {\n                //Incrementally add to the first piece.\n                firstPiece += a[i];\n                //If this current size of the first piece equals the correct sum, loop through the second piece for this iteration.\n                if (firstPiece === sum) {\n                    let secondPiece = 0;\n                    //Loop through each number in the second piece.\n                    for (let j = i + 1; j < a.length; j++) {\n                        //Incrementally add to the second piece.\n                        secondPiece += a[j];\n                        //If this current size of the second piece equals the correct sum, we know we have reached a correct combination since the remainder must equal the other third. \n                        if (secondPiece === sum) {\n                            //As long as this is not the last piece in the array, this is a working combination (there must be 3 pieces, not 2)\n                            if (j < a.length - 1) {\n                                combinations++;\n                            }\n                        }\n                    }\n                }\n            }\n            return combinations;\n        }`,\n        code: function threeSplit(a) {\n            //Get the total sum that each piece of the array should be.\n            let sum = a.reduce((a,b) => a += b, 0) / 3;\n            let combinations = 0;\n            let firstPiece = 0;\n            //Loop through each number in the array, starting at the first.\n            for (let i = 0; i < a.length; i++) {\n                //Incrementally add to the first piece.\n                firstPiece += a[i];\n                //If this current size of the first piece equals the correct sum, loop through the second piece for this iteration.\n                if (firstPiece === sum) {\n                    let secondPiece = 0;\n                    //Loop through each number in the second piece.\n                    for (let j = i + 1; j < a.length; j++) {\n                        //Incrementally add to the second piece.\n                        secondPiece += a[j];\n                        //If this current size of the second piece equals the correct sum, we know we have reached a correct combination since the remainder must equal the other third. \n                        if (secondPiece === sum) {\n                            //As long as this is not the last piece in the array, this is a working combination (there must be 3 pieces, not 2)\n                            if (j < a.length - 1) {\n                                combinations++;\n                            }\n                        }\n                    }\n                }\n            }\n            return combinations;\n        },\n        arguments: {\n            descriptions: [\n                {\n                    text: \"Array of Integers (Sum of all elements must be divisible by 3; Example: 7,8,2,25,-9,12,12)\",\n                    type: \"NumberArray\"\n                }\n            ]\n        }\n    },\n    timedReading: {\n        name: 'timedReading',\n        instructions: `Timed Reading is an educational tool used in many schools to improve and advance reading skills. A young elementary student has just finished his very first timed reading exercise. Unfortunately he's not a very good reader yet, so whenever he encountered a word longer than maxLength, he simply skipped it and read on.\n\n        Help the teacher figure out how many words the boy has read by calculating the number of words in the text he has read, no longer than maxLength.\n        Formally, a word is a substring consisting of English letters, such that characters to the left of the leftmost letter and to the right of the rightmost letter are not letters.`,\n        codeOutput: \n        `function timedReading(maxLength, text) {\n            let textStripped = \"\";\n            for(let i = 0; i < text.length; i++) {\n                //Add this character to the stripped version if it is a letter or space.\n                if(text.charCodeAt(i) >= 65 && text.charCodeAt(i) <= 90 ||\n                   text.charCodeAt(i) >= 97 && text.charCodeAt(i) <= 122 ||\n                   text.charCodeAt(i) === 32) {\n                       textStripped += text[i];\n                   }\n            }\n            //Split the stripped text into individuals words, filter out the longer ones, and count the number of remaining words.\n            return textStripped.split(\" \").filter(word => word.length <= maxLength && word.length > 0).length;\n        }`,\n        code: function timedReading(maxLength, text) {\n            let textStripped = \"\";\n            for(let i = 0; i < text.length; i++) {\n                //Add this character to the stripped version if it is a letter or space.\n                if(text.charCodeAt(i) >= 65 && text.charCodeAt(i) <= 90 ||\n                   text.charCodeAt(i) >= 97 && text.charCodeAt(i) <= 122 ||\n                   text.charCodeAt(i) === 32) {\n                       textStripped += text[i];\n                   }\n            }\n            //Split the stripped text into individuals words, filter out the longer ones, and count the number of remaining words.\n            return textStripped.split(\" \").filter(word => word.length <= maxLength && word.length > 0).length;\n        },\n        arguments: {\n            descriptions: [\n                {\n                    text: \"Integer maxLength\",\n                    type: \"Number\"\n                },\n                {\n                    text: \"Input String\",\n                    type: \"String\"\n                }\n            ]\n        }\n    },\n    twoSum: {\n        name: `twoSum`,\n        instructions: `Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.\n        You may assume that each input would have exactly one solution, and you may not use the same element twice.\n        You can return the answer in any order.`,\n        codeOutput: \n        `var twoSum = function(nums, target) {\n            for(let i = 0; i < nums.length - 1; i++) {\n                for(let j = i + 1; j < nums.length; j++) {\n                    if(nums[i] + nums[j] === target) {\n                        return [i, j];\n                    }\n                }\n            }\n        };`,\n        code: function twoSum(nums, target) {\n            for(let i = 0; i < nums.length - 1; i++) {\n                for(let j = i + 1; j < nums.length; j++) {\n                    if(nums[i] + nums[j] === target) {\n                        return [i, j];\n                    }\n                }\n            }\n        },\n        arguments: {\n            descriptions: [\n                {\n                    text: \"Array of Integers, Per Instructions (Form of 1,2,3...)\",\n                    type: \"NumberArray\"\n                },\n                {\n                    text: \"Integer for Target, Per Instructions\",\n                    type: \"Number\"\n                }\n            ]\n        }\n    },\n    twoSum2: {\n        name: `twoSum2`,\n        instructions: `Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.\n        You may assume that each input would have exactly one solution, and you may not use the same element twice.\n        You can return the answer in any order.`,\n        codeOutput: \n        `var twoSum2 = function(nums, target) {\n            for(let i = 0; i < nums.length - 1; i++) {\n                let missingAddend = target - nums[i];\n                if(nums.indexOf(missingAddend, i + 1) !== -1) {\n                    return [i, nums.indexOf(missingAddend, i + 1)]\n                }\n            }\n        };`,\n        code: function twoSum2(nums, target) {\n            for(let i = 0; i < nums.length - 1; i++) {\n                let missingAddend = target - nums[i];\n                if(nums.indexOf(missingAddend, i + 1) !== -1) {\n                    return [i, nums.indexOf(missingAddend, i + 1)]\n                }\n            }\n        },\n        arguments: {\n            descriptions: [\n                {\n                    text: \"Array of Integers, Per Instructions (Form of 1,2,3...)\",\n                    type: \"NumberArray\"\n                },\n                {\n                    text: \"Integer for Target, Per Instructions\",\n                    type: \"Number\"\n                }\n            ]\n        }\n    },\n    uniqueDigitProducts: {\n        name: 'uniqueDigitProducts',\n        instructions: `Let's call product(x) the product of x's digits. Given an array of integers a, calculate product(x) for each x in a, and return the number of distinct results you get.`,\n        codeOutput: \n        `function uniqueDigitProducts(a) {\n            let products = [];\n            //Loop through each number, finding the product of its digits.\n            a.forEach(number => {\n                let currentNumber = number;\n                let product = 1;\n                while(currentNumber) {\n                    //Get the next digit.\n                    let thisDigit = currentNumber % 10;\n                    //Multiply this number.\n                    product *= thisDigit;\n                    //Update the current number (go to next digit)\n                    currentNumber = Math.floor(currentNumber / 10);\n                }\n                //See if this product already exists in the products array.\n                if(products.indexOf(product) === -1) products.push(product);\n            });\n            //Return the number of unique products.\n            return products.length;\n        }`,\n        code: function uniqueDigitProducts(a) {\n            let products = [];\n            //Loop through each number, finding the product of its digits.\n            a.forEach(number => {\n                let currentNumber = number;\n                let product = 1;\n                while(currentNumber) {\n                    //Get the next digit.\n                    let thisDigit = currentNumber % 10;\n                    //Multiply this number.\n                    product *= thisDigit;\n                    //Update the current number (go to next digit)\n                    currentNumber = Math.floor(currentNumber / 10);\n                }\n                //See if this product already exists in the products array.\n                if(products.indexOf(product) === -1) products.push(product);\n            });\n            //Return the number of unique products.\n            return products.length;\n        },\n        arguments: {\n            descriptions: [\n                {\n                    text: \"Array of Integers (No Brackets; Form of 1,2,3...)\",\n                    type: \"NumberArray\"\n                }\n            ]\n        }\n    },\n    uniqueMorseRepresentations: {\n        name: `uniqueMorseRepresentations`,\n        instructions: `Given an array of strings words where each word can be written as a concatenation of the Morse code of each letter.\n\n        For example, \"cab\" can be written as \"-.-..--...\", which is the concatenation of \"-.-.\", \".-\", and \"-...\". We will call such a concatenation the transformation of a word.\n        Return the number of different transformations among all words we have.`,\n        codeOutput: \n        `var uniqueMorseRepresentations = function(words) {\n            let codes = [\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"];\n            \n            //Store unique transformations to count.\n            let transformations = [];\n            \n            words.forEach(word => {\n                //Store the current transformation of this word.\n                let transformation = \"\";\n                \n                //Build the transformation for this word.\n                word.split(\"\").forEach(letter => {\n                    //Using the codes array, get the index for the corresponding letter.\n                    transformation += codes[getMorseCodeIndex(letter)];\n                });\n                        \n                //If this transformation is unique, add it to the transformations array.\n                if(!transformations.includes(transformation)) transformations.push(transformation);\n            });\n            \n            //Return the number of unique transformations.\n            return transformations.length;\n            \n            //Helper function to get the index of the codes array that corresponds to this letter.\n            function getMorseCodeIndex(letter) {\n                //Depending on which letter this is, get relative number of the alphabet away from code 97 for 'a'\n                return letter.charCodeAt(0) - 97;\n            }\n        };`,\n        code: function uniqueMorseRepresentations(words) {\n            let codes = [\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"];\n            \n            //Store unique transformations to count.\n            let transformations = [];\n            \n            words.forEach(word => {\n                //Store the current transformation of this word.\n                let transformation = \"\";\n                \n                //Build the transformation for this word.\n                word.split(\"\").forEach(letter => {\n                    //Using the codes array, get the index for the corresponding letter.\n                    transformation += codes[getMorseCodeIndex(letter)];\n                });\n                        \n                //If this transformation is unique, add it to the transformations array.\n                if(!transformations.includes(transformation)) transformations.push(transformation);\n            });\n            \n            //Return the number of unique transformations.\n            return transformations.length;\n            \n            //Helper function to get the index of the codes array that corresponds to this letter.\n            function getMorseCodeIndex(letter) {\n                //Depending on which letter this is, get relative number of the alphabet away from code 97 for 'a'\n                return letter.charCodeAt(0) - 97;\n            }\n        },\n        arguments: {\n            descriptions: [\n                {\n                    text: \"Array of Lowercase Words(e.g. gin,zen,gig,msg)\",\n                    type: \"StringArray\"\n                }\n            ]\n        }\n    },\n    validTime: {\n        name: 'validTime',\n        instructions: `Check if the given string is a correct time representation of the 24-hour clock.\n\n        Example\n        \n        For time = \"13:58\", the output should be\n        validTime(time) = true;\n        For time = \"25:51\", the output should be\n        validTime(time) = false;\n        For time = \"02:76\", the output should be\n        validTime(time) = false.`,\n        codeOutput: \n        `function validTime(time) {\n            //Create number versions of this string.\n            let values = time.split(\":\").map(str => Number(str));\n            //Check if the values (hour and minutes) are within correct range.\n            return values[0] < 24 && values[0] >= 0 ? \n            values[1] < 60 && values[1] >= 0 ?\n            true :\n            false :\n            false;\n        }`,\n        code: function validTime(time) {\n            //Create number versions of this string.\n            let values = time.split(\":\").map(str => Number(str));\n            //Check if the values (hour and minutes) are within correct range.\n            return values[0] < 24 && values[0] >= 0 ? \n            values[1] < 60 && values[1] >= 0 ?\n            true :\n            false :\n            false;\n        },\n        arguments: {\n            descriptions: [\n                {\n                    text: \"Time String (In the form of HH:MM; 24-Hour Form)\",\n                    type: \"String\"\n                }\n            ]\n        }\n    },\n    variableName: {\n        name: 'variableName',\n        instructions: `Correct variable names consist only of English letters, digits and underscores and they can't start with a digit.\n\n        Check if the given string is a correct variable name.`,\n        codeOutput: \n        `function variableName(name) {\n            //Make sure characters are alphanumeric or underscores\n            for(let i = 0; i < name.length; i++) {\n                \n                let code = name.charCodeAt(i);\n                \n                //See if first character is a number. \n                if(i === 0) {\n                    if(code > 47 && code < 58) return false;\n                }\n                \n                //Check all other cases.\n                if(!(code > 64 && code < 91) && \n                !(code > 96 && code < 123) && \n                !(code > 47 && code < 58) &&\n                !(code === 95)) {\n                    return false;\n                }\n            }\n            \n            return true;\n        }`,\n        code: function variableName(name) {\n            //Make sure characters are alphanumeric or underscores\n            for(let i = 0; i < name.length; i++) {\n                \n                let code = name.charCodeAt(i);\n                \n                //See if first character is a number. \n                if(i === 0) {\n                    if(code > 47 && code < 58) return false;\n                }\n                \n                //Check all other cases.\n                if(!(code > 64 && code < 91) && \n                !(code > 96 && code < 123) && \n                !(code > 47 && code < 58) &&\n                !(code === 95)) {\n                    return false;\n                }\n            }\n            \n            return true;\n        },\n        arguments: {\n            descriptions: [\n                {\n                    text: \"Input String\",\n                    type: \"String\"\n                }\n            ]\n        }\n    },\n    videoPart: {\n        name: 'videoPart',\n        instructions: `You have been watching a video for some time. Knowing the total video duration find out what portion of the video you have already watched.\n\n        Example\n        \n        For part = \"02:20:00\" and total = \"07:00:00\", the output should be\n        videoPart(part, total) = [1, 3].\n        \n        You have watched 1 / 3 of the whole video.`,\n        codeOutput: \n        `function videoPart(part, total) {\n            //Get the total number of seconds for the 'part' and the 'total' length of the video.\n            let partSeconds = part.split(\":\")\n            .map(str => Number(str))\n            .reduce((total, number, index) => {\n                return index === 0 ?\n                total += (number * 3600) :\n                index === 1 ?\n                total += (number * 60) :\n                total += number;\n            }, 0);\n            \n            let totalSeconds = total.split(\":\")\n            .map(str => Number(str))\n            .reduce((total, number, index) => {\n                return index === 0 ?\n                total += (number * 3600) :\n                index === 1 ?\n                total += (number * 60) :\n                total += number;\n            }, 0);\n            \n            //If there is a remainder when dividing these values, we know we need to reduce the fraction.\n            if(totalSeconds % partSeconds) {\n                //Find the GCF between the numerator and denominator, then return the simplified fraction.\n                let commonFactor = findCommonFactors(findFactors(partSeconds), findFactors(totalSeconds))\n                return [partSeconds / commonFactor, totalSeconds / commonFactor];\n            }\n            \n            //Otherwise, return this as a unit fraction.\n            return [1, totalSeconds / partSeconds];\n        \n            //Helper function to find all factors of each number.\n            function findFactors(num) {\n                let max = num === 1 ? 1 : Math.ceil(num / 2);\n                let factors = [];\n                for(let i = 1; i <= max; i++) {\n                    if(num % i === 0) {\n                        factors.push(num / i);\n                        factors.push(i);\n                        max = num / i;\n                    }\n                }\n                return factors;\n            }\n            \n            //Helper function to find the GCF between the two.\n            function findCommonFactors(factors1, factors2) {\n                factors1.sort((a, b) => b - a);\n                for(let i = 0; i < factors1.length; i++) {\n                    if(factors2.includes(factors1[i])) {\n                        return factors1[i];\n                    }\n                }\n                return 1;\n            }\n        }`,\n        code: function videoPart(part, total) {\n            //Get the total number of seconds for the 'part' and the 'total' length of the video.\n            let partSeconds = part.split(\":\")\n            .map(str => Number(str))\n            .reduce((total, number, index) => {\n                return index === 0 ?\n                total += (number * 3600) :\n                index === 1 ?\n                total += (number * 60) :\n                total += number;\n            }, 0);\n            \n            let totalSeconds = total.split(\":\")\n            .map(str => Number(str))\n            .reduce((total, number, index) => {\n                return index === 0 ?\n                total += (number * 3600) :\n                index === 1 ?\n                total += (number * 60) :\n                total += number;\n            }, 0);\n            \n            //If there is a remainder when dividing these values, we know we need to reduce the fraction.\n            if(totalSeconds % partSeconds) {\n                //Find the GCF between the numerator and denominator, then return the simplified fraction.\n                let commonFactor = findCommonFactors(findFactors(partSeconds), findFactors(totalSeconds))\n                return [partSeconds / commonFactor, totalSeconds / commonFactor];\n            }\n            \n            //Otherwise, return this as a unit fraction.\n            return [1, totalSeconds / partSeconds];\n        \n            //Helper function to find all factors of each number.\n            function findFactors(num) {\n                let max = num === 1 ? 1 : Math.ceil(num / 2);\n                let factors = [];\n                for(let i = 1; i <= max; i++) {\n                    if(num % i === 0) {\n                        factors.push(num / i);\n                        factors.push(i);\n                        max = num / i;\n                    }\n                }\n                return factors;\n            }\n            \n            //Helper function to find the GCF between the two.\n            function findCommonFactors(factors1, factors2) {\n                factors1.sort((a, b) => b - a);\n                for(let i = 0; i < factors1.length; i++) {\n                    if(factors2.includes(factors1[i])) {\n                        return factors1[i];\n                    }\n                }\n                return 1;\n            }\n        },\n        arguments: {\n            descriptions: [\n                {\n                    text: \"Length of Part of Video as Time String (Form of HH:MM:SS)\",\n                    type: \"String\"\n                },\n                {\n                    text: \"Length of Video as Time String (Form of HH:MM:SS)\",\n                    type: \"String\"\n                }\n            ]\n        }\n    },\n    volleyballPositions: {\n        name: 'volleyballPositions',\n        instructions: `You are watching a volleyball tournament, but you missed the beginning of the very first game of your favorite team. Now you're curious about how the coach arranged the players on the field at the start of the game.\n\n        The team you favor plays in the following formation:\n        \n        0 3 0\n        4 0 2\n        0 6 0\n        5 0 1\n        where positive numbers represent positions occupied by players. After the team gains the serve, its members rotate one position in a clockwise direction, so the player in position 2 moves to position 1, the player in position 3 moves to position 2, and so on, with the player in position 1 moving to position 6.\n        \n        Given the current formation of the team and the number of times k it gained the serve, find the initial position of each player in it.`,\n        codeOutput: \n        `function volleyballPositions(formation, k) {\n            //Every 6 rotations, positions are at the same place, so don't exceed 6 rotations total for each input case.\n            let totalRotations = k % 6;\n            \n            //Helper function to shift positions once.\n            let shiftOnce = currentPositions => {\n                //Define position map as a 2-dimensional array to use as a 'key' for rotation positions.\n                let positionMap = [\n                    [0,1],\n                    [1,0],\n                    [3,0],\n                    [2,1],\n                    [3,2],\n                    [1,2]\n                ];\n                \n                //Keep track of the last element as a placeholder.\n                let last = currentPositions[positionMap[5][0]][positionMap[5][1]];\n                \n                //Loop through each position in the position map, and move the elements around once.\n                for(let position = positionMap.length - 1; position > 0; position--) {\n                    currentPositions[positionMap[position][0]][positionMap[position][1]] =\n                    currentPositions[positionMap[position - 1][0]][positionMap[position - 1][1]];\n                }\n                 \n                //At the end, replace the first element with the placeholder last.   \n                currentPositions[positionMap[0][0]][positionMap[0][1]] = last; \n            }\n            \n            //Repeat the rotation as many times as necessary.\n            for(let i = 0; i < totalRotations; i++) {\n                shiftOnce(formation);\n            }\n            \n            return formation;\n        }`,\n        code: function volleyballPositions(formation, k) {\n            //Every 6 rotations, positions are at the same place, so don't exceed 6 rotations total for each input case.\n            let totalRotations = k % 6;\n            \n            //Helper function to shift positions once.\n            let shiftOnce = currentPositions => {\n                //Define position map as a 2-dimensional array to use as a 'key' for rotation positions.\n                let positionMap = [\n                    [0,1],\n                    [1,0],\n                    [3,0],\n                    [2,1],\n                    [3,2],\n                    [1,2]\n                ];\n                \n                //Keep track of the last element as a placeholder.\n                let last = currentPositions[positionMap[5][0]][positionMap[5][1]];\n                \n                //Loop through each position in the position map, and move the elements around once.\n                for(let position = positionMap.length - 1; position > 0; position--) {\n                    currentPositions[positionMap[position][0]][positionMap[position][1]] =\n                    currentPositions[positionMap[position - 1][0]][positionMap[position - 1][1]];\n                }\n                 \n                //At the end, replace the first element with the placeholder last.   \n                currentPositions[positionMap[0][0]][positionMap[0][1]] = last; \n            }\n            \n            //Repeat the rotation as many times as necessary.\n            for(let i = 0; i < totalRotations; i++) {\n                console.log(formation);\n                shiftOnce(formation);\n            }\n            \n            return formation;\n        },\n        arguments: {\n            descriptions: [\n                {\n                    text: 'Array of String Arrays Showing Volleyball Formation (Example to Copy: [empty,Player5,empty], [Player4,empty,Player2], [empty,Player3,empty], [Player6,empty,Player1])',\n                    type: \"ArrayArray\"\n                },\n                {\n                    text: \"Integer k\",\n                    type: \"Number\"\n                }\n            ]\n        }\n    },\n    weakNumbers: {\n        name: 'weakNumbers',\n        instructions: `We define the weakness of number x as the number of positive integers smaller than x that have more divisors than x.\n\n        It follows that the weaker the number, the greater overall weakness it has. For the given integer n, you need to answer two questions:\n        \n        what is the weakness of the weakest numbers in the range [1, n]?\n        how many numbers in the range [1, n] have this weakness?\n        Return the answer as an array of two elements, where the first element is the answer to the first question, and the second element is the answer to the second question.`,\n        codeOutput: \n        `function weakNumbers(n) {\n            let output = [0, 0];\n            //Keep track of how many numbers in this range 1-n that have a given index as weakness level.\n            let weaknessMap = {};\n            //Keep track of factor numbers for each number in the range 1-n.\n            let factors = {};\n            //Get all factors within this range. Each time, determine weakness.\n            for(let i = 1; i <= n; i++) {\n                factors[i] = 0;\n                let max = n;\n                for(let j = 1; j < max; j++) {\n                    if(i % j === 0) {\n                        if(i / j === j) {\n                            factors[i]++;\n                        } else {\n                            factors[i] += 2;\n                        }\n                        max = i / j;\n                    }\n                }\n                //Now that we got all the factors, determine weakness and save.\n                let weakness = 0;\n                for(let number in factors) {\n                    if(factors[number] > factors[i] && number !== i) {\n                        weakness++;\n                    }\n                }\n                if(weaknessMap[weakness]) {\n                    weaknessMap[weakness]++;\n                } else {\n                    weaknessMap[weakness] = 1;\n                }\n            }\n            \n            //Get the weakest value \n            let maxWeakness = 0;\n            for(let weakness in weaknessMap) {\n                if(Number(weakness) > maxWeakness) maxWeakness = Number(weakness); \n            }\n            //Save the values in the output as directed.\n            output[0] = Number(maxWeakness);\n            output[1] = weaknessMap[maxWeakness];\n            \n            //Return result\n            return output;\n        }`,\n        code: function weakNumbers(n) {\n            let output = [0, 0];\n            //Keep track of how many numbers in this range 1-n that have a given index as weakness level.\n            let weaknessMap = {};\n            //Keep track of factor numbers for each number in the range 1-n.\n            let factors = {};\n            //Get all factors within this range. Each time, determine weakness.\n            for(let i = 1; i <= n; i++) {\n                factors[i] = 0;\n                let max = n;\n                for(let j = 1; j < max; j++) {\n                    if(i % j === 0) {\n                        if(i / j === j) {\n                            factors[i]++;\n                        } else {\n                            factors[i] += 2;\n                        }\n                        max = i / j;\n                    }\n                }\n                //Now that we got all the factors, determine weakness and save.\n                let weakness = 0;\n                for(let number in factors) {\n                    if(factors[number] > factors[i] && number !== i) {\n                        weakness++;\n                    }\n                }\n                if(weaknessMap[weakness]) {\n                    weaknessMap[weakness]++;\n                } else {\n                    weaknessMap[weakness] = 1;\n                }\n            }\n            \n            //Get the weakest value \n            let maxWeakness = 0;\n            for(let weakness in weaknessMap) {\n                if(Number(weakness) > maxWeakness) maxWeakness = Number(weakness); \n            }\n            //Save the values in the output as directed.\n            output[0] = Number(maxWeakness);\n            output[1] = weaknessMap[maxWeakness];\n            \n            //Return result\n            return output;\n        },\n        arguments: {\n            descriptions: [\n                {\n                    text: \"Integer n\",\n                    type: \"Number\"\n                }\n            ]\n        }\n    },\n    whoseTurn: {\n        name: 'whoseTurn',\n        instructions: `Imagine a standard chess board with only two white and two black knights placed in their standard starting positions: the white knights on b1 and g1; the black knights on b8 and g8.\n\n        There are two players: one plays for white, the other for black. During each move, the player picks one of his knights and moves it to an unoccupied square according to standard chess rules. Thus, a knight on d5 can move to any of the following squares: b6, c7, e7, f6, f4, e3, c3, and b4, as long as it is not occupied by either a friendly or an enemy knight.\n        \n        The players take turns in making moves, starting with the white player. Given the configuration p of the knights after an unspecified number of moves, determine whose turn it is.`,\n        codeOutput: \n        `function whoseTurn(p) {\n            //Create arrays to store the current codes.\n            let whiteConfigurations = p.slice(0, 5).split(\";\");\n            let blackConfigurations = p.slice(6).split(\";\");\n            \n            //Get the codes for black knight.\n            let black1Codes = blackConfigurations.map(knight => {\n                //Find the code, combining the letter's code with the number's code.\n                let code = ((knight.charCodeAt(0) - 96) + Number(knight[1])) % 2 ? \"odd\" : \"even\";\n                return code;\n            });\n            \n            //Get the codes for white knight.\n            let white1Codes = whiteConfigurations.map(knight => {\n                //Find the code, combining the letter's code with the number's code.\n                let code = ((knight.charCodeAt(0) - 96) + Number(knight[1])) % 2 ? \"odd\" : \"even\";\n                return code;\n            });\n            \n            //We know that if both codes (for each color) either have the same or both different values, it will be the white's turn.\n            return black1Codes[0] === black1Codes[1] && white1Codes[0] === white1Codes[1] ?\n            true :\n            black1Codes[0] !== black1Codes[1] && white1Codes[0] !== white1Codes[1] ?\n            true : \n            false;  \n        }`,\n        code: function whoseTurn(p) {\n            //Create arrays to store the current codes.\n            let whiteConfigurations = p.slice(0, 5).split(\";\");\n            let blackConfigurations = p.slice(6).split(\";\");\n            \n            //Get the codes for black knight.\n            let black1Codes = blackConfigurations.map(knight => {\n                //Find the code, combining the letter's code with the number's code.\n                let code = ((knight.charCodeAt(0) - 96) + Number(knight[1])) % 2 ? \"odd\" : \"even\";\n                return code;\n            });\n            \n            //Get the codes for white knight.\n            let white1Codes = whiteConfigurations.map(knight => {\n                //Find the code, combining the letter's code with the number's code.\n                let code = ((knight.charCodeAt(0) - 96) + Number(knight[1])) % 2 ? \"odd\" : \"even\";\n                return code;\n            });\n            \n            //We know that if both codes (for each color) either have the same or both different values, it will be the white's turn.\n            return black1Codes[0] === black1Codes[1] && white1Codes[0] === white1Codes[1] ?\n            true :\n            black1Codes[0] !== black1Codes[1] && white1Codes[0] !== white1Codes[1] ?\n            true : \n            false;  \n        },\n        arguments: {\n            descriptions: [\n                {\n                    text: \"Positions of White/Black Knights on Chessboard (Form of b1;g1;b8;g8)\",\n                    type: \"String\"\n                }\n            ]\n        }\n    },\n    willYou: {\n        name: 'willYou',\n        instructions: `Once Mary heard a famous song, and a line from it stuck in her head. That line was \"Will you still love me when I'm no longer young and beautiful?\". Mary believes that a person is loved if and only if he/she is both young and beautiful, but this is quite a depressing thought, so she wants to put her belief to the test.\n\n        Knowing whether a person is young, beautiful and loved, find out if they contradict Mary's belief.\n        \n        A person contradicts Mary's belief if one of the following statements is true:\n        \n        they are young and beautiful but not loved;\n        they are loved but not young or not beautiful.`,\n        codeOutput: \n        `function willYou(young, beautiful, loved) {\n            return loved ? \n            !(loved && (young && beautiful)) : \n            young && beautiful ?\n            !(loved && (young && beautiful)) :\n            loved && (young && beautiful);\n        }`,\n        code: function willYou(young, beautiful, loved) {\n            return loved ? \n            !(loved && (young && beautiful)) : \n            young && beautiful ?\n            !(loved && (young && beautiful)) :\n            loved && (young && beautiful);\n        },\n        arguments: {\n            descriptions: [\n                {\n                    text: \"Boolean Value for Young (true or false)\",\n                    type: \"Boolean\"\n                },\n                {\n                    text: \"Boolean Value for Beautiful (true or false)\",\n                    type: \"Boolean\"\n                },\n                {\n                    text: \"Boolean Value for Loved (true or false)\",\n                    type: \"Boolean\"\n                }\n            ]\n        }\n    },\n    wordPattern: {\n        name: `wordPattern`,\n        instructions: `Given a pattern and a string s, find if s follows the same pattern.\n\n        Here follow means a full match, such that there is a bijection between a letter in pattern and a non-empty word in s.`,\n        codeOutput: \n        `var wordPattern = function(pattern, s) {\n            //Place the words of the string into an array.\n            let words = s.split(\" \");\n            //Create character map connecting letters in pattern to words in s.\n            let wordMap = {};\n            \n            //Return early if the length of words and the pattern is different.\n            if(words.length !== pattern.length) return false;\n            \n            for(let i = 0; i < words.length; i++) {\n                if(!wordMap[pattern[i]]) {     \n                    //If this word isn't already part of the character map, Add this word to the word map if it doesn't already exist.\n                    if(Object.values(wordMap).indexOf(words[i]) === -1) {\n                       wordMap[pattern[i]] = words[i];\n                    } else {\n                        //Otherwise, this word is already matched by a different character.\n                        return false;\n                    }\n                } else {\n                    //Otherwise, return false if this word and the letter in pattern don't correspond to the established pattern.\n                    if(wordMap[pattern[i]] !== words[i]) {\n                        return false;\n                    }\n                }\n            }\n            \n            return true;\n        };`,\n        code: function wordPattern(pattern, s) {\n            //Place the words of the string into an array.\n            let words = s.split(\" \");\n            //Create character map connecting letters in pattern to words in s.\n            let wordMap = {};\n            \n            //Return early if the length of words and the pattern is different.\n            if(words.length !== pattern.length) return false;\n            \n            for(let i = 0; i < words.length; i++) {\n                if(!wordMap[pattern[i]]) {     \n                    //If this word isn't already part of the character map, Add this word to the word map if it doesn't already exist.\n                    if(Object.values(wordMap).indexOf(words[i]) === -1) {\n                       wordMap[pattern[i]] = words[i];\n                    } else {\n                        //Otherwise, this word is already matched by a different character.\n                        return false;\n                    }\n                } else {\n                    //Otherwise, return false if this word and the letter in pattern don't correspond to the established pattern.\n                    if(wordMap[pattern[i]] !== words[i]) {\n                        return false;\n                    }\n                }\n            }\n            \n            return true;\n        },\n        arguments: {\n            descriptions: [\n                {\n                    text: \"String to represent pattern (e.g. abba)\",\n                    type: \"String\"\n                },\n                {\n                    text: \"String to represent string to check (e.g. dog cat cat dog)\",\n                    type: \"String\"\n                }\n            ]\n        }\n    }\n};\n\nexport default challenges_t_z;\n\n/*\n\nTemplate:\n\nname: {\n    name: ``,\n    instructions: ``,\n    codeOutput: \n    ``,\n    code: ,\n    arguments: {\n        descriptions: [\n            {\n                text: \"\",\n                type: \"\"\n            }\n        ]\n    }\n}\n\nType List:\nNumber\nString\nNumber Array \nString Array\nNumber Array Array\nString Array Array \nBooleanArrayArray\n\n*/","//This component receives as props the object code for whatever challenge is selected\n\n//This component will contain the code (placed on Solutions page) that will then hold two child components:\n//SolutionCodeDisplay - The actual source code displayed in a non-editable region\n//SolutionCode - The function itself used to process output.\n//SolutionTest - A form which passes a user's input to the function \n    //SolutionTest - Contains SolutionOutput\n\nimport { useRef, useEffect } from 'react';\n\n//Test solution(s) with an example\nimport challenges from '../solution-code/challenges';\nimport challenges_d_f from '../solution-code/challenges_d_f';\nimport challenges_g_j from '../solution-code/challenges_g_j';\nimport challenges_k_n from '../solution-code/challenges_k_n';\nimport challenges_o_r from '../solution-code/challenges_o_r';\nimport challenges_s from '../solution-code/challenges_s';\nimport challenges_t_z from '../solution-code/challenges_t_z';\n\nlet allChallenges = {\n    ...challenges, \n    ...challenges_d_f, \n    ...challenges_g_j, \n    ...challenges_k_n,\n    ...challenges_o_r,\n    ...challenges_s,\n    ...challenges_t_z\n};\n\nconst Solution = props => {\n    //console.log(allChallenges[`${props.challengeName}`].code ?? \"undefined\")\n    //Create an empty array to hold references to dynamic inputs (created when a challenge is selected).\n    const refs = useRef([]);\n\n    //Create a reference to the output where a solution will be placed.\n    const solutionOutput = useRef(\"\");\n\n    //Each time the challenge changes, remove null values from the dynamic ref array.\n    //This occurs when a challenge is selected that has multiple inputs, then is changed to a challenge with fewer inputs.\n    //Those remaining inputs become null.\n    useEffect(() => {\n        //*Is there a more dynamic React-based or less vanilla approach to this?\n        while(refs.current[refs.current.length - 1] === null && refs.current.length) {\n            refs.current.pop();\n        }\n        //Reset input values.\n        refs.current.forEach(field => {\n            field.value = \"\";\n        });\n        //Clear out the solution output if there was something there.\n        if(solutionOutput.current.value) solutionOutput.current.innerHTML = \"\";\n        //solutionOutput.current.innerHTML\n    }, [props.challengeName])\n\n    //Convert input to number.\n    const convertToNumber = stringInput => {\n        return Number(stringInput);\n    }\n\n    //Convert input to boolean.\n    const convertToBoolean = stringInput => {\n        return stringInput === \"true\" ? true : false;\n    }\n\n    //Convert user input into an array of strings.\n    const convertToStringArray = stringInput => {\n        return stringInput.split(\",\");\n    }\n\n    //Convert user input into an array of integers.\n    const convertToNumberArray = stringInput => {\n        return stringInput.split(\",\").map(str => Number(str));\n    }\n\n    //Convert user input into an array of number arrays.\n    const convertToArrayOfNumberArrays = stringInput => {\n        return stringInput.split(\", \").map(arrayString => {\n            //Eliminate beginning and ending brackets.\n            let strippedArrayString = arrayString.substr(1, arrayString.length - 2);\n            //Extract the numbers from this sub-array.\n            return strippedArrayString.split(\",\").map(arrayStringElement => {\n                return Number(arrayStringElement);\n            });\n        });\n    }\n\n    //Convert user input into an array of (string) arrays.\n    const convertToArrayOfArrays = stringInput => {\n        return stringInput.split(\", \").map(arrayString => {\n            //Eliminate beginning and ending brackets.\n            let strippedArrayString = arrayString.substr(1, arrayString.length - 2);\n            //Extract the elements from this sub-array.\n            return strippedArrayString.split(\",\").map(arrayStringElement => {\n                return arrayStringElement;\n            });\n        });\n    }\n\n    //Convert user input into an array of boolean arrays.\n    const convertToArrayOfBooleanArrays = stringInput => {\n        return stringInput.split(\", \").map(arrayString => {\n            //Eliminate beginning and ending brackets.\n            let strippedArrayString = arrayString.substr(1, arrayString.length - 2);\n            //Extract the elements from this sub-array.\n            return strippedArrayString.split(\",\").map(arrayStringElement => {\n                if(arrayStringElement === \"true\") return true;\n                return false;\n            })\n        })\n    }\n\n    //Generate output based on user test input.\n    const generateOutput = () => {\n        //Convert inputs to correct types.\n        const args = refs.current.map(thisRef => {\n            //Convert input to number.\n            try {\n                if(thisRef.getAttribute(\"inputtype\") === \"Number\") {\n                    return convertToNumber(thisRef.value);\n                }\n                if(thisRef.getAttribute(\"inputtype\") === \"NumberArray\") {\n                    return convertToNumberArray(thisRef.value);\n                }\n                if(thisRef.getAttribute(\"inputtype\") === \"StringArray\") {\n                    return convertToStringArray(thisRef.value);\n                }\n                if(thisRef.getAttribute('inputtype') === \"NumberArrayArray\") {\n                    return convertToArrayOfNumberArrays(thisRef.value);\n                }\n                if(thisRef.getAttribute('inputtype') === \"ArrayArray\") {\n                    return convertToArrayOfArrays(thisRef.value);\n                }\n                if(thisRef.getAttribute('inputtype') === \"BooleanArrayArray\") {\n                    return convertToArrayOfBooleanArrays(thisRef.value);\n                }\n                if(thisRef.getAttribute('inputtype') === \"Boolean\") {\n                    return convertToBoolean(thisRef.value);\n                }\n            } catch(error) {\n                //Something went wrong when trying to access or convert user input. Return 0 instead for this input.\n                console.log(\"IN ERROR BLOCK\")\n                return \"error\";\n            }\n            \n            //HERE, put other input conversion code (inlcuding arrays, etc.).\n            //Otherwise, keep this as a string.\n            return thisRef.value;\n        });\n\n        //Run function with user's input (converted to correct types).\n        let output;\n\n        if(args.includes(\"error\")) {\n            output = `Error with Inputs`;\n        } else {\n            //Get output from running function. If the function returns null or undefined, we know something was wrong with the inputs.\n            try {\n                output = allChallenges[`${props.challengeName}`].code(...args) ?? \"Something went wrong with the inputs.\";\n                if(output === isNaN) throw new Error(\"Output was not a number. Try another input.\");\n                //If the output was in array form, see if any value was NaN.\n                if(Array.isArray(output)) {\n                    if(output.includes(NaN)) throw new Error(\"Output was not a number. Try another input.\");\n                }\n            } catch(error) {\n                output = `Error running code: ${error}`;\n            }\n        }\n\n        //Output the solution to the page.\n        solutionOutput.current.value = output;\n        solutionOutput.current.innerHTML = output;\n    };\n\n    return (\n        <>\n            {\n                props.challengeName ? \n                <>\n                    <div className=\"my-4\">\n                        <p className=\"field-heading\">Instructions:</p>\n                        <div className=\"bg-light p-4\">\n                            <p>{allChallenges[`${props.challengeName}`].instructions}</p>\n                        </div> \n                    </div>\n\n                    <div className=\"row\">\n                        <div className=\"col-lg-6\">\n                            <div className=\"mt-2\">\n                                <p className=\"field-heading\">Solution Code:</p>\n                                <div className=\"bg-light p-4\">\n                                <p><a href={`https://github.com/mhans003/algorithm-solutions-cs/blob/main/${allChallenges[`${props.challengeName}`].name}.js`} target=\"_blank\" rel=\"noopener noreferrer\">Click Here to See Code in Repo</a></p>\n                                <p className=\"text-muted\">Link not working? <a href=\"https://mhans003.github.io/portfolio/contact.html\" target=\"_blank\" rel=\"noopener noreferrer\">Let me know.</a></p>\n                                    {/*\n                                    <p><a href=\"https://github.com/mhans003/algorithm-solutions-cs/\" target=\"_blank\" rel=\"noopener noreferrer\">Click Here</a> to see Repo with all solutions (fully formatted code).</p>\n                                    <p><a href={`https://github.com/mhans003/algorithm-solutions-cs/blob/main/${allChallenges[`${props.challengeName}`].code.name}.js`} target=\"_blank\" rel=\"noopener noreferrer\">Click Here to See Code in Repo</a></p>\n                                    <p><a href={`https://github.com/mhans003/algorithm-solutions-cs/blob/main/${allChallenges[`${props.challengeName}`].name}.js`} target=\"_blank\" rel=\"noopener noreferrer\">Click Here to See Code in Repo</a></p>*/}\n                                    <pre id=\"code-output\">{allChallenges[`${props.challengeName}`].codeOutput}</pre>\n                                </div>  \n                            </div> \n                        </div>\n                        \n                        <div className=\"col-lg-6\">\n                            <div className=\"form-group mt-4 mt-lg-2\">\n                                <p className=\"field-heading\">User Input:</p>\n                                {allChallenges[`${props.challengeName}`].arguments.descriptions.map((description, index) => {\n                                    return (\n                                        //Dynamically create input fields for the number of inputs for this challenge.\n                                        //This will create a reference to that input element so that we can capture a user's input test value.\n                                        <div className=\"form-group\" key={index}>\n                                            <label for={`input-${index}`}>{description.text}</label>\n                                            <input \n                                                id={`input-${index}`}\n                                                className=\"form-control form-control-lg\"\n                                                type={description.type === \"Number\" ? \"number\": \"text\"} \n                                                inputtype={description.type}\n                                                ref={el => (refs.current[index] = el)}\n                                            />        \n                                        </div>\n                                    );\n                                })}\n                            </div>\n\n                            <button type=\"button\" className=\"btn btn-info btn-block btn-lg\" onClick={generateOutput}>Run Test</button>\n                            <div className=\"mt-3 mb-5\">\n                                <p className=\"field-heading\">Solution Output:</p>\n                                <div className=\"bg-dark p-4\">\n                                    <code ref={solutionOutput}></code>\n                                </div> \n                            </div>\n                        </div>\n                    </div>\n                </>\n                : null\n            }\n        </>\n    );\n};\n\nexport default Solution;","import Nav from '../components/Nav';\nimport Solution from '../components/Solution';\nimport { useState, useRef } from 'react';\n\n//This page will allow the user to select from a dropdown of solutions, which is passed down into the Solution component.\n\nconst Solutions = () => {\n    const [challengeName, setChallengeName] = useState(\"\");\n    const challengeDropdown = useRef();\n    const handleChallengeChange = e => {\n        //As long as one of the code challenges is selected (not the initial 'select a challenge', then render the code)\n        if(challengeDropdown.current.value) setChallengeName(challengeDropdown.current.value);\n    }\n\n    return (\n        <>\n            <Nav/>\n            <div className=\"container mt-5\">\n                <div className=\"form-group\">\n                    <label for=\"select-challenge\" className=\"field-heading\">Select Challenge:</label>\n                    <select className=\"form-control form-control-lg dropdown-items\" id=\"select-challenge\" onChange={e => handleChallengeChange(e)} ref={challengeDropdown}>\n                        <option value=\"\" selected>Select a Challenge</option>\n                        <option value=\"absvaluesumminimization\">Abs Value Sum Minimization</option>\n                        <option value=\"adanumber\">Ada Number</option>\n                        <option value=\"addBinary\">Add Binary</option>\n                        <option value=\"addborder\">Add Border</option>\n                        <option value=\"additionWithoutCarrying\">Addition Without Carrying</option>\n                        <option value=\"adjacentElementsProduct\">Adjacent Elements Product</option>\n                        <option value=\"allLongestStrings\">All Longest Strings</option>\n                        <option value=\"almostIncreasingSequence\">Almost Increasing Sequence</option>\n                        <option value=\"alphabeticShift\">Alphabetic Shift</option>\n                        <option value=\"alphabetSubsequence\">Alphabet Subsequence</option>\n                        <option value=\"alphanumericLess\">Alphanumeric Less</option>\n                        <option value=\"alternatingSums\">Alternating Sums</option>\n                        <option value=\"appleBoxes\">Apple Boxes</option>\n                        <option value=\"areEquallyStrong\">Are Equally Strong</option>\n                        <option value=\"areIsomorphic\">Are Isomorphic</option>\n                        <option value=\"areSimilar\">Are Similar</option>\n                        <option value=\"areSimilar2\">Are Similar - Version 2</option>\n                        <option value=\"arithmeticExpression\">Arithmetic Expression</option>\n                        <option value=\"arrayChange\">Array Change</option>\n                        <option value=\"arrayConversion\">Array Conversion</option>\n                        <option value=\"arrayMaximalAdjacentDifference\">Array Maximal Adjacent Difference</option>\n                        <option value=\"arrayPacking\">Array Packing</option>\n                        <option value=\"arrayPairSum\">Array Pair Sum</option>\n                        <option value=\"arrayPreviousLess\">Array Previous Less</option>\n                        <option value=\"arrayReplace\">Array Replace</option>\n                        <option value=\"avoidObstacles\">Avoid Obstacles</option>\n                        <option value=\"beautifulText\">Beautiful Text</option>\n                        <option value=\"bishopAndPawn\">Bishop and Pawn</option>\n                        <option value=\"bishopDiagonal\">Bishop Diagonal</option>\n                        <option value=\"boxBlur\">Box Blur</option>\n                        <option value=\"boxesPacking\">Boxes Packing</option>\n                        <option value=\"buildPalindrome\">Build Palindrome</option>\n                        <option value=\"calPoints\">Cal Points (Baseball)</option>\n                        <option value=\"canConstruct\">Can Construct</option>\n                        <option value=\"candies\">Candies</option>\n                        <option value=\"candles\">Candles</option>\n                        <option value=\"canWinNim\">Can Win Nim</option>\n                        <option value=\"characterParity\">Character Parity</option>\n                        <option value=\"checkPalindrome\">Check Palindrome</option>\n                        <option value=\"checkPerfectNumber\">Check Perfect Number</option>\n                        <option value=\"chessBishopDream\">Chess Bishop Dream</option>\n                        <option value=\"chessBoardCellColor\">Chess Board Cell Color</option>\n                        <option value=\"chessKnight\">Chess Knight</option>\n                        <option value=\"chessTriangle\">Chess Triangle</option>\n                        <option value=\"christmasTree\">Christmas Tree</option>\n                        <option value=\"cipher26\">Cipher 26</option>\n                        <option value=\"circleOfNumbers\">Circle of Numbers</option>\n                        <option value=\"climbStairs\">Climb Stairs</option>\n                        <option value=\"combs\">Combs</option>\n                        <option value=\"comfortableNumbers\">Comfortable Numbers</option>\n                        <option value=\"commonCharacterCount\">Common Character Count</option>\n                        <option value=\"concatenateArrays\">Concatenate Arrays</option>\n                        <option value=\"constructRectangle\">Construct Rectangle</option>\n                        <option value=\"constructSquare\">Construct Square</option>\n                        <option value=\"contoursShifting\">Contours Shifting</option>\n                        <option value=\"correctNonogram\">Correct Nonogram</option>\n                        <option value=\"countSumOfTwoRepresentations2\">Count Sum of Two Representations 2</option>\n                        <option value=\"createAnagram\">Create Anagram</option>\n                        <option value=\"crossingSum\">Crossing Sum</option>\n                        <option value=\"crosswordFormation\">Crossword Formation</option>\n                        <option value=\"curiousClock\">Curious Clock</option>\n                        <option value=\"cyclicString\">Cyclic String</option>\n                        <option value=\"dayOfWeek\">Day of Week</option>\n                        <option value=\"decipher\">Decipher</option>\n                        <option value=\"deleteDigit\">Delete Digit</option>\n                        <option value=\"depositProfit\">Deposit Profit</option>\n                        <option value=\"detectCapitalUse\">Detect Capital Use</option>\n                        <option value=\"differentRightmostBit\">Different Right-Most Bit</option>\n                        <option value=\"differentSquares\">Different Squares</option>\n                        <option value=\"differentSymbolsNaive\">Different Symbols Naive</option>\n                        <option value=\"digitDegree\">Digit Degree</option>\n                        <option value=\"digitDifferenceSort\">Digit Difference Sort</option>\n                        <option value=\"digitsProduct\">Digits Product</option>\n                        <option value=\"distributeCandies\">DistributeCandies</option>\n                        <option value=\"drawRectangle\">Draw Rectangle</option>\n                        <option value=\"electionsWinners\">Elections Winners</option>\n                        <option value=\"equalPairOfBits\">Equal Pair of Bits</option>\n                        <option value=\"evenDigitsOnly\">Even Digits Only</option>\n                        <option value=\"extractEachKth\">Extract Each Kth</option>\n                        <option value=\"extractMatrixColumn\">Extract Matrix Column</option>\n                        <option value=\"extraNumber\">Extra Number</option>\n                        <option value=\"eyeRhyme\">Eye Rhyme</option>\n                        <option value=\"fileNaming\">File Naming</option>\n                        <option value=\"findEmailDomain\">Find Email Domain</option>\n                        <option value=\"findLUSlength\">Find Longest Uncommon Subsequence I</option>\n                        <option value=\"findMaxConsecutiveOnes\">Find Max Consecutive Ones</option>\n                        <option value=\"findTheDifference\">Find the Difference</option>\n                        <option value=\"firstDigit\">First Digit</option>\n                        <option value=\"firstReverseTry\">First Reverse Try</option>\n                        <option value=\"gravitation\">Gravitation</option>\n                        <option value=\"growingPlant\">Growing Plant</option>\n                        <option value=\"hammingWeight\">Hamming Weight</option>\n                        <option value=\"higherVersion\">Higher Version</option>\n                        <option value=\"holiday\">Holiday</option>\n                        <option value=\"houseNumbersSum\">House Numbers Sum</option>\n                        <option value=\"houseOfCats\">House of Cats</option>\n                        <option value=\"htmlEndTagByStartTag\">HTML End Tag By Start Tag</option>\n                        <option value=\"increaseNumberRoundness\">Increase Number Roundness</option>\n                        <option value=\"insertionSortList\">Insertion Sort List</option>\n                        <option value=\"integerToStringOfFixedWidth\">Integer to String of Fixed Width</option>\n                        <option value=\"intersection\">Intersection</option>\n                        <option value=\"isBeautifulString\">Is Beautiful String</option>\n                        <option value=\"isCaseInsensitivePalindrome\">Is Case Insensitive Palindrome</option>\n                        <option value=\"isDigit\">Is Digit</option>\n                        <option value=\"isInfiniteProcess\">Is Infinite Process</option>\n                        <option value=\"isInformationConsistent\">Is Information Consistent</option>\n                        <option value=\"isIPv4Address\">Is IPv4 Address</option>\n                        <option value=\"isLucky\">Is Lucky</option>\n                        <option value=\"isMAC48Address\">Is MAC48 Address</option>\n                        <option value=\"isOneBitCharacter\">Is One Bit Character</option>\n                        <option value=\"isPalindrome\">Is Palindrome</option>\n                        <option value=\"isPerfectSquare\">Is Perfect Square</option>\n                        <option value=\"isPower\">Is Power</option>\n                        <option value=\"isPowerOfFour\">Is Power of Four</option>\n                        <option value=\"isPowerOfThree\">Is Power of Three</option>\n                        <option value=\"isSentenceCorrect\">Is Sentence Correct</option>\n                        <option value=\"isSmooth\">Is Smooth</option>\n                        <option value=\"isSubsequence\">Is Subsequence</option>\n                        <option value=\"isSubstitutionCipher\">Is Substitution Cipher</option>\n                        <option value=\"isSumOfConsecutive2\">Is Sum of Consecutive 2</option>\n                        <option value=\"isToeplitzMatrix\">Is Toeplitz Matrix</option>\n                        <option value=\"isUnstablePair\">Is Unstable Pair</option>\n                        <option value=\"isValidParentheses\">Is Valid Parentheses</option>\n                        <option value=\"killKthBit\">Kill Kth Bit</option>\n                        <option value=\"knapsackLight\">Knapsack Light</option>\n                        <option value=\"largestNumber\">Largest Number</option>\n                        <option value=\"lateRide\">Late Ride</option>\n                        <option value=\"leastFactorial\">Least Factorial</option>\n                        <option value=\"lengthOfLastWord\">Length of Last Word</option>\n                        <option value=\"lineEncoding\">Line Encoding</option>\n                        <option value=\"lineUp\">Line Up</option>\n                        <option value=\"longestCommonPrefix\">Longest Common Prefix</option>\n                        <option value=\"longestDigitsPrefix\">Longest Digits Prefix</option>\n                        <option value=\"longestWord\">Longest Word</option>\n                        <option value=\"magicalWell\">Magical Well</option>\n                        <option value=\"majorityElement\">Majority Element</option>\n                        <option value=\"makeArrayConsecutive2\">Make Array Consecutive 2</option>\n                        <option value=\"matrixElementsSum\">Matrix Elements Sum</option>\n                        <option value=\"matrixReshape\">Matrix Reshape</option>\n                        <option value=\"arrayMaxConsecutiveSum\">Array Max Consecutive Sum</option>\n                        <option value=\"maximumSum\">Maximum Sum</option>\n                        <option value=\"maxMultiple\">Max Multiple</option>\n                        <option value=\"messageFromBinaryCode\">Message From Binary Code</option>\n                        <option value=\"metroCard\">Metro Card</option>\n                        <option value=\"minesweeper\">Minesweeper</option>\n                        <option value=\"minimalNumberOfCoins\">Minimal Number of Coins</option>\n                        <option value=\"mirrorBits\">Mirror Bits</option>\n                        <option value=\"missedClasses\">Missed Classes</option>\n                        <option value=\"mostFrequentDigitSum\">Most Frequent Digit Sum</option>\n                        <option value=\"newNumeralSystem\">New Numeral System</option>\n                        <option value=\"newYearCelebrations\">New Year Celebrations</option>\n                        <option value=\"noIfsNoButs\">No Ifs No Buts</option>\n                        <option value=\"nthNumber\">Nth Number</option>\n                        <option value=\"numberOfClans\">Number of Clans</option>\n                        <option value=\"numbersGrouping\">Numbers Grouping</option>\n                        <option value=\"numJewelsInStones\">Num Jewels in Stones</option>\n                        <option value=\"pagesNumberingWithInk\">Pages Numbering With Ink</option>\n                        <option value=\"pairOfShoes\">Pair of Shoes</option>\n                        <option value=\"palindromeRearranging\">Palindrome Rearranging</option>\n                        <option value=\"pascalsTriangle\">Pascals Triangle</option>\n                        <option value=\"pascalsTriangle2\">Pascals Triangle 2</option>\n                        <option value=\"phoneCall\">Phone Call</option>\n                        <option value=\"pivotIndex\">Pivot Index</option>\n                        <option value=\"plusOne\">Plus One</option>\n                        <option value=\"polygonPerimeter\">Polygon Perimeter</option>\n                        <option value=\"properNounCorrection\">Proper Noun Correction</option>\n                        <option value=\"rangeBitCount\">Range Bit Count</option>\n                        <option value=\"reachNextLevel\">Reach Next Level</option>\n                        <option value=\"rectangleRotation\">Rectangle Rotation</option>\n                        <option value=\"reflectString\">Reflect String</option>\n                        <option value=\"regularMonths\">Regular Months</option>\n                        <option value=\"removeArrayPart\">Remove Array Part</option>\n                        <option value=\"removeDuplicates\">Remove Duplicates</option>\n                        <option value=\"replaceAllDigitsRegExp\">Replace All Digits RegExp</option>\n                        <option value=\"replaceMiddle\">Replace Middle</option>\n                        <option value=\"reverseInParentheses\">Reverse In Parentheses</option>\n                        <option value=\"reverseOnDiagonals\">Reverse on Diagonals</option>\n                        <option value=\"reverseString\">Reverse String</option>\n                        <option value=\"reverseVowels\">Reverse Vowels</option>\n                        <option value=\"romanToInt\">Roman to Int</option>\n                        <option value=\"rotateString\">Rotate String</option>\n                        <option value=\"rounders\">Rounders</option>\n                        <option value=\"rowsRearranging\">Rows Rearranging</option>\n                        <option value=\"runnersMeetings\">Runners Meetings</option>\n                        <option value=\"searchInsert\">Search Insert</option>\n                        <option value=\"seatsInTheater\">Seats in Theater</option>\n                        <option value=\"secondRightmostZeroBit\">Second Right-Most Zero Bit</option>\n                        <option value=\"selfDividingNumbers\">Self-Dividing Numbers</option>\n                        <option value=\"shapeArea\">Shape Area</option>\n                        <option value=\"shuffledArray\">Shuffled Array</option>\n                        <option value=\"singleNumber\">Single Number</option>\n                        <option value=\"sortByHeight\">Sort by Height</option>\n                        <option value=\"sortByLength\">Sort by Length</option>\n                        <option value=\"spiralNumbers\">Spiral Numbers</option>\n                        <option value=\"squareDigitsSequence\">Square Digits Sequence</option>\n                        <option value=\"starRotation\">Star Rotation</option>\n                        <option value=\"stolenLunch\">Stolen Lunch</option>\n                        <option value=\"stringsConstruction\">Strings Construction</option>\n                        <option value=\"stringsCrossover\">Strings Crossover</option>\n                        <option value=\"stringsRearrangement\">Strings Rearrangement</option>\n                        <option value=\"strStr\">strStr Implementation</option>\n                        <option value=\"sudoku\">Sudoku</option>\n                        <option value=\"sumUpNumbers\">Sum Up Numbers</option>\n                        <option value=\"swapAdjacentBits\">Swap Adjacent Bits</option>\n                        <option value=\"swapAdjacentWords\">Swap Adjacent Words</option>\n                        <option value=\"swapDiagonals\">Swap Diagonals</option>\n                        <option value=\"switchLights\">Switch Lights</option>\n                        <option value=\"isTandemRepeat\">Is Tandem Repeat</option>\n                        <option value=\"tennisSet\">Tennis Set</option>\n                        <option value=\"threeSplit\">Three Split</option>\n                        <option value=\"timedReading\">Timed Reading</option>\n                        <option value=\"twoSum\">Two Sum</option>\n                        <option value=\"twoSum2\">Two Sum 2</option>\n                        <option value=\"uniqueDigitProducts\">Unique Digit Products</option>\n                        <option value=\"uniqueMorseRepresentations\">Unique Morse Representations</option>\n                        <option value=\"validTime\">Valid Time</option>\n                        <option value=\"variableName\">Variable Name</option>\n                        <option value=\"videoPart\">Video Part</option>\n                        <option value=\"volleyballPositions\">Volleyball Positions</option>\n                        <option value=\"weakNumbers\">Weak Numbers</option>\n                        <option value=\"whoseTurn\">Whose Turn</option>\n                        <option value=\"willYou\">Will You</option>\n                        <option value=\"wordPattern\">Word Pattern</option>\n                    </select>\n                </div>\n                <Solution challengeName={challengeName}/>\n            </div>\n        </>\n    );\n};\n\nexport default Solutions;","import './App.css';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport Landing from './pages/Landing';\nimport Solutions from './pages/Solutions';\n\nfunction App() {\n  return (\n    <Router>\n      <Switch>\n        \n        \n        <Route exact path=\"/codesignal-projects-react-showcase\" component={Landing}/>\n        <Route exact path=\"/solutions/codesignal-projects-react-showcase\" component={Solutions}/>\n        \n        \n        {/*\n        <Route exact path=\"/\" component={Landing}/>\n        <Route exact path=\"/solutions\" component={Solutions}/>\n        */}\n        \n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { BrowserRouter } from 'react-router-dom'\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\n     <App />\n   </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}